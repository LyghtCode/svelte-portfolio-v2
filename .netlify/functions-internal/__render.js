var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};

// .svelte-kit/netlify/entry.js
__export(exports, {
  handler: () => handler
});

// node_modules/@sveltejs/kit/dist/install-fetch.js
var import_http = __toModule(require("http"));
var import_https = __toModule(require("https"));
var import_zlib = __toModule(require("zlib"));
var import_stream = __toModule(require("stream"));
var import_util = __toModule(require("util"));
var import_crypto = __toModule(require("crypto"));
var import_url = __toModule(require("url"));
var commonjsGlobal = typeof globalThis !== "undefined" ? globalThis : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : {};
function dataUriToBuffer(uri) {
  if (!/^data:/i.test(uri)) {
    throw new TypeError('`uri` does not appear to be a Data URI (must begin with "data:")');
  }
  uri = uri.replace(/\r?\n/g, "");
  const firstComma = uri.indexOf(",");
  if (firstComma === -1 || firstComma <= 4) {
    throw new TypeError("malformed data: URI");
  }
  const meta = uri.substring(5, firstComma).split(";");
  let charset = "";
  let base64 = false;
  const type = meta[0] || "text/plain";
  let typeFull = type;
  for (let i = 1; i < meta.length; i++) {
    if (meta[i] === "base64") {
      base64 = true;
    } else {
      typeFull += `;${meta[i]}`;
      if (meta[i].indexOf("charset=") === 0) {
        charset = meta[i].substring(8);
      }
    }
  }
  if (!meta[0] && !charset.length) {
    typeFull += ";charset=US-ASCII";
    charset = "US-ASCII";
  }
  const encoding = base64 ? "base64" : "ascii";
  const data = unescape(uri.substring(firstComma + 1));
  const buffer = Buffer.from(data, encoding);
  buffer.type = type;
  buffer.typeFull = typeFull;
  buffer.charset = charset;
  return buffer;
}
var src = dataUriToBuffer;
var dataUriToBuffer$1 = src;
var ponyfill_es2018 = { exports: {} };
(function(module2, exports) {
  (function(global2, factory) {
    factory(exports);
  })(commonjsGlobal, function(exports2) {
    const SymbolPolyfill = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? Symbol : (description) => `Symbol(${description})`;
    function noop2() {
      return void 0;
    }
    function getGlobals() {
      if (typeof self !== "undefined") {
        return self;
      } else if (typeof window !== "undefined") {
        return window;
      } else if (typeof commonjsGlobal !== "undefined") {
        return commonjsGlobal;
      }
      return void 0;
    }
    const globals = getGlobals();
    function typeIsObject(x) {
      return typeof x === "object" && x !== null || typeof x === "function";
    }
    const rethrowAssertionErrorRejection = noop2;
    const originalPromise = Promise;
    const originalPromiseThen = Promise.prototype.then;
    const originalPromiseResolve = Promise.resolve.bind(originalPromise);
    const originalPromiseReject = Promise.reject.bind(originalPromise);
    function newPromise(executor) {
      return new originalPromise(executor);
    }
    function promiseResolvedWith(value) {
      return originalPromiseResolve(value);
    }
    function promiseRejectedWith(reason) {
      return originalPromiseReject(reason);
    }
    function PerformPromiseThen(promise, onFulfilled, onRejected) {
      return originalPromiseThen.call(promise, onFulfilled, onRejected);
    }
    function uponPromise(promise, onFulfilled, onRejected) {
      PerformPromiseThen(PerformPromiseThen(promise, onFulfilled, onRejected), void 0, rethrowAssertionErrorRejection);
    }
    function uponFulfillment(promise, onFulfilled) {
      uponPromise(promise, onFulfilled);
    }
    function uponRejection(promise, onRejected) {
      uponPromise(promise, void 0, onRejected);
    }
    function transformPromiseWith(promise, fulfillmentHandler, rejectionHandler) {
      return PerformPromiseThen(promise, fulfillmentHandler, rejectionHandler);
    }
    function setPromiseIsHandledToTrue(promise) {
      PerformPromiseThen(promise, void 0, rethrowAssertionErrorRejection);
    }
    const queueMicrotask = (() => {
      const globalQueueMicrotask = globals && globals.queueMicrotask;
      if (typeof globalQueueMicrotask === "function") {
        return globalQueueMicrotask;
      }
      const resolvedPromise = promiseResolvedWith(void 0);
      return (fn) => PerformPromiseThen(resolvedPromise, fn);
    })();
    function reflectCall(F, V, args) {
      if (typeof F !== "function") {
        throw new TypeError("Argument is not a function");
      }
      return Function.prototype.apply.call(F, V, args);
    }
    function promiseCall(F, V, args) {
      try {
        return promiseResolvedWith(reflectCall(F, V, args));
      } catch (value) {
        return promiseRejectedWith(value);
      }
    }
    const QUEUE_MAX_ARRAY_SIZE = 16384;
    class SimpleQueue {
      constructor() {
        this._cursor = 0;
        this._size = 0;
        this._front = {
          _elements: [],
          _next: void 0
        };
        this._back = this._front;
        this._cursor = 0;
        this._size = 0;
      }
      get length() {
        return this._size;
      }
      push(element) {
        const oldBack = this._back;
        let newBack = oldBack;
        if (oldBack._elements.length === QUEUE_MAX_ARRAY_SIZE - 1) {
          newBack = {
            _elements: [],
            _next: void 0
          };
        }
        oldBack._elements.push(element);
        if (newBack !== oldBack) {
          this._back = newBack;
          oldBack._next = newBack;
        }
        ++this._size;
      }
      shift() {
        const oldFront = this._front;
        let newFront = oldFront;
        const oldCursor = this._cursor;
        let newCursor = oldCursor + 1;
        const elements = oldFront._elements;
        const element = elements[oldCursor];
        if (newCursor === QUEUE_MAX_ARRAY_SIZE) {
          newFront = oldFront._next;
          newCursor = 0;
        }
        --this._size;
        this._cursor = newCursor;
        if (oldFront !== newFront) {
          this._front = newFront;
        }
        elements[oldCursor] = void 0;
        return element;
      }
      forEach(callback) {
        let i = this._cursor;
        let node = this._front;
        let elements = node._elements;
        while (i !== elements.length || node._next !== void 0) {
          if (i === elements.length) {
            node = node._next;
            elements = node._elements;
            i = 0;
            if (elements.length === 0) {
              break;
            }
          }
          callback(elements[i]);
          ++i;
        }
      }
      peek() {
        const front = this._front;
        const cursor = this._cursor;
        return front._elements[cursor];
      }
    }
    function ReadableStreamReaderGenericInitialize(reader, stream) {
      reader._ownerReadableStream = stream;
      stream._reader = reader;
      if (stream._state === "readable") {
        defaultReaderClosedPromiseInitialize(reader);
      } else if (stream._state === "closed") {
        defaultReaderClosedPromiseInitializeAsResolved(reader);
      } else {
        defaultReaderClosedPromiseInitializeAsRejected(reader, stream._storedError);
      }
    }
    function ReadableStreamReaderGenericCancel(reader, reason) {
      const stream = reader._ownerReadableStream;
      return ReadableStreamCancel(stream, reason);
    }
    function ReadableStreamReaderGenericRelease(reader) {
      if (reader._ownerReadableStream._state === "readable") {
        defaultReaderClosedPromiseReject(reader, new TypeError(`Reader was released and can no longer be used to monitor the stream's closedness`));
      } else {
        defaultReaderClosedPromiseResetToRejected(reader, new TypeError(`Reader was released and can no longer be used to monitor the stream's closedness`));
      }
      reader._ownerReadableStream._reader = void 0;
      reader._ownerReadableStream = void 0;
    }
    function readerLockException(name) {
      return new TypeError("Cannot " + name + " a stream using a released reader");
    }
    function defaultReaderClosedPromiseInitialize(reader) {
      reader._closedPromise = newPromise((resolve2, reject) => {
        reader._closedPromise_resolve = resolve2;
        reader._closedPromise_reject = reject;
      });
    }
    function defaultReaderClosedPromiseInitializeAsRejected(reader, reason) {
      defaultReaderClosedPromiseInitialize(reader);
      defaultReaderClosedPromiseReject(reader, reason);
    }
    function defaultReaderClosedPromiseInitializeAsResolved(reader) {
      defaultReaderClosedPromiseInitialize(reader);
      defaultReaderClosedPromiseResolve(reader);
    }
    function defaultReaderClosedPromiseReject(reader, reason) {
      if (reader._closedPromise_reject === void 0) {
        return;
      }
      setPromiseIsHandledToTrue(reader._closedPromise);
      reader._closedPromise_reject(reason);
      reader._closedPromise_resolve = void 0;
      reader._closedPromise_reject = void 0;
    }
    function defaultReaderClosedPromiseResetToRejected(reader, reason) {
      defaultReaderClosedPromiseInitializeAsRejected(reader, reason);
    }
    function defaultReaderClosedPromiseResolve(reader) {
      if (reader._closedPromise_resolve === void 0) {
        return;
      }
      reader._closedPromise_resolve(void 0);
      reader._closedPromise_resolve = void 0;
      reader._closedPromise_reject = void 0;
    }
    const AbortSteps = SymbolPolyfill("[[AbortSteps]]");
    const ErrorSteps = SymbolPolyfill("[[ErrorSteps]]");
    const CancelSteps = SymbolPolyfill("[[CancelSteps]]");
    const PullSteps = SymbolPolyfill("[[PullSteps]]");
    const NumberIsFinite = Number.isFinite || function(x) {
      return typeof x === "number" && isFinite(x);
    };
    const MathTrunc = Math.trunc || function(v) {
      return v < 0 ? Math.ceil(v) : Math.floor(v);
    };
    function isDictionary(x) {
      return typeof x === "object" || typeof x === "function";
    }
    function assertDictionary(obj, context) {
      if (obj !== void 0 && !isDictionary(obj)) {
        throw new TypeError(`${context} is not an object.`);
      }
    }
    function assertFunction(x, context) {
      if (typeof x !== "function") {
        throw new TypeError(`${context} is not a function.`);
      }
    }
    function isObject(x) {
      return typeof x === "object" && x !== null || typeof x === "function";
    }
    function assertObject(x, context) {
      if (!isObject(x)) {
        throw new TypeError(`${context} is not an object.`);
      }
    }
    function assertRequiredArgument(x, position, context) {
      if (x === void 0) {
        throw new TypeError(`Parameter ${position} is required in '${context}'.`);
      }
    }
    function assertRequiredField(x, field, context) {
      if (x === void 0) {
        throw new TypeError(`${field} is required in '${context}'.`);
      }
    }
    function convertUnrestrictedDouble(value) {
      return Number(value);
    }
    function censorNegativeZero(x) {
      return x === 0 ? 0 : x;
    }
    function integerPart(x) {
      return censorNegativeZero(MathTrunc(x));
    }
    function convertUnsignedLongLongWithEnforceRange(value, context) {
      const lowerBound = 0;
      const upperBound = Number.MAX_SAFE_INTEGER;
      let x = Number(value);
      x = censorNegativeZero(x);
      if (!NumberIsFinite(x)) {
        throw new TypeError(`${context} is not a finite number`);
      }
      x = integerPart(x);
      if (x < lowerBound || x > upperBound) {
        throw new TypeError(`${context} is outside the accepted range of ${lowerBound} to ${upperBound}, inclusive`);
      }
      if (!NumberIsFinite(x) || x === 0) {
        return 0;
      }
      return x;
    }
    function assertReadableStream(x, context) {
      if (!IsReadableStream(x)) {
        throw new TypeError(`${context} is not a ReadableStream.`);
      }
    }
    function AcquireReadableStreamDefaultReader(stream) {
      return new ReadableStreamDefaultReader(stream);
    }
    function ReadableStreamAddReadRequest(stream, readRequest) {
      stream._reader._readRequests.push(readRequest);
    }
    function ReadableStreamFulfillReadRequest(stream, chunk, done) {
      const reader = stream._reader;
      const readRequest = reader._readRequests.shift();
      if (done) {
        readRequest._closeSteps();
      } else {
        readRequest._chunkSteps(chunk);
      }
    }
    function ReadableStreamGetNumReadRequests(stream) {
      return stream._reader._readRequests.length;
    }
    function ReadableStreamHasDefaultReader(stream) {
      const reader = stream._reader;
      if (reader === void 0) {
        return false;
      }
      if (!IsReadableStreamDefaultReader(reader)) {
        return false;
      }
      return true;
    }
    class ReadableStreamDefaultReader {
      constructor(stream) {
        assertRequiredArgument(stream, 1, "ReadableStreamDefaultReader");
        assertReadableStream(stream, "First parameter");
        if (IsReadableStreamLocked(stream)) {
          throw new TypeError("This stream has already been locked for exclusive reading by another reader");
        }
        ReadableStreamReaderGenericInitialize(this, stream);
        this._readRequests = new SimpleQueue();
      }
      get closed() {
        if (!IsReadableStreamDefaultReader(this)) {
          return promiseRejectedWith(defaultReaderBrandCheckException("closed"));
        }
        return this._closedPromise;
      }
      cancel(reason = void 0) {
        if (!IsReadableStreamDefaultReader(this)) {
          return promiseRejectedWith(defaultReaderBrandCheckException("cancel"));
        }
        if (this._ownerReadableStream === void 0) {
          return promiseRejectedWith(readerLockException("cancel"));
        }
        return ReadableStreamReaderGenericCancel(this, reason);
      }
      read() {
        if (!IsReadableStreamDefaultReader(this)) {
          return promiseRejectedWith(defaultReaderBrandCheckException("read"));
        }
        if (this._ownerReadableStream === void 0) {
          return promiseRejectedWith(readerLockException("read from"));
        }
        let resolvePromise;
        let rejectPromise;
        const promise = newPromise((resolve2, reject) => {
          resolvePromise = resolve2;
          rejectPromise = reject;
        });
        const readRequest = {
          _chunkSteps: (chunk) => resolvePromise({ value: chunk, done: false }),
          _closeSteps: () => resolvePromise({ value: void 0, done: true }),
          _errorSteps: (e) => rejectPromise(e)
        };
        ReadableStreamDefaultReaderRead(this, readRequest);
        return promise;
      }
      releaseLock() {
        if (!IsReadableStreamDefaultReader(this)) {
          throw defaultReaderBrandCheckException("releaseLock");
        }
        if (this._ownerReadableStream === void 0) {
          return;
        }
        if (this._readRequests.length > 0) {
          throw new TypeError("Tried to release a reader lock when that reader has pending read() calls un-settled");
        }
        ReadableStreamReaderGenericRelease(this);
      }
    }
    Object.defineProperties(ReadableStreamDefaultReader.prototype, {
      cancel: { enumerable: true },
      read: { enumerable: true },
      releaseLock: { enumerable: true },
      closed: { enumerable: true }
    });
    if (typeof SymbolPolyfill.toStringTag === "symbol") {
      Object.defineProperty(ReadableStreamDefaultReader.prototype, SymbolPolyfill.toStringTag, {
        value: "ReadableStreamDefaultReader",
        configurable: true
      });
    }
    function IsReadableStreamDefaultReader(x) {
      if (!typeIsObject(x)) {
        return false;
      }
      if (!Object.prototype.hasOwnProperty.call(x, "_readRequests")) {
        return false;
      }
      return x instanceof ReadableStreamDefaultReader;
    }
    function ReadableStreamDefaultReaderRead(reader, readRequest) {
      const stream = reader._ownerReadableStream;
      stream._disturbed = true;
      if (stream._state === "closed") {
        readRequest._closeSteps();
      } else if (stream._state === "errored") {
        readRequest._errorSteps(stream._storedError);
      } else {
        stream._readableStreamController[PullSteps](readRequest);
      }
    }
    function defaultReaderBrandCheckException(name) {
      return new TypeError(`ReadableStreamDefaultReader.prototype.${name} can only be used on a ReadableStreamDefaultReader`);
    }
    const AsyncIteratorPrototype = Object.getPrototypeOf(Object.getPrototypeOf(async function* () {
    }).prototype);
    class ReadableStreamAsyncIteratorImpl {
      constructor(reader, preventCancel) {
        this._ongoingPromise = void 0;
        this._isFinished = false;
        this._reader = reader;
        this._preventCancel = preventCancel;
      }
      next() {
        const nextSteps = () => this._nextSteps();
        this._ongoingPromise = this._ongoingPromise ? transformPromiseWith(this._ongoingPromise, nextSteps, nextSteps) : nextSteps();
        return this._ongoingPromise;
      }
      return(value) {
        const returnSteps = () => this._returnSteps(value);
        return this._ongoingPromise ? transformPromiseWith(this._ongoingPromise, returnSteps, returnSteps) : returnSteps();
      }
      _nextSteps() {
        if (this._isFinished) {
          return Promise.resolve({ value: void 0, done: true });
        }
        const reader = this._reader;
        if (reader._ownerReadableStream === void 0) {
          return promiseRejectedWith(readerLockException("iterate"));
        }
        let resolvePromise;
        let rejectPromise;
        const promise = newPromise((resolve2, reject) => {
          resolvePromise = resolve2;
          rejectPromise = reject;
        });
        const readRequest = {
          _chunkSteps: (chunk) => {
            this._ongoingPromise = void 0;
            queueMicrotask(() => resolvePromise({ value: chunk, done: false }));
          },
          _closeSteps: () => {
            this._ongoingPromise = void 0;
            this._isFinished = true;
            ReadableStreamReaderGenericRelease(reader);
            resolvePromise({ value: void 0, done: true });
          },
          _errorSteps: (reason) => {
            this._ongoingPromise = void 0;
            this._isFinished = true;
            ReadableStreamReaderGenericRelease(reader);
            rejectPromise(reason);
          }
        };
        ReadableStreamDefaultReaderRead(reader, readRequest);
        return promise;
      }
      _returnSteps(value) {
        if (this._isFinished) {
          return Promise.resolve({ value, done: true });
        }
        this._isFinished = true;
        const reader = this._reader;
        if (reader._ownerReadableStream === void 0) {
          return promiseRejectedWith(readerLockException("finish iterating"));
        }
        if (!this._preventCancel) {
          const result = ReadableStreamReaderGenericCancel(reader, value);
          ReadableStreamReaderGenericRelease(reader);
          return transformPromiseWith(result, () => ({ value, done: true }));
        }
        ReadableStreamReaderGenericRelease(reader);
        return promiseResolvedWith({ value, done: true });
      }
    }
    const ReadableStreamAsyncIteratorPrototype = {
      next() {
        if (!IsReadableStreamAsyncIterator(this)) {
          return promiseRejectedWith(streamAsyncIteratorBrandCheckException("next"));
        }
        return this._asyncIteratorImpl.next();
      },
      return(value) {
        if (!IsReadableStreamAsyncIterator(this)) {
          return promiseRejectedWith(streamAsyncIteratorBrandCheckException("return"));
        }
        return this._asyncIteratorImpl.return(value);
      }
    };
    if (AsyncIteratorPrototype !== void 0) {
      Object.setPrototypeOf(ReadableStreamAsyncIteratorPrototype, AsyncIteratorPrototype);
    }
    function AcquireReadableStreamAsyncIterator(stream, preventCancel) {
      const reader = AcquireReadableStreamDefaultReader(stream);
      const impl = new ReadableStreamAsyncIteratorImpl(reader, preventCancel);
      const iterator = Object.create(ReadableStreamAsyncIteratorPrototype);
      iterator._asyncIteratorImpl = impl;
      return iterator;
    }
    function IsReadableStreamAsyncIterator(x) {
      if (!typeIsObject(x)) {
        return false;
      }
      if (!Object.prototype.hasOwnProperty.call(x, "_asyncIteratorImpl")) {
        return false;
      }
      try {
        return x._asyncIteratorImpl instanceof ReadableStreamAsyncIteratorImpl;
      } catch (_a) {
        return false;
      }
    }
    function streamAsyncIteratorBrandCheckException(name) {
      return new TypeError(`ReadableStreamAsyncIterator.${name} can only be used on a ReadableSteamAsyncIterator`);
    }
    const NumberIsNaN = Number.isNaN || function(x) {
      return x !== x;
    };
    function CreateArrayFromList(elements) {
      return elements.slice();
    }
    function CopyDataBlockBytes(dest, destOffset, src2, srcOffset, n) {
      new Uint8Array(dest).set(new Uint8Array(src2, srcOffset, n), destOffset);
    }
    function TransferArrayBuffer(O) {
      return O;
    }
    function IsDetachedBuffer(O) {
      return false;
    }
    function ArrayBufferSlice(buffer, begin, end) {
      if (buffer.slice) {
        return buffer.slice(begin, end);
      }
      const length = end - begin;
      const slice = new ArrayBuffer(length);
      CopyDataBlockBytes(slice, 0, buffer, begin, length);
      return slice;
    }
    function IsNonNegativeNumber(v) {
      if (typeof v !== "number") {
        return false;
      }
      if (NumberIsNaN(v)) {
        return false;
      }
      if (v < 0) {
        return false;
      }
      return true;
    }
    function CloneAsUint8Array(O) {
      const buffer = ArrayBufferSlice(O.buffer, O.byteOffset, O.byteOffset + O.byteLength);
      return new Uint8Array(buffer);
    }
    function DequeueValue(container) {
      const pair = container._queue.shift();
      container._queueTotalSize -= pair.size;
      if (container._queueTotalSize < 0) {
        container._queueTotalSize = 0;
      }
      return pair.value;
    }
    function EnqueueValueWithSize(container, value, size) {
      if (!IsNonNegativeNumber(size) || size === Infinity) {
        throw new RangeError("Size must be a finite, non-NaN, non-negative number.");
      }
      container._queue.push({ value, size });
      container._queueTotalSize += size;
    }
    function PeekQueueValue(container) {
      const pair = container._queue.peek();
      return pair.value;
    }
    function ResetQueue(container) {
      container._queue = new SimpleQueue();
      container._queueTotalSize = 0;
    }
    class ReadableStreamBYOBRequest {
      constructor() {
        throw new TypeError("Illegal constructor");
      }
      get view() {
        if (!IsReadableStreamBYOBRequest(this)) {
          throw byobRequestBrandCheckException("view");
        }
        return this._view;
      }
      respond(bytesWritten) {
        if (!IsReadableStreamBYOBRequest(this)) {
          throw byobRequestBrandCheckException("respond");
        }
        assertRequiredArgument(bytesWritten, 1, "respond");
        bytesWritten = convertUnsignedLongLongWithEnforceRange(bytesWritten, "First parameter");
        if (this._associatedReadableByteStreamController === void 0) {
          throw new TypeError("This BYOB request has been invalidated");
        }
        if (IsDetachedBuffer(this._view.buffer))
          ;
        ReadableByteStreamControllerRespond(this._associatedReadableByteStreamController, bytesWritten);
      }
      respondWithNewView(view) {
        if (!IsReadableStreamBYOBRequest(this)) {
          throw byobRequestBrandCheckException("respondWithNewView");
        }
        assertRequiredArgument(view, 1, "respondWithNewView");
        if (!ArrayBuffer.isView(view)) {
          throw new TypeError("You can only respond with array buffer views");
        }
        if (this._associatedReadableByteStreamController === void 0) {
          throw new TypeError("This BYOB request has been invalidated");
        }
        if (IsDetachedBuffer(view.buffer))
          ;
        ReadableByteStreamControllerRespondWithNewView(this._associatedReadableByteStreamController, view);
      }
    }
    Object.defineProperties(ReadableStreamBYOBRequest.prototype, {
      respond: { enumerable: true },
      respondWithNewView: { enumerable: true },
      view: { enumerable: true }
    });
    if (typeof SymbolPolyfill.toStringTag === "symbol") {
      Object.defineProperty(ReadableStreamBYOBRequest.prototype, SymbolPolyfill.toStringTag, {
        value: "ReadableStreamBYOBRequest",
        configurable: true
      });
    }
    class ReadableByteStreamController {
      constructor() {
        throw new TypeError("Illegal constructor");
      }
      get byobRequest() {
        if (!IsReadableByteStreamController(this)) {
          throw byteStreamControllerBrandCheckException("byobRequest");
        }
        return ReadableByteStreamControllerGetBYOBRequest(this);
      }
      get desiredSize() {
        if (!IsReadableByteStreamController(this)) {
          throw byteStreamControllerBrandCheckException("desiredSize");
        }
        return ReadableByteStreamControllerGetDesiredSize(this);
      }
      close() {
        if (!IsReadableByteStreamController(this)) {
          throw byteStreamControllerBrandCheckException("close");
        }
        if (this._closeRequested) {
          throw new TypeError("The stream has already been closed; do not close it again!");
        }
        const state = this._controlledReadableByteStream._state;
        if (state !== "readable") {
          throw new TypeError(`The stream (in ${state} state) is not in the readable state and cannot be closed`);
        }
        ReadableByteStreamControllerClose(this);
      }
      enqueue(chunk) {
        if (!IsReadableByteStreamController(this)) {
          throw byteStreamControllerBrandCheckException("enqueue");
        }
        assertRequiredArgument(chunk, 1, "enqueue");
        if (!ArrayBuffer.isView(chunk)) {
          throw new TypeError("chunk must be an array buffer view");
        }
        if (chunk.byteLength === 0) {
          throw new TypeError("chunk must have non-zero byteLength");
        }
        if (chunk.buffer.byteLength === 0) {
          throw new TypeError(`chunk's buffer must have non-zero byteLength`);
        }
        if (this._closeRequested) {
          throw new TypeError("stream is closed or draining");
        }
        const state = this._controlledReadableByteStream._state;
        if (state !== "readable") {
          throw new TypeError(`The stream (in ${state} state) is not in the readable state and cannot be enqueued to`);
        }
        ReadableByteStreamControllerEnqueue(this, chunk);
      }
      error(e = void 0) {
        if (!IsReadableByteStreamController(this)) {
          throw byteStreamControllerBrandCheckException("error");
        }
        ReadableByteStreamControllerError(this, e);
      }
      [CancelSteps](reason) {
        ReadableByteStreamControllerClearPendingPullIntos(this);
        ResetQueue(this);
        const result = this._cancelAlgorithm(reason);
        ReadableByteStreamControllerClearAlgorithms(this);
        return result;
      }
      [PullSteps](readRequest) {
        const stream = this._controlledReadableByteStream;
        if (this._queueTotalSize > 0) {
          const entry = this._queue.shift();
          this._queueTotalSize -= entry.byteLength;
          ReadableByteStreamControllerHandleQueueDrain(this);
          const view = new Uint8Array(entry.buffer, entry.byteOffset, entry.byteLength);
          readRequest._chunkSteps(view);
          return;
        }
        const autoAllocateChunkSize = this._autoAllocateChunkSize;
        if (autoAllocateChunkSize !== void 0) {
          let buffer;
          try {
            buffer = new ArrayBuffer(autoAllocateChunkSize);
          } catch (bufferE) {
            readRequest._errorSteps(bufferE);
            return;
          }
          const pullIntoDescriptor = {
            buffer,
            bufferByteLength: autoAllocateChunkSize,
            byteOffset: 0,
            byteLength: autoAllocateChunkSize,
            bytesFilled: 0,
            elementSize: 1,
            viewConstructor: Uint8Array,
            readerType: "default"
          };
          this._pendingPullIntos.push(pullIntoDescriptor);
        }
        ReadableStreamAddReadRequest(stream, readRequest);
        ReadableByteStreamControllerCallPullIfNeeded(this);
      }
    }
    Object.defineProperties(ReadableByteStreamController.prototype, {
      close: { enumerable: true },
      enqueue: { enumerable: true },
      error: { enumerable: true },
      byobRequest: { enumerable: true },
      desiredSize: { enumerable: true }
    });
    if (typeof SymbolPolyfill.toStringTag === "symbol") {
      Object.defineProperty(ReadableByteStreamController.prototype, SymbolPolyfill.toStringTag, {
        value: "ReadableByteStreamController",
        configurable: true
      });
    }
    function IsReadableByteStreamController(x) {
      if (!typeIsObject(x)) {
        return false;
      }
      if (!Object.prototype.hasOwnProperty.call(x, "_controlledReadableByteStream")) {
        return false;
      }
      return x instanceof ReadableByteStreamController;
    }
    function IsReadableStreamBYOBRequest(x) {
      if (!typeIsObject(x)) {
        return false;
      }
      if (!Object.prototype.hasOwnProperty.call(x, "_associatedReadableByteStreamController")) {
        return false;
      }
      return x instanceof ReadableStreamBYOBRequest;
    }
    function ReadableByteStreamControllerCallPullIfNeeded(controller) {
      const shouldPull = ReadableByteStreamControllerShouldCallPull(controller);
      if (!shouldPull) {
        return;
      }
      if (controller._pulling) {
        controller._pullAgain = true;
        return;
      }
      controller._pulling = true;
      const pullPromise = controller._pullAlgorithm();
      uponPromise(pullPromise, () => {
        controller._pulling = false;
        if (controller._pullAgain) {
          controller._pullAgain = false;
          ReadableByteStreamControllerCallPullIfNeeded(controller);
        }
      }, (e) => {
        ReadableByteStreamControllerError(controller, e);
      });
    }
    function ReadableByteStreamControllerClearPendingPullIntos(controller) {
      ReadableByteStreamControllerInvalidateBYOBRequest(controller);
      controller._pendingPullIntos = new SimpleQueue();
    }
    function ReadableByteStreamControllerCommitPullIntoDescriptor(stream, pullIntoDescriptor) {
      let done = false;
      if (stream._state === "closed") {
        done = true;
      }
      const filledView = ReadableByteStreamControllerConvertPullIntoDescriptor(pullIntoDescriptor);
      if (pullIntoDescriptor.readerType === "default") {
        ReadableStreamFulfillReadRequest(stream, filledView, done);
      } else {
        ReadableStreamFulfillReadIntoRequest(stream, filledView, done);
      }
    }
    function ReadableByteStreamControllerConvertPullIntoDescriptor(pullIntoDescriptor) {
      const bytesFilled = pullIntoDescriptor.bytesFilled;
      const elementSize = pullIntoDescriptor.elementSize;
      return new pullIntoDescriptor.viewConstructor(pullIntoDescriptor.buffer, pullIntoDescriptor.byteOffset, bytesFilled / elementSize);
    }
    function ReadableByteStreamControllerEnqueueChunkToQueue(controller, buffer, byteOffset, byteLength) {
      controller._queue.push({ buffer, byteOffset, byteLength });
      controller._queueTotalSize += byteLength;
    }
    function ReadableByteStreamControllerFillPullIntoDescriptorFromQueue(controller, pullIntoDescriptor) {
      const elementSize = pullIntoDescriptor.elementSize;
      const currentAlignedBytes = pullIntoDescriptor.bytesFilled - pullIntoDescriptor.bytesFilled % elementSize;
      const maxBytesToCopy = Math.min(controller._queueTotalSize, pullIntoDescriptor.byteLength - pullIntoDescriptor.bytesFilled);
      const maxBytesFilled = pullIntoDescriptor.bytesFilled + maxBytesToCopy;
      const maxAlignedBytes = maxBytesFilled - maxBytesFilled % elementSize;
      let totalBytesToCopyRemaining = maxBytesToCopy;
      let ready = false;
      if (maxAlignedBytes > currentAlignedBytes) {
        totalBytesToCopyRemaining = maxAlignedBytes - pullIntoDescriptor.bytesFilled;
        ready = true;
      }
      const queue = controller._queue;
      while (totalBytesToCopyRemaining > 0) {
        const headOfQueue = queue.peek();
        const bytesToCopy = Math.min(totalBytesToCopyRemaining, headOfQueue.byteLength);
        const destStart = pullIntoDescriptor.byteOffset + pullIntoDescriptor.bytesFilled;
        CopyDataBlockBytes(pullIntoDescriptor.buffer, destStart, headOfQueue.buffer, headOfQueue.byteOffset, bytesToCopy);
        if (headOfQueue.byteLength === bytesToCopy) {
          queue.shift();
        } else {
          headOfQueue.byteOffset += bytesToCopy;
          headOfQueue.byteLength -= bytesToCopy;
        }
        controller._queueTotalSize -= bytesToCopy;
        ReadableByteStreamControllerFillHeadPullIntoDescriptor(controller, bytesToCopy, pullIntoDescriptor);
        totalBytesToCopyRemaining -= bytesToCopy;
      }
      return ready;
    }
    function ReadableByteStreamControllerFillHeadPullIntoDescriptor(controller, size, pullIntoDescriptor) {
      pullIntoDescriptor.bytesFilled += size;
    }
    function ReadableByteStreamControllerHandleQueueDrain(controller) {
      if (controller._queueTotalSize === 0 && controller._closeRequested) {
        ReadableByteStreamControllerClearAlgorithms(controller);
        ReadableStreamClose(controller._controlledReadableByteStream);
      } else {
        ReadableByteStreamControllerCallPullIfNeeded(controller);
      }
    }
    function ReadableByteStreamControllerInvalidateBYOBRequest(controller) {
      if (controller._byobRequest === null) {
        return;
      }
      controller._byobRequest._associatedReadableByteStreamController = void 0;
      controller._byobRequest._view = null;
      controller._byobRequest = null;
    }
    function ReadableByteStreamControllerProcessPullIntoDescriptorsUsingQueue(controller) {
      while (controller._pendingPullIntos.length > 0) {
        if (controller._queueTotalSize === 0) {
          return;
        }
        const pullIntoDescriptor = controller._pendingPullIntos.peek();
        if (ReadableByteStreamControllerFillPullIntoDescriptorFromQueue(controller, pullIntoDescriptor)) {
          ReadableByteStreamControllerShiftPendingPullInto(controller);
          ReadableByteStreamControllerCommitPullIntoDescriptor(controller._controlledReadableByteStream, pullIntoDescriptor);
        }
      }
    }
    function ReadableByteStreamControllerPullInto(controller, view, readIntoRequest) {
      const stream = controller._controlledReadableByteStream;
      let elementSize = 1;
      if (view.constructor !== DataView) {
        elementSize = view.constructor.BYTES_PER_ELEMENT;
      }
      const ctor = view.constructor;
      const buffer = TransferArrayBuffer(view.buffer);
      const pullIntoDescriptor = {
        buffer,
        bufferByteLength: buffer.byteLength,
        byteOffset: view.byteOffset,
        byteLength: view.byteLength,
        bytesFilled: 0,
        elementSize,
        viewConstructor: ctor,
        readerType: "byob"
      };
      if (controller._pendingPullIntos.length > 0) {
        controller._pendingPullIntos.push(pullIntoDescriptor);
        ReadableStreamAddReadIntoRequest(stream, readIntoRequest);
        return;
      }
      if (stream._state === "closed") {
        const emptyView = new ctor(pullIntoDescriptor.buffer, pullIntoDescriptor.byteOffset, 0);
        readIntoRequest._closeSteps(emptyView);
        return;
      }
      if (controller._queueTotalSize > 0) {
        if (ReadableByteStreamControllerFillPullIntoDescriptorFromQueue(controller, pullIntoDescriptor)) {
          const filledView = ReadableByteStreamControllerConvertPullIntoDescriptor(pullIntoDescriptor);
          ReadableByteStreamControllerHandleQueueDrain(controller);
          readIntoRequest._chunkSteps(filledView);
          return;
        }
        if (controller._closeRequested) {
          const e = new TypeError("Insufficient bytes to fill elements in the given buffer");
          ReadableByteStreamControllerError(controller, e);
          readIntoRequest._errorSteps(e);
          return;
        }
      }
      controller._pendingPullIntos.push(pullIntoDescriptor);
      ReadableStreamAddReadIntoRequest(stream, readIntoRequest);
      ReadableByteStreamControllerCallPullIfNeeded(controller);
    }
    function ReadableByteStreamControllerRespondInClosedState(controller, firstDescriptor) {
      const stream = controller._controlledReadableByteStream;
      if (ReadableStreamHasBYOBReader(stream)) {
        while (ReadableStreamGetNumReadIntoRequests(stream) > 0) {
          const pullIntoDescriptor = ReadableByteStreamControllerShiftPendingPullInto(controller);
          ReadableByteStreamControllerCommitPullIntoDescriptor(stream, pullIntoDescriptor);
        }
      }
    }
    function ReadableByteStreamControllerRespondInReadableState(controller, bytesWritten, pullIntoDescriptor) {
      ReadableByteStreamControllerFillHeadPullIntoDescriptor(controller, bytesWritten, pullIntoDescriptor);
      if (pullIntoDescriptor.bytesFilled < pullIntoDescriptor.elementSize) {
        return;
      }
      ReadableByteStreamControllerShiftPendingPullInto(controller);
      const remainderSize = pullIntoDescriptor.bytesFilled % pullIntoDescriptor.elementSize;
      if (remainderSize > 0) {
        const end = pullIntoDescriptor.byteOffset + pullIntoDescriptor.bytesFilled;
        const remainder = ArrayBufferSlice(pullIntoDescriptor.buffer, end - remainderSize, end);
        ReadableByteStreamControllerEnqueueChunkToQueue(controller, remainder, 0, remainder.byteLength);
      }
      pullIntoDescriptor.bytesFilled -= remainderSize;
      ReadableByteStreamControllerCommitPullIntoDescriptor(controller._controlledReadableByteStream, pullIntoDescriptor);
      ReadableByteStreamControllerProcessPullIntoDescriptorsUsingQueue(controller);
    }
    function ReadableByteStreamControllerRespondInternal(controller, bytesWritten) {
      const firstDescriptor = controller._pendingPullIntos.peek();
      ReadableByteStreamControllerInvalidateBYOBRequest(controller);
      const state = controller._controlledReadableByteStream._state;
      if (state === "closed") {
        ReadableByteStreamControllerRespondInClosedState(controller);
      } else {
        ReadableByteStreamControllerRespondInReadableState(controller, bytesWritten, firstDescriptor);
      }
      ReadableByteStreamControllerCallPullIfNeeded(controller);
    }
    function ReadableByteStreamControllerShiftPendingPullInto(controller) {
      const descriptor = controller._pendingPullIntos.shift();
      return descriptor;
    }
    function ReadableByteStreamControllerShouldCallPull(controller) {
      const stream = controller._controlledReadableByteStream;
      if (stream._state !== "readable") {
        return false;
      }
      if (controller._closeRequested) {
        return false;
      }
      if (!controller._started) {
        return false;
      }
      if (ReadableStreamHasDefaultReader(stream) && ReadableStreamGetNumReadRequests(stream) > 0) {
        return true;
      }
      if (ReadableStreamHasBYOBReader(stream) && ReadableStreamGetNumReadIntoRequests(stream) > 0) {
        return true;
      }
      const desiredSize = ReadableByteStreamControllerGetDesiredSize(controller);
      if (desiredSize > 0) {
        return true;
      }
      return false;
    }
    function ReadableByteStreamControllerClearAlgorithms(controller) {
      controller._pullAlgorithm = void 0;
      controller._cancelAlgorithm = void 0;
    }
    function ReadableByteStreamControllerClose(controller) {
      const stream = controller._controlledReadableByteStream;
      if (controller._closeRequested || stream._state !== "readable") {
        return;
      }
      if (controller._queueTotalSize > 0) {
        controller._closeRequested = true;
        return;
      }
      if (controller._pendingPullIntos.length > 0) {
        const firstPendingPullInto = controller._pendingPullIntos.peek();
        if (firstPendingPullInto.bytesFilled > 0) {
          const e = new TypeError("Insufficient bytes to fill elements in the given buffer");
          ReadableByteStreamControllerError(controller, e);
          throw e;
        }
      }
      ReadableByteStreamControllerClearAlgorithms(controller);
      ReadableStreamClose(stream);
    }
    function ReadableByteStreamControllerEnqueue(controller, chunk) {
      const stream = controller._controlledReadableByteStream;
      if (controller._closeRequested || stream._state !== "readable") {
        return;
      }
      const buffer = chunk.buffer;
      const byteOffset = chunk.byteOffset;
      const byteLength = chunk.byteLength;
      const transferredBuffer = TransferArrayBuffer(buffer);
      if (controller._pendingPullIntos.length > 0) {
        const firstPendingPullInto = controller._pendingPullIntos.peek();
        if (IsDetachedBuffer(firstPendingPullInto.buffer))
          ;
        firstPendingPullInto.buffer = TransferArrayBuffer(firstPendingPullInto.buffer);
      }
      ReadableByteStreamControllerInvalidateBYOBRequest(controller);
      if (ReadableStreamHasDefaultReader(stream)) {
        if (ReadableStreamGetNumReadRequests(stream) === 0) {
          ReadableByteStreamControllerEnqueueChunkToQueue(controller, transferredBuffer, byteOffset, byteLength);
        } else {
          const transferredView = new Uint8Array(transferredBuffer, byteOffset, byteLength);
          ReadableStreamFulfillReadRequest(stream, transferredView, false);
        }
      } else if (ReadableStreamHasBYOBReader(stream)) {
        ReadableByteStreamControllerEnqueueChunkToQueue(controller, transferredBuffer, byteOffset, byteLength);
        ReadableByteStreamControllerProcessPullIntoDescriptorsUsingQueue(controller);
      } else {
        ReadableByteStreamControllerEnqueueChunkToQueue(controller, transferredBuffer, byteOffset, byteLength);
      }
      ReadableByteStreamControllerCallPullIfNeeded(controller);
    }
    function ReadableByteStreamControllerError(controller, e) {
      const stream = controller._controlledReadableByteStream;
      if (stream._state !== "readable") {
        return;
      }
      ReadableByteStreamControllerClearPendingPullIntos(controller);
      ResetQueue(controller);
      ReadableByteStreamControllerClearAlgorithms(controller);
      ReadableStreamError(stream, e);
    }
    function ReadableByteStreamControllerGetBYOBRequest(controller) {
      if (controller._byobRequest === null && controller._pendingPullIntos.length > 0) {
        const firstDescriptor = controller._pendingPullIntos.peek();
        const view = new Uint8Array(firstDescriptor.buffer, firstDescriptor.byteOffset + firstDescriptor.bytesFilled, firstDescriptor.byteLength - firstDescriptor.bytesFilled);
        const byobRequest = Object.create(ReadableStreamBYOBRequest.prototype);
        SetUpReadableStreamBYOBRequest(byobRequest, controller, view);
        controller._byobRequest = byobRequest;
      }
      return controller._byobRequest;
    }
    function ReadableByteStreamControllerGetDesiredSize(controller) {
      const state = controller._controlledReadableByteStream._state;
      if (state === "errored") {
        return null;
      }
      if (state === "closed") {
        return 0;
      }
      return controller._strategyHWM - controller._queueTotalSize;
    }
    function ReadableByteStreamControllerRespond(controller, bytesWritten) {
      const firstDescriptor = controller._pendingPullIntos.peek();
      const state = controller._controlledReadableByteStream._state;
      if (state === "closed") {
        if (bytesWritten !== 0) {
          throw new TypeError("bytesWritten must be 0 when calling respond() on a closed stream");
        }
      } else {
        if (bytesWritten === 0) {
          throw new TypeError("bytesWritten must be greater than 0 when calling respond() on a readable stream");
        }
        if (firstDescriptor.bytesFilled + bytesWritten > firstDescriptor.byteLength) {
          throw new RangeError("bytesWritten out of range");
        }
      }
      firstDescriptor.buffer = TransferArrayBuffer(firstDescriptor.buffer);
      ReadableByteStreamControllerRespondInternal(controller, bytesWritten);
    }
    function ReadableByteStreamControllerRespondWithNewView(controller, view) {
      const firstDescriptor = controller._pendingPullIntos.peek();
      const state = controller._controlledReadableByteStream._state;
      if (state === "closed") {
        if (view.byteLength !== 0) {
          throw new TypeError("The view's length must be 0 when calling respondWithNewView() on a closed stream");
        }
      } else {
        if (view.byteLength === 0) {
          throw new TypeError("The view's length must be greater than 0 when calling respondWithNewView() on a readable stream");
        }
      }
      if (firstDescriptor.byteOffset + firstDescriptor.bytesFilled !== view.byteOffset) {
        throw new RangeError("The region specified by view does not match byobRequest");
      }
      if (firstDescriptor.bufferByteLength !== view.buffer.byteLength) {
        throw new RangeError("The buffer of view has different capacity than byobRequest");
      }
      if (firstDescriptor.bytesFilled + view.byteLength > firstDescriptor.byteLength) {
        throw new RangeError("The region specified by view is larger than byobRequest");
      }
      firstDescriptor.buffer = TransferArrayBuffer(view.buffer);
      ReadableByteStreamControllerRespondInternal(controller, view.byteLength);
    }
    function SetUpReadableByteStreamController(stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark, autoAllocateChunkSize) {
      controller._controlledReadableByteStream = stream;
      controller._pullAgain = false;
      controller._pulling = false;
      controller._byobRequest = null;
      controller._queue = controller._queueTotalSize = void 0;
      ResetQueue(controller);
      controller._closeRequested = false;
      controller._started = false;
      controller._strategyHWM = highWaterMark;
      controller._pullAlgorithm = pullAlgorithm;
      controller._cancelAlgorithm = cancelAlgorithm;
      controller._autoAllocateChunkSize = autoAllocateChunkSize;
      controller._pendingPullIntos = new SimpleQueue();
      stream._readableStreamController = controller;
      const startResult = startAlgorithm();
      uponPromise(promiseResolvedWith(startResult), () => {
        controller._started = true;
        ReadableByteStreamControllerCallPullIfNeeded(controller);
      }, (r) => {
        ReadableByteStreamControllerError(controller, r);
      });
    }
    function SetUpReadableByteStreamControllerFromUnderlyingSource(stream, underlyingByteSource, highWaterMark) {
      const controller = Object.create(ReadableByteStreamController.prototype);
      let startAlgorithm = () => void 0;
      let pullAlgorithm = () => promiseResolvedWith(void 0);
      let cancelAlgorithm = () => promiseResolvedWith(void 0);
      if (underlyingByteSource.start !== void 0) {
        startAlgorithm = () => underlyingByteSource.start(controller);
      }
      if (underlyingByteSource.pull !== void 0) {
        pullAlgorithm = () => underlyingByteSource.pull(controller);
      }
      if (underlyingByteSource.cancel !== void 0) {
        cancelAlgorithm = (reason) => underlyingByteSource.cancel(reason);
      }
      const autoAllocateChunkSize = underlyingByteSource.autoAllocateChunkSize;
      if (autoAllocateChunkSize === 0) {
        throw new TypeError("autoAllocateChunkSize must be greater than 0");
      }
      SetUpReadableByteStreamController(stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark, autoAllocateChunkSize);
    }
    function SetUpReadableStreamBYOBRequest(request, controller, view) {
      request._associatedReadableByteStreamController = controller;
      request._view = view;
    }
    function byobRequestBrandCheckException(name) {
      return new TypeError(`ReadableStreamBYOBRequest.prototype.${name} can only be used on a ReadableStreamBYOBRequest`);
    }
    function byteStreamControllerBrandCheckException(name) {
      return new TypeError(`ReadableByteStreamController.prototype.${name} can only be used on a ReadableByteStreamController`);
    }
    function AcquireReadableStreamBYOBReader(stream) {
      return new ReadableStreamBYOBReader(stream);
    }
    function ReadableStreamAddReadIntoRequest(stream, readIntoRequest) {
      stream._reader._readIntoRequests.push(readIntoRequest);
    }
    function ReadableStreamFulfillReadIntoRequest(stream, chunk, done) {
      const reader = stream._reader;
      const readIntoRequest = reader._readIntoRequests.shift();
      if (done) {
        readIntoRequest._closeSteps(chunk);
      } else {
        readIntoRequest._chunkSteps(chunk);
      }
    }
    function ReadableStreamGetNumReadIntoRequests(stream) {
      return stream._reader._readIntoRequests.length;
    }
    function ReadableStreamHasBYOBReader(stream) {
      const reader = stream._reader;
      if (reader === void 0) {
        return false;
      }
      if (!IsReadableStreamBYOBReader(reader)) {
        return false;
      }
      return true;
    }
    class ReadableStreamBYOBReader {
      constructor(stream) {
        assertRequiredArgument(stream, 1, "ReadableStreamBYOBReader");
        assertReadableStream(stream, "First parameter");
        if (IsReadableStreamLocked(stream)) {
          throw new TypeError("This stream has already been locked for exclusive reading by another reader");
        }
        if (!IsReadableByteStreamController(stream._readableStreamController)) {
          throw new TypeError("Cannot construct a ReadableStreamBYOBReader for a stream not constructed with a byte source");
        }
        ReadableStreamReaderGenericInitialize(this, stream);
        this._readIntoRequests = new SimpleQueue();
      }
      get closed() {
        if (!IsReadableStreamBYOBReader(this)) {
          return promiseRejectedWith(byobReaderBrandCheckException("closed"));
        }
        return this._closedPromise;
      }
      cancel(reason = void 0) {
        if (!IsReadableStreamBYOBReader(this)) {
          return promiseRejectedWith(byobReaderBrandCheckException("cancel"));
        }
        if (this._ownerReadableStream === void 0) {
          return promiseRejectedWith(readerLockException("cancel"));
        }
        return ReadableStreamReaderGenericCancel(this, reason);
      }
      read(view) {
        if (!IsReadableStreamBYOBReader(this)) {
          return promiseRejectedWith(byobReaderBrandCheckException("read"));
        }
        if (!ArrayBuffer.isView(view)) {
          return promiseRejectedWith(new TypeError("view must be an array buffer view"));
        }
        if (view.byteLength === 0) {
          return promiseRejectedWith(new TypeError("view must have non-zero byteLength"));
        }
        if (view.buffer.byteLength === 0) {
          return promiseRejectedWith(new TypeError(`view's buffer must have non-zero byteLength`));
        }
        if (IsDetachedBuffer(view.buffer))
          ;
        if (this._ownerReadableStream === void 0) {
          return promiseRejectedWith(readerLockException("read from"));
        }
        let resolvePromise;
        let rejectPromise;
        const promise = newPromise((resolve2, reject) => {
          resolvePromise = resolve2;
          rejectPromise = reject;
        });
        const readIntoRequest = {
          _chunkSteps: (chunk) => resolvePromise({ value: chunk, done: false }),
          _closeSteps: (chunk) => resolvePromise({ value: chunk, done: true }),
          _errorSteps: (e) => rejectPromise(e)
        };
        ReadableStreamBYOBReaderRead(this, view, readIntoRequest);
        return promise;
      }
      releaseLock() {
        if (!IsReadableStreamBYOBReader(this)) {
          throw byobReaderBrandCheckException("releaseLock");
        }
        if (this._ownerReadableStream === void 0) {
          return;
        }
        if (this._readIntoRequests.length > 0) {
          throw new TypeError("Tried to release a reader lock when that reader has pending read() calls un-settled");
        }
        ReadableStreamReaderGenericRelease(this);
      }
    }
    Object.defineProperties(ReadableStreamBYOBReader.prototype, {
      cancel: { enumerable: true },
      read: { enumerable: true },
      releaseLock: { enumerable: true },
      closed: { enumerable: true }
    });
    if (typeof SymbolPolyfill.toStringTag === "symbol") {
      Object.defineProperty(ReadableStreamBYOBReader.prototype, SymbolPolyfill.toStringTag, {
        value: "ReadableStreamBYOBReader",
        configurable: true
      });
    }
    function IsReadableStreamBYOBReader(x) {
      if (!typeIsObject(x)) {
        return false;
      }
      if (!Object.prototype.hasOwnProperty.call(x, "_readIntoRequests")) {
        return false;
      }
      return x instanceof ReadableStreamBYOBReader;
    }
    function ReadableStreamBYOBReaderRead(reader, view, readIntoRequest) {
      const stream = reader._ownerReadableStream;
      stream._disturbed = true;
      if (stream._state === "errored") {
        readIntoRequest._errorSteps(stream._storedError);
      } else {
        ReadableByteStreamControllerPullInto(stream._readableStreamController, view, readIntoRequest);
      }
    }
    function byobReaderBrandCheckException(name) {
      return new TypeError(`ReadableStreamBYOBReader.prototype.${name} can only be used on a ReadableStreamBYOBReader`);
    }
    function ExtractHighWaterMark(strategy, defaultHWM) {
      const { highWaterMark } = strategy;
      if (highWaterMark === void 0) {
        return defaultHWM;
      }
      if (NumberIsNaN(highWaterMark) || highWaterMark < 0) {
        throw new RangeError("Invalid highWaterMark");
      }
      return highWaterMark;
    }
    function ExtractSizeAlgorithm(strategy) {
      const { size } = strategy;
      if (!size) {
        return () => 1;
      }
      return size;
    }
    function convertQueuingStrategy(init2, context) {
      assertDictionary(init2, context);
      const highWaterMark = init2 === null || init2 === void 0 ? void 0 : init2.highWaterMark;
      const size = init2 === null || init2 === void 0 ? void 0 : init2.size;
      return {
        highWaterMark: highWaterMark === void 0 ? void 0 : convertUnrestrictedDouble(highWaterMark),
        size: size === void 0 ? void 0 : convertQueuingStrategySize(size, `${context} has member 'size' that`)
      };
    }
    function convertQueuingStrategySize(fn, context) {
      assertFunction(fn, context);
      return (chunk) => convertUnrestrictedDouble(fn(chunk));
    }
    function convertUnderlyingSink(original, context) {
      assertDictionary(original, context);
      const abort = original === null || original === void 0 ? void 0 : original.abort;
      const close = original === null || original === void 0 ? void 0 : original.close;
      const start = original === null || original === void 0 ? void 0 : original.start;
      const type = original === null || original === void 0 ? void 0 : original.type;
      const write = original === null || original === void 0 ? void 0 : original.write;
      return {
        abort: abort === void 0 ? void 0 : convertUnderlyingSinkAbortCallback(abort, original, `${context} has member 'abort' that`),
        close: close === void 0 ? void 0 : convertUnderlyingSinkCloseCallback(close, original, `${context} has member 'close' that`),
        start: start === void 0 ? void 0 : convertUnderlyingSinkStartCallback(start, original, `${context} has member 'start' that`),
        write: write === void 0 ? void 0 : convertUnderlyingSinkWriteCallback(write, original, `${context} has member 'write' that`),
        type
      };
    }
    function convertUnderlyingSinkAbortCallback(fn, original, context) {
      assertFunction(fn, context);
      return (reason) => promiseCall(fn, original, [reason]);
    }
    function convertUnderlyingSinkCloseCallback(fn, original, context) {
      assertFunction(fn, context);
      return () => promiseCall(fn, original, []);
    }
    function convertUnderlyingSinkStartCallback(fn, original, context) {
      assertFunction(fn, context);
      return (controller) => reflectCall(fn, original, [controller]);
    }
    function convertUnderlyingSinkWriteCallback(fn, original, context) {
      assertFunction(fn, context);
      return (chunk, controller) => promiseCall(fn, original, [chunk, controller]);
    }
    function assertWritableStream(x, context) {
      if (!IsWritableStream(x)) {
        throw new TypeError(`${context} is not a WritableStream.`);
      }
    }
    function isAbortSignal2(value) {
      if (typeof value !== "object" || value === null) {
        return false;
      }
      try {
        return typeof value.aborted === "boolean";
      } catch (_a) {
        return false;
      }
    }
    const supportsAbortController = typeof AbortController === "function";
    function createAbortController() {
      if (supportsAbortController) {
        return new AbortController();
      }
      return void 0;
    }
    class WritableStream {
      constructor(rawUnderlyingSink = {}, rawStrategy = {}) {
        if (rawUnderlyingSink === void 0) {
          rawUnderlyingSink = null;
        } else {
          assertObject(rawUnderlyingSink, "First parameter");
        }
        const strategy = convertQueuingStrategy(rawStrategy, "Second parameter");
        const underlyingSink = convertUnderlyingSink(rawUnderlyingSink, "First parameter");
        InitializeWritableStream(this);
        const type = underlyingSink.type;
        if (type !== void 0) {
          throw new RangeError("Invalid type is specified");
        }
        const sizeAlgorithm = ExtractSizeAlgorithm(strategy);
        const highWaterMark = ExtractHighWaterMark(strategy, 1);
        SetUpWritableStreamDefaultControllerFromUnderlyingSink(this, underlyingSink, highWaterMark, sizeAlgorithm);
      }
      get locked() {
        if (!IsWritableStream(this)) {
          throw streamBrandCheckException$2("locked");
        }
        return IsWritableStreamLocked(this);
      }
      abort(reason = void 0) {
        if (!IsWritableStream(this)) {
          return promiseRejectedWith(streamBrandCheckException$2("abort"));
        }
        if (IsWritableStreamLocked(this)) {
          return promiseRejectedWith(new TypeError("Cannot abort a stream that already has a writer"));
        }
        return WritableStreamAbort(this, reason);
      }
      close() {
        if (!IsWritableStream(this)) {
          return promiseRejectedWith(streamBrandCheckException$2("close"));
        }
        if (IsWritableStreamLocked(this)) {
          return promiseRejectedWith(new TypeError("Cannot close a stream that already has a writer"));
        }
        if (WritableStreamCloseQueuedOrInFlight(this)) {
          return promiseRejectedWith(new TypeError("Cannot close an already-closing stream"));
        }
        return WritableStreamClose(this);
      }
      getWriter() {
        if (!IsWritableStream(this)) {
          throw streamBrandCheckException$2("getWriter");
        }
        return AcquireWritableStreamDefaultWriter(this);
      }
    }
    Object.defineProperties(WritableStream.prototype, {
      abort: { enumerable: true },
      close: { enumerable: true },
      getWriter: { enumerable: true },
      locked: { enumerable: true }
    });
    if (typeof SymbolPolyfill.toStringTag === "symbol") {
      Object.defineProperty(WritableStream.prototype, SymbolPolyfill.toStringTag, {
        value: "WritableStream",
        configurable: true
      });
    }
    function AcquireWritableStreamDefaultWriter(stream) {
      return new WritableStreamDefaultWriter(stream);
    }
    function CreateWritableStream(startAlgorithm, writeAlgorithm, closeAlgorithm, abortAlgorithm, highWaterMark = 1, sizeAlgorithm = () => 1) {
      const stream = Object.create(WritableStream.prototype);
      InitializeWritableStream(stream);
      const controller = Object.create(WritableStreamDefaultController.prototype);
      SetUpWritableStreamDefaultController(stream, controller, startAlgorithm, writeAlgorithm, closeAlgorithm, abortAlgorithm, highWaterMark, sizeAlgorithm);
      return stream;
    }
    function InitializeWritableStream(stream) {
      stream._state = "writable";
      stream._storedError = void 0;
      stream._writer = void 0;
      stream._writableStreamController = void 0;
      stream._writeRequests = new SimpleQueue();
      stream._inFlightWriteRequest = void 0;
      stream._closeRequest = void 0;
      stream._inFlightCloseRequest = void 0;
      stream._pendingAbortRequest = void 0;
      stream._backpressure = false;
    }
    function IsWritableStream(x) {
      if (!typeIsObject(x)) {
        return false;
      }
      if (!Object.prototype.hasOwnProperty.call(x, "_writableStreamController")) {
        return false;
      }
      return x instanceof WritableStream;
    }
    function IsWritableStreamLocked(stream) {
      if (stream._writer === void 0) {
        return false;
      }
      return true;
    }
    function WritableStreamAbort(stream, reason) {
      var _a;
      if (stream._state === "closed" || stream._state === "errored") {
        return promiseResolvedWith(void 0);
      }
      stream._writableStreamController._abortReason = reason;
      (_a = stream._writableStreamController._abortController) === null || _a === void 0 ? void 0 : _a.abort();
      const state = stream._state;
      if (state === "closed" || state === "errored") {
        return promiseResolvedWith(void 0);
      }
      if (stream._pendingAbortRequest !== void 0) {
        return stream._pendingAbortRequest._promise;
      }
      let wasAlreadyErroring = false;
      if (state === "erroring") {
        wasAlreadyErroring = true;
        reason = void 0;
      }
      const promise = newPromise((resolve2, reject) => {
        stream._pendingAbortRequest = {
          _promise: void 0,
          _resolve: resolve2,
          _reject: reject,
          _reason: reason,
          _wasAlreadyErroring: wasAlreadyErroring
        };
      });
      stream._pendingAbortRequest._promise = promise;
      if (!wasAlreadyErroring) {
        WritableStreamStartErroring(stream, reason);
      }
      return promise;
    }
    function WritableStreamClose(stream) {
      const state = stream._state;
      if (state === "closed" || state === "errored") {
        return promiseRejectedWith(new TypeError(`The stream (in ${state} state) is not in the writable state and cannot be closed`));
      }
      const promise = newPromise((resolve2, reject) => {
        const closeRequest = {
          _resolve: resolve2,
          _reject: reject
        };
        stream._closeRequest = closeRequest;
      });
      const writer = stream._writer;
      if (writer !== void 0 && stream._backpressure && state === "writable") {
        defaultWriterReadyPromiseResolve(writer);
      }
      WritableStreamDefaultControllerClose(stream._writableStreamController);
      return promise;
    }
    function WritableStreamAddWriteRequest(stream) {
      const promise = newPromise((resolve2, reject) => {
        const writeRequest = {
          _resolve: resolve2,
          _reject: reject
        };
        stream._writeRequests.push(writeRequest);
      });
      return promise;
    }
    function WritableStreamDealWithRejection(stream, error2) {
      const state = stream._state;
      if (state === "writable") {
        WritableStreamStartErroring(stream, error2);
        return;
      }
      WritableStreamFinishErroring(stream);
    }
    function WritableStreamStartErroring(stream, reason) {
      const controller = stream._writableStreamController;
      stream._state = "erroring";
      stream._storedError = reason;
      const writer = stream._writer;
      if (writer !== void 0) {
        WritableStreamDefaultWriterEnsureReadyPromiseRejected(writer, reason);
      }
      if (!WritableStreamHasOperationMarkedInFlight(stream) && controller._started) {
        WritableStreamFinishErroring(stream);
      }
    }
    function WritableStreamFinishErroring(stream) {
      stream._state = "errored";
      stream._writableStreamController[ErrorSteps]();
      const storedError = stream._storedError;
      stream._writeRequests.forEach((writeRequest) => {
        writeRequest._reject(storedError);
      });
      stream._writeRequests = new SimpleQueue();
      if (stream._pendingAbortRequest === void 0) {
        WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream);
        return;
      }
      const abortRequest = stream._pendingAbortRequest;
      stream._pendingAbortRequest = void 0;
      if (abortRequest._wasAlreadyErroring) {
        abortRequest._reject(storedError);
        WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream);
        return;
      }
      const promise = stream._writableStreamController[AbortSteps](abortRequest._reason);
      uponPromise(promise, () => {
        abortRequest._resolve();
        WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream);
      }, (reason) => {
        abortRequest._reject(reason);
        WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream);
      });
    }
    function WritableStreamFinishInFlightWrite(stream) {
      stream._inFlightWriteRequest._resolve(void 0);
      stream._inFlightWriteRequest = void 0;
    }
    function WritableStreamFinishInFlightWriteWithError(stream, error2) {
      stream._inFlightWriteRequest._reject(error2);
      stream._inFlightWriteRequest = void 0;
      WritableStreamDealWithRejection(stream, error2);
    }
    function WritableStreamFinishInFlightClose(stream) {
      stream._inFlightCloseRequest._resolve(void 0);
      stream._inFlightCloseRequest = void 0;
      const state = stream._state;
      if (state === "erroring") {
        stream._storedError = void 0;
        if (stream._pendingAbortRequest !== void 0) {
          stream._pendingAbortRequest._resolve();
          stream._pendingAbortRequest = void 0;
        }
      }
      stream._state = "closed";
      const writer = stream._writer;
      if (writer !== void 0) {
        defaultWriterClosedPromiseResolve(writer);
      }
    }
    function WritableStreamFinishInFlightCloseWithError(stream, error2) {
      stream._inFlightCloseRequest._reject(error2);
      stream._inFlightCloseRequest = void 0;
      if (stream._pendingAbortRequest !== void 0) {
        stream._pendingAbortRequest._reject(error2);
        stream._pendingAbortRequest = void 0;
      }
      WritableStreamDealWithRejection(stream, error2);
    }
    function WritableStreamCloseQueuedOrInFlight(stream) {
      if (stream._closeRequest === void 0 && stream._inFlightCloseRequest === void 0) {
        return false;
      }
      return true;
    }
    function WritableStreamHasOperationMarkedInFlight(stream) {
      if (stream._inFlightWriteRequest === void 0 && stream._inFlightCloseRequest === void 0) {
        return false;
      }
      return true;
    }
    function WritableStreamMarkCloseRequestInFlight(stream) {
      stream._inFlightCloseRequest = stream._closeRequest;
      stream._closeRequest = void 0;
    }
    function WritableStreamMarkFirstWriteRequestInFlight(stream) {
      stream._inFlightWriteRequest = stream._writeRequests.shift();
    }
    function WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream) {
      if (stream._closeRequest !== void 0) {
        stream._closeRequest._reject(stream._storedError);
        stream._closeRequest = void 0;
      }
      const writer = stream._writer;
      if (writer !== void 0) {
        defaultWriterClosedPromiseReject(writer, stream._storedError);
      }
    }
    function WritableStreamUpdateBackpressure(stream, backpressure) {
      const writer = stream._writer;
      if (writer !== void 0 && backpressure !== stream._backpressure) {
        if (backpressure) {
          defaultWriterReadyPromiseReset(writer);
        } else {
          defaultWriterReadyPromiseResolve(writer);
        }
      }
      stream._backpressure = backpressure;
    }
    class WritableStreamDefaultWriter {
      constructor(stream) {
        assertRequiredArgument(stream, 1, "WritableStreamDefaultWriter");
        assertWritableStream(stream, "First parameter");
        if (IsWritableStreamLocked(stream)) {
          throw new TypeError("This stream has already been locked for exclusive writing by another writer");
        }
        this._ownerWritableStream = stream;
        stream._writer = this;
        const state = stream._state;
        if (state === "writable") {
          if (!WritableStreamCloseQueuedOrInFlight(stream) && stream._backpressure) {
            defaultWriterReadyPromiseInitialize(this);
          } else {
            defaultWriterReadyPromiseInitializeAsResolved(this);
          }
          defaultWriterClosedPromiseInitialize(this);
        } else if (state === "erroring") {
          defaultWriterReadyPromiseInitializeAsRejected(this, stream._storedError);
          defaultWriterClosedPromiseInitialize(this);
        } else if (state === "closed") {
          defaultWriterReadyPromiseInitializeAsResolved(this);
          defaultWriterClosedPromiseInitializeAsResolved(this);
        } else {
          const storedError = stream._storedError;
          defaultWriterReadyPromiseInitializeAsRejected(this, storedError);
          defaultWriterClosedPromiseInitializeAsRejected(this, storedError);
        }
      }
      get closed() {
        if (!IsWritableStreamDefaultWriter(this)) {
          return promiseRejectedWith(defaultWriterBrandCheckException("closed"));
        }
        return this._closedPromise;
      }
      get desiredSize() {
        if (!IsWritableStreamDefaultWriter(this)) {
          throw defaultWriterBrandCheckException("desiredSize");
        }
        if (this._ownerWritableStream === void 0) {
          throw defaultWriterLockException("desiredSize");
        }
        return WritableStreamDefaultWriterGetDesiredSize(this);
      }
      get ready() {
        if (!IsWritableStreamDefaultWriter(this)) {
          return promiseRejectedWith(defaultWriterBrandCheckException("ready"));
        }
        return this._readyPromise;
      }
      abort(reason = void 0) {
        if (!IsWritableStreamDefaultWriter(this)) {
          return promiseRejectedWith(defaultWriterBrandCheckException("abort"));
        }
        if (this._ownerWritableStream === void 0) {
          return promiseRejectedWith(defaultWriterLockException("abort"));
        }
        return WritableStreamDefaultWriterAbort(this, reason);
      }
      close() {
        if (!IsWritableStreamDefaultWriter(this)) {
          return promiseRejectedWith(defaultWriterBrandCheckException("close"));
        }
        const stream = this._ownerWritableStream;
        if (stream === void 0) {
          return promiseRejectedWith(defaultWriterLockException("close"));
        }
        if (WritableStreamCloseQueuedOrInFlight(stream)) {
          return promiseRejectedWith(new TypeError("Cannot close an already-closing stream"));
        }
        return WritableStreamDefaultWriterClose(this);
      }
      releaseLock() {
        if (!IsWritableStreamDefaultWriter(this)) {
          throw defaultWriterBrandCheckException("releaseLock");
        }
        const stream = this._ownerWritableStream;
        if (stream === void 0) {
          return;
        }
        WritableStreamDefaultWriterRelease(this);
      }
      write(chunk = void 0) {
        if (!IsWritableStreamDefaultWriter(this)) {
          return promiseRejectedWith(defaultWriterBrandCheckException("write"));
        }
        if (this._ownerWritableStream === void 0) {
          return promiseRejectedWith(defaultWriterLockException("write to"));
        }
        return WritableStreamDefaultWriterWrite(this, chunk);
      }
    }
    Object.defineProperties(WritableStreamDefaultWriter.prototype, {
      abort: { enumerable: true },
      close: { enumerable: true },
      releaseLock: { enumerable: true },
      write: { enumerable: true },
      closed: { enumerable: true },
      desiredSize: { enumerable: true },
      ready: { enumerable: true }
    });
    if (typeof SymbolPolyfill.toStringTag === "symbol") {
      Object.defineProperty(WritableStreamDefaultWriter.prototype, SymbolPolyfill.toStringTag, {
        value: "WritableStreamDefaultWriter",
        configurable: true
      });
    }
    function IsWritableStreamDefaultWriter(x) {
      if (!typeIsObject(x)) {
        return false;
      }
      if (!Object.prototype.hasOwnProperty.call(x, "_ownerWritableStream")) {
        return false;
      }
      return x instanceof WritableStreamDefaultWriter;
    }
    function WritableStreamDefaultWriterAbort(writer, reason) {
      const stream = writer._ownerWritableStream;
      return WritableStreamAbort(stream, reason);
    }
    function WritableStreamDefaultWriterClose(writer) {
      const stream = writer._ownerWritableStream;
      return WritableStreamClose(stream);
    }
    function WritableStreamDefaultWriterCloseWithErrorPropagation(writer) {
      const stream = writer._ownerWritableStream;
      const state = stream._state;
      if (WritableStreamCloseQueuedOrInFlight(stream) || state === "closed") {
        return promiseResolvedWith(void 0);
      }
      if (state === "errored") {
        return promiseRejectedWith(stream._storedError);
      }
      return WritableStreamDefaultWriterClose(writer);
    }
    function WritableStreamDefaultWriterEnsureClosedPromiseRejected(writer, error2) {
      if (writer._closedPromiseState === "pending") {
        defaultWriterClosedPromiseReject(writer, error2);
      } else {
        defaultWriterClosedPromiseResetToRejected(writer, error2);
      }
    }
    function WritableStreamDefaultWriterEnsureReadyPromiseRejected(writer, error2) {
      if (writer._readyPromiseState === "pending") {
        defaultWriterReadyPromiseReject(writer, error2);
      } else {
        defaultWriterReadyPromiseResetToRejected(writer, error2);
      }
    }
    function WritableStreamDefaultWriterGetDesiredSize(writer) {
      const stream = writer._ownerWritableStream;
      const state = stream._state;
      if (state === "errored" || state === "erroring") {
        return null;
      }
      if (state === "closed") {
        return 0;
      }
      return WritableStreamDefaultControllerGetDesiredSize(stream._writableStreamController);
    }
    function WritableStreamDefaultWriterRelease(writer) {
      const stream = writer._ownerWritableStream;
      const releasedError = new TypeError(`Writer was released and can no longer be used to monitor the stream's closedness`);
      WritableStreamDefaultWriterEnsureReadyPromiseRejected(writer, releasedError);
      WritableStreamDefaultWriterEnsureClosedPromiseRejected(writer, releasedError);
      stream._writer = void 0;
      writer._ownerWritableStream = void 0;
    }
    function WritableStreamDefaultWriterWrite(writer, chunk) {
      const stream = writer._ownerWritableStream;
      const controller = stream._writableStreamController;
      const chunkSize = WritableStreamDefaultControllerGetChunkSize(controller, chunk);
      if (stream !== writer._ownerWritableStream) {
        return promiseRejectedWith(defaultWriterLockException("write to"));
      }
      const state = stream._state;
      if (state === "errored") {
        return promiseRejectedWith(stream._storedError);
      }
      if (WritableStreamCloseQueuedOrInFlight(stream) || state === "closed") {
        return promiseRejectedWith(new TypeError("The stream is closing or closed and cannot be written to"));
      }
      if (state === "erroring") {
        return promiseRejectedWith(stream._storedError);
      }
      const promise = WritableStreamAddWriteRequest(stream);
      WritableStreamDefaultControllerWrite(controller, chunk, chunkSize);
      return promise;
    }
    const closeSentinel = {};
    class WritableStreamDefaultController {
      constructor() {
        throw new TypeError("Illegal constructor");
      }
      get abortReason() {
        if (!IsWritableStreamDefaultController(this)) {
          throw defaultControllerBrandCheckException$2("abortReason");
        }
        return this._abortReason;
      }
      get signal() {
        if (!IsWritableStreamDefaultController(this)) {
          throw defaultControllerBrandCheckException$2("signal");
        }
        if (this._abortController === void 0) {
          throw new TypeError("WritableStreamDefaultController.prototype.signal is not supported");
        }
        return this._abortController.signal;
      }
      error(e = void 0) {
        if (!IsWritableStreamDefaultController(this)) {
          throw defaultControllerBrandCheckException$2("error");
        }
        const state = this._controlledWritableStream._state;
        if (state !== "writable") {
          return;
        }
        WritableStreamDefaultControllerError(this, e);
      }
      [AbortSteps](reason) {
        const result = this._abortAlgorithm(reason);
        WritableStreamDefaultControllerClearAlgorithms(this);
        return result;
      }
      [ErrorSteps]() {
        ResetQueue(this);
      }
    }
    Object.defineProperties(WritableStreamDefaultController.prototype, {
      error: { enumerable: true }
    });
    if (typeof SymbolPolyfill.toStringTag === "symbol") {
      Object.defineProperty(WritableStreamDefaultController.prototype, SymbolPolyfill.toStringTag, {
        value: "WritableStreamDefaultController",
        configurable: true
      });
    }
    function IsWritableStreamDefaultController(x) {
      if (!typeIsObject(x)) {
        return false;
      }
      if (!Object.prototype.hasOwnProperty.call(x, "_controlledWritableStream")) {
        return false;
      }
      return x instanceof WritableStreamDefaultController;
    }
    function SetUpWritableStreamDefaultController(stream, controller, startAlgorithm, writeAlgorithm, closeAlgorithm, abortAlgorithm, highWaterMark, sizeAlgorithm) {
      controller._controlledWritableStream = stream;
      stream._writableStreamController = controller;
      controller._queue = void 0;
      controller._queueTotalSize = void 0;
      ResetQueue(controller);
      controller._abortReason = void 0;
      controller._abortController = createAbortController();
      controller._started = false;
      controller._strategySizeAlgorithm = sizeAlgorithm;
      controller._strategyHWM = highWaterMark;
      controller._writeAlgorithm = writeAlgorithm;
      controller._closeAlgorithm = closeAlgorithm;
      controller._abortAlgorithm = abortAlgorithm;
      const backpressure = WritableStreamDefaultControllerGetBackpressure(controller);
      WritableStreamUpdateBackpressure(stream, backpressure);
      const startResult = startAlgorithm();
      const startPromise = promiseResolvedWith(startResult);
      uponPromise(startPromise, () => {
        controller._started = true;
        WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller);
      }, (r) => {
        controller._started = true;
        WritableStreamDealWithRejection(stream, r);
      });
    }
    function SetUpWritableStreamDefaultControllerFromUnderlyingSink(stream, underlyingSink, highWaterMark, sizeAlgorithm) {
      const controller = Object.create(WritableStreamDefaultController.prototype);
      let startAlgorithm = () => void 0;
      let writeAlgorithm = () => promiseResolvedWith(void 0);
      let closeAlgorithm = () => promiseResolvedWith(void 0);
      let abortAlgorithm = () => promiseResolvedWith(void 0);
      if (underlyingSink.start !== void 0) {
        startAlgorithm = () => underlyingSink.start(controller);
      }
      if (underlyingSink.write !== void 0) {
        writeAlgorithm = (chunk) => underlyingSink.write(chunk, controller);
      }
      if (underlyingSink.close !== void 0) {
        closeAlgorithm = () => underlyingSink.close();
      }
      if (underlyingSink.abort !== void 0) {
        abortAlgorithm = (reason) => underlyingSink.abort(reason);
      }
      SetUpWritableStreamDefaultController(stream, controller, startAlgorithm, writeAlgorithm, closeAlgorithm, abortAlgorithm, highWaterMark, sizeAlgorithm);
    }
    function WritableStreamDefaultControllerClearAlgorithms(controller) {
      controller._writeAlgorithm = void 0;
      controller._closeAlgorithm = void 0;
      controller._abortAlgorithm = void 0;
      controller._strategySizeAlgorithm = void 0;
    }
    function WritableStreamDefaultControllerClose(controller) {
      EnqueueValueWithSize(controller, closeSentinel, 0);
      WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller);
    }
    function WritableStreamDefaultControllerGetChunkSize(controller, chunk) {
      try {
        return controller._strategySizeAlgorithm(chunk);
      } catch (chunkSizeE) {
        WritableStreamDefaultControllerErrorIfNeeded(controller, chunkSizeE);
        return 1;
      }
    }
    function WritableStreamDefaultControllerGetDesiredSize(controller) {
      return controller._strategyHWM - controller._queueTotalSize;
    }
    function WritableStreamDefaultControllerWrite(controller, chunk, chunkSize) {
      try {
        EnqueueValueWithSize(controller, chunk, chunkSize);
      } catch (enqueueE) {
        WritableStreamDefaultControllerErrorIfNeeded(controller, enqueueE);
        return;
      }
      const stream = controller._controlledWritableStream;
      if (!WritableStreamCloseQueuedOrInFlight(stream) && stream._state === "writable") {
        const backpressure = WritableStreamDefaultControllerGetBackpressure(controller);
        WritableStreamUpdateBackpressure(stream, backpressure);
      }
      WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller);
    }
    function WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller) {
      const stream = controller._controlledWritableStream;
      if (!controller._started) {
        return;
      }
      if (stream._inFlightWriteRequest !== void 0) {
        return;
      }
      const state = stream._state;
      if (state === "erroring") {
        WritableStreamFinishErroring(stream);
        return;
      }
      if (controller._queue.length === 0) {
        return;
      }
      const value = PeekQueueValue(controller);
      if (value === closeSentinel) {
        WritableStreamDefaultControllerProcessClose(controller);
      } else {
        WritableStreamDefaultControllerProcessWrite(controller, value);
      }
    }
    function WritableStreamDefaultControllerErrorIfNeeded(controller, error2) {
      if (controller._controlledWritableStream._state === "writable") {
        WritableStreamDefaultControllerError(controller, error2);
      }
    }
    function WritableStreamDefaultControllerProcessClose(controller) {
      const stream = controller._controlledWritableStream;
      WritableStreamMarkCloseRequestInFlight(stream);
      DequeueValue(controller);
      const sinkClosePromise = controller._closeAlgorithm();
      WritableStreamDefaultControllerClearAlgorithms(controller);
      uponPromise(sinkClosePromise, () => {
        WritableStreamFinishInFlightClose(stream);
      }, (reason) => {
        WritableStreamFinishInFlightCloseWithError(stream, reason);
      });
    }
    function WritableStreamDefaultControllerProcessWrite(controller, chunk) {
      const stream = controller._controlledWritableStream;
      WritableStreamMarkFirstWriteRequestInFlight(stream);
      const sinkWritePromise = controller._writeAlgorithm(chunk);
      uponPromise(sinkWritePromise, () => {
        WritableStreamFinishInFlightWrite(stream);
        const state = stream._state;
        DequeueValue(controller);
        if (!WritableStreamCloseQueuedOrInFlight(stream) && state === "writable") {
          const backpressure = WritableStreamDefaultControllerGetBackpressure(controller);
          WritableStreamUpdateBackpressure(stream, backpressure);
        }
        WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller);
      }, (reason) => {
        if (stream._state === "writable") {
          WritableStreamDefaultControllerClearAlgorithms(controller);
        }
        WritableStreamFinishInFlightWriteWithError(stream, reason);
      });
    }
    function WritableStreamDefaultControllerGetBackpressure(controller) {
      const desiredSize = WritableStreamDefaultControllerGetDesiredSize(controller);
      return desiredSize <= 0;
    }
    function WritableStreamDefaultControllerError(controller, error2) {
      const stream = controller._controlledWritableStream;
      WritableStreamDefaultControllerClearAlgorithms(controller);
      WritableStreamStartErroring(stream, error2);
    }
    function streamBrandCheckException$2(name) {
      return new TypeError(`WritableStream.prototype.${name} can only be used on a WritableStream`);
    }
    function defaultControllerBrandCheckException$2(name) {
      return new TypeError(`WritableStreamDefaultController.prototype.${name} can only be used on a WritableStreamDefaultController`);
    }
    function defaultWriterBrandCheckException(name) {
      return new TypeError(`WritableStreamDefaultWriter.prototype.${name} can only be used on a WritableStreamDefaultWriter`);
    }
    function defaultWriterLockException(name) {
      return new TypeError("Cannot " + name + " a stream using a released writer");
    }
    function defaultWriterClosedPromiseInitialize(writer) {
      writer._closedPromise = newPromise((resolve2, reject) => {
        writer._closedPromise_resolve = resolve2;
        writer._closedPromise_reject = reject;
        writer._closedPromiseState = "pending";
      });
    }
    function defaultWriterClosedPromiseInitializeAsRejected(writer, reason) {
      defaultWriterClosedPromiseInitialize(writer);
      defaultWriterClosedPromiseReject(writer, reason);
    }
    function defaultWriterClosedPromiseInitializeAsResolved(writer) {
      defaultWriterClosedPromiseInitialize(writer);
      defaultWriterClosedPromiseResolve(writer);
    }
    function defaultWriterClosedPromiseReject(writer, reason) {
      if (writer._closedPromise_reject === void 0) {
        return;
      }
      setPromiseIsHandledToTrue(writer._closedPromise);
      writer._closedPromise_reject(reason);
      writer._closedPromise_resolve = void 0;
      writer._closedPromise_reject = void 0;
      writer._closedPromiseState = "rejected";
    }
    function defaultWriterClosedPromiseResetToRejected(writer, reason) {
      defaultWriterClosedPromiseInitializeAsRejected(writer, reason);
    }
    function defaultWriterClosedPromiseResolve(writer) {
      if (writer._closedPromise_resolve === void 0) {
        return;
      }
      writer._closedPromise_resolve(void 0);
      writer._closedPromise_resolve = void 0;
      writer._closedPromise_reject = void 0;
      writer._closedPromiseState = "resolved";
    }
    function defaultWriterReadyPromiseInitialize(writer) {
      writer._readyPromise = newPromise((resolve2, reject) => {
        writer._readyPromise_resolve = resolve2;
        writer._readyPromise_reject = reject;
      });
      writer._readyPromiseState = "pending";
    }
    function defaultWriterReadyPromiseInitializeAsRejected(writer, reason) {
      defaultWriterReadyPromiseInitialize(writer);
      defaultWriterReadyPromiseReject(writer, reason);
    }
    function defaultWriterReadyPromiseInitializeAsResolved(writer) {
      defaultWriterReadyPromiseInitialize(writer);
      defaultWriterReadyPromiseResolve(writer);
    }
    function defaultWriterReadyPromiseReject(writer, reason) {
      if (writer._readyPromise_reject === void 0) {
        return;
      }
      setPromiseIsHandledToTrue(writer._readyPromise);
      writer._readyPromise_reject(reason);
      writer._readyPromise_resolve = void 0;
      writer._readyPromise_reject = void 0;
      writer._readyPromiseState = "rejected";
    }
    function defaultWriterReadyPromiseReset(writer) {
      defaultWriterReadyPromiseInitialize(writer);
    }
    function defaultWriterReadyPromiseResetToRejected(writer, reason) {
      defaultWriterReadyPromiseInitializeAsRejected(writer, reason);
    }
    function defaultWriterReadyPromiseResolve(writer) {
      if (writer._readyPromise_resolve === void 0) {
        return;
      }
      writer._readyPromise_resolve(void 0);
      writer._readyPromise_resolve = void 0;
      writer._readyPromise_reject = void 0;
      writer._readyPromiseState = "fulfilled";
    }
    const NativeDOMException = typeof DOMException !== "undefined" ? DOMException : void 0;
    function isDOMExceptionConstructor(ctor) {
      if (!(typeof ctor === "function" || typeof ctor === "object")) {
        return false;
      }
      try {
        new ctor();
        return true;
      } catch (_a) {
        return false;
      }
    }
    function createDOMExceptionPolyfill() {
      const ctor = function DOMException2(message, name) {
        this.message = message || "";
        this.name = name || "Error";
        if (Error.captureStackTrace) {
          Error.captureStackTrace(this, this.constructor);
        }
      };
      ctor.prototype = Object.create(Error.prototype);
      Object.defineProperty(ctor.prototype, "constructor", { value: ctor, writable: true, configurable: true });
      return ctor;
    }
    const DOMException$1 = isDOMExceptionConstructor(NativeDOMException) ? NativeDOMException : createDOMExceptionPolyfill();
    function ReadableStreamPipeTo(source, dest, preventClose, preventAbort, preventCancel, signal) {
      const reader = AcquireReadableStreamDefaultReader(source);
      const writer = AcquireWritableStreamDefaultWriter(dest);
      source._disturbed = true;
      let shuttingDown = false;
      let currentWrite = promiseResolvedWith(void 0);
      return newPromise((resolve2, reject) => {
        let abortAlgorithm;
        if (signal !== void 0) {
          abortAlgorithm = () => {
            const error2 = new DOMException$1("Aborted", "AbortError");
            const actions = [];
            if (!preventAbort) {
              actions.push(() => {
                if (dest._state === "writable") {
                  return WritableStreamAbort(dest, error2);
                }
                return promiseResolvedWith(void 0);
              });
            }
            if (!preventCancel) {
              actions.push(() => {
                if (source._state === "readable") {
                  return ReadableStreamCancel(source, error2);
                }
                return promiseResolvedWith(void 0);
              });
            }
            shutdownWithAction(() => Promise.all(actions.map((action) => action())), true, error2);
          };
          if (signal.aborted) {
            abortAlgorithm();
            return;
          }
          signal.addEventListener("abort", abortAlgorithm);
        }
        function pipeLoop() {
          return newPromise((resolveLoop, rejectLoop) => {
            function next(done) {
              if (done) {
                resolveLoop();
              } else {
                PerformPromiseThen(pipeStep(), next, rejectLoop);
              }
            }
            next(false);
          });
        }
        function pipeStep() {
          if (shuttingDown) {
            return promiseResolvedWith(true);
          }
          return PerformPromiseThen(writer._readyPromise, () => {
            return newPromise((resolveRead, rejectRead) => {
              ReadableStreamDefaultReaderRead(reader, {
                _chunkSteps: (chunk) => {
                  currentWrite = PerformPromiseThen(WritableStreamDefaultWriterWrite(writer, chunk), void 0, noop2);
                  resolveRead(false);
                },
                _closeSteps: () => resolveRead(true),
                _errorSteps: rejectRead
              });
            });
          });
        }
        isOrBecomesErrored(source, reader._closedPromise, (storedError) => {
          if (!preventAbort) {
            shutdownWithAction(() => WritableStreamAbort(dest, storedError), true, storedError);
          } else {
            shutdown(true, storedError);
          }
        });
        isOrBecomesErrored(dest, writer._closedPromise, (storedError) => {
          if (!preventCancel) {
            shutdownWithAction(() => ReadableStreamCancel(source, storedError), true, storedError);
          } else {
            shutdown(true, storedError);
          }
        });
        isOrBecomesClosed(source, reader._closedPromise, () => {
          if (!preventClose) {
            shutdownWithAction(() => WritableStreamDefaultWriterCloseWithErrorPropagation(writer));
          } else {
            shutdown();
          }
        });
        if (WritableStreamCloseQueuedOrInFlight(dest) || dest._state === "closed") {
          const destClosed = new TypeError("the destination writable stream closed before all data could be piped to it");
          if (!preventCancel) {
            shutdownWithAction(() => ReadableStreamCancel(source, destClosed), true, destClosed);
          } else {
            shutdown(true, destClosed);
          }
        }
        setPromiseIsHandledToTrue(pipeLoop());
        function waitForWritesToFinish() {
          const oldCurrentWrite = currentWrite;
          return PerformPromiseThen(currentWrite, () => oldCurrentWrite !== currentWrite ? waitForWritesToFinish() : void 0);
        }
        function isOrBecomesErrored(stream, promise, action) {
          if (stream._state === "errored") {
            action(stream._storedError);
          } else {
            uponRejection(promise, action);
          }
        }
        function isOrBecomesClosed(stream, promise, action) {
          if (stream._state === "closed") {
            action();
          } else {
            uponFulfillment(promise, action);
          }
        }
        function shutdownWithAction(action, originalIsError, originalError) {
          if (shuttingDown) {
            return;
          }
          shuttingDown = true;
          if (dest._state === "writable" && !WritableStreamCloseQueuedOrInFlight(dest)) {
            uponFulfillment(waitForWritesToFinish(), doTheRest);
          } else {
            doTheRest();
          }
          function doTheRest() {
            uponPromise(action(), () => finalize(originalIsError, originalError), (newError) => finalize(true, newError));
          }
        }
        function shutdown(isError, error2) {
          if (shuttingDown) {
            return;
          }
          shuttingDown = true;
          if (dest._state === "writable" && !WritableStreamCloseQueuedOrInFlight(dest)) {
            uponFulfillment(waitForWritesToFinish(), () => finalize(isError, error2));
          } else {
            finalize(isError, error2);
          }
        }
        function finalize(isError, error2) {
          WritableStreamDefaultWriterRelease(writer);
          ReadableStreamReaderGenericRelease(reader);
          if (signal !== void 0) {
            signal.removeEventListener("abort", abortAlgorithm);
          }
          if (isError) {
            reject(error2);
          } else {
            resolve2(void 0);
          }
        }
      });
    }
    class ReadableStreamDefaultController {
      constructor() {
        throw new TypeError("Illegal constructor");
      }
      get desiredSize() {
        if (!IsReadableStreamDefaultController(this)) {
          throw defaultControllerBrandCheckException$1("desiredSize");
        }
        return ReadableStreamDefaultControllerGetDesiredSize(this);
      }
      close() {
        if (!IsReadableStreamDefaultController(this)) {
          throw defaultControllerBrandCheckException$1("close");
        }
        if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(this)) {
          throw new TypeError("The stream is not in a state that permits close");
        }
        ReadableStreamDefaultControllerClose(this);
      }
      enqueue(chunk = void 0) {
        if (!IsReadableStreamDefaultController(this)) {
          throw defaultControllerBrandCheckException$1("enqueue");
        }
        if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(this)) {
          throw new TypeError("The stream is not in a state that permits enqueue");
        }
        return ReadableStreamDefaultControllerEnqueue(this, chunk);
      }
      error(e = void 0) {
        if (!IsReadableStreamDefaultController(this)) {
          throw defaultControllerBrandCheckException$1("error");
        }
        ReadableStreamDefaultControllerError(this, e);
      }
      [CancelSteps](reason) {
        ResetQueue(this);
        const result = this._cancelAlgorithm(reason);
        ReadableStreamDefaultControllerClearAlgorithms(this);
        return result;
      }
      [PullSteps](readRequest) {
        const stream = this._controlledReadableStream;
        if (this._queue.length > 0) {
          const chunk = DequeueValue(this);
          if (this._closeRequested && this._queue.length === 0) {
            ReadableStreamDefaultControllerClearAlgorithms(this);
            ReadableStreamClose(stream);
          } else {
            ReadableStreamDefaultControllerCallPullIfNeeded(this);
          }
          readRequest._chunkSteps(chunk);
        } else {
          ReadableStreamAddReadRequest(stream, readRequest);
          ReadableStreamDefaultControllerCallPullIfNeeded(this);
        }
      }
    }
    Object.defineProperties(ReadableStreamDefaultController.prototype, {
      close: { enumerable: true },
      enqueue: { enumerable: true },
      error: { enumerable: true },
      desiredSize: { enumerable: true }
    });
    if (typeof SymbolPolyfill.toStringTag === "symbol") {
      Object.defineProperty(ReadableStreamDefaultController.prototype, SymbolPolyfill.toStringTag, {
        value: "ReadableStreamDefaultController",
        configurable: true
      });
    }
    function IsReadableStreamDefaultController(x) {
      if (!typeIsObject(x)) {
        return false;
      }
      if (!Object.prototype.hasOwnProperty.call(x, "_controlledReadableStream")) {
        return false;
      }
      return x instanceof ReadableStreamDefaultController;
    }
    function ReadableStreamDefaultControllerCallPullIfNeeded(controller) {
      const shouldPull = ReadableStreamDefaultControllerShouldCallPull(controller);
      if (!shouldPull) {
        return;
      }
      if (controller._pulling) {
        controller._pullAgain = true;
        return;
      }
      controller._pulling = true;
      const pullPromise = controller._pullAlgorithm();
      uponPromise(pullPromise, () => {
        controller._pulling = false;
        if (controller._pullAgain) {
          controller._pullAgain = false;
          ReadableStreamDefaultControllerCallPullIfNeeded(controller);
        }
      }, (e) => {
        ReadableStreamDefaultControllerError(controller, e);
      });
    }
    function ReadableStreamDefaultControllerShouldCallPull(controller) {
      const stream = controller._controlledReadableStream;
      if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(controller)) {
        return false;
      }
      if (!controller._started) {
        return false;
      }
      if (IsReadableStreamLocked(stream) && ReadableStreamGetNumReadRequests(stream) > 0) {
        return true;
      }
      const desiredSize = ReadableStreamDefaultControllerGetDesiredSize(controller);
      if (desiredSize > 0) {
        return true;
      }
      return false;
    }
    function ReadableStreamDefaultControllerClearAlgorithms(controller) {
      controller._pullAlgorithm = void 0;
      controller._cancelAlgorithm = void 0;
      controller._strategySizeAlgorithm = void 0;
    }
    function ReadableStreamDefaultControllerClose(controller) {
      if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(controller)) {
        return;
      }
      const stream = controller._controlledReadableStream;
      controller._closeRequested = true;
      if (controller._queue.length === 0) {
        ReadableStreamDefaultControllerClearAlgorithms(controller);
        ReadableStreamClose(stream);
      }
    }
    function ReadableStreamDefaultControllerEnqueue(controller, chunk) {
      if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(controller)) {
        return;
      }
      const stream = controller._controlledReadableStream;
      if (IsReadableStreamLocked(stream) && ReadableStreamGetNumReadRequests(stream) > 0) {
        ReadableStreamFulfillReadRequest(stream, chunk, false);
      } else {
        let chunkSize;
        try {
          chunkSize = controller._strategySizeAlgorithm(chunk);
        } catch (chunkSizeE) {
          ReadableStreamDefaultControllerError(controller, chunkSizeE);
          throw chunkSizeE;
        }
        try {
          EnqueueValueWithSize(controller, chunk, chunkSize);
        } catch (enqueueE) {
          ReadableStreamDefaultControllerError(controller, enqueueE);
          throw enqueueE;
        }
      }
      ReadableStreamDefaultControllerCallPullIfNeeded(controller);
    }
    function ReadableStreamDefaultControllerError(controller, e) {
      const stream = controller._controlledReadableStream;
      if (stream._state !== "readable") {
        return;
      }
      ResetQueue(controller);
      ReadableStreamDefaultControllerClearAlgorithms(controller);
      ReadableStreamError(stream, e);
    }
    function ReadableStreamDefaultControllerGetDesiredSize(controller) {
      const state = controller._controlledReadableStream._state;
      if (state === "errored") {
        return null;
      }
      if (state === "closed") {
        return 0;
      }
      return controller._strategyHWM - controller._queueTotalSize;
    }
    function ReadableStreamDefaultControllerHasBackpressure(controller) {
      if (ReadableStreamDefaultControllerShouldCallPull(controller)) {
        return false;
      }
      return true;
    }
    function ReadableStreamDefaultControllerCanCloseOrEnqueue(controller) {
      const state = controller._controlledReadableStream._state;
      if (!controller._closeRequested && state === "readable") {
        return true;
      }
      return false;
    }
    function SetUpReadableStreamDefaultController(stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark, sizeAlgorithm) {
      controller._controlledReadableStream = stream;
      controller._queue = void 0;
      controller._queueTotalSize = void 0;
      ResetQueue(controller);
      controller._started = false;
      controller._closeRequested = false;
      controller._pullAgain = false;
      controller._pulling = false;
      controller._strategySizeAlgorithm = sizeAlgorithm;
      controller._strategyHWM = highWaterMark;
      controller._pullAlgorithm = pullAlgorithm;
      controller._cancelAlgorithm = cancelAlgorithm;
      stream._readableStreamController = controller;
      const startResult = startAlgorithm();
      uponPromise(promiseResolvedWith(startResult), () => {
        controller._started = true;
        ReadableStreamDefaultControllerCallPullIfNeeded(controller);
      }, (r) => {
        ReadableStreamDefaultControllerError(controller, r);
      });
    }
    function SetUpReadableStreamDefaultControllerFromUnderlyingSource(stream, underlyingSource, highWaterMark, sizeAlgorithm) {
      const controller = Object.create(ReadableStreamDefaultController.prototype);
      let startAlgorithm = () => void 0;
      let pullAlgorithm = () => promiseResolvedWith(void 0);
      let cancelAlgorithm = () => promiseResolvedWith(void 0);
      if (underlyingSource.start !== void 0) {
        startAlgorithm = () => underlyingSource.start(controller);
      }
      if (underlyingSource.pull !== void 0) {
        pullAlgorithm = () => underlyingSource.pull(controller);
      }
      if (underlyingSource.cancel !== void 0) {
        cancelAlgorithm = (reason) => underlyingSource.cancel(reason);
      }
      SetUpReadableStreamDefaultController(stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark, sizeAlgorithm);
    }
    function defaultControllerBrandCheckException$1(name) {
      return new TypeError(`ReadableStreamDefaultController.prototype.${name} can only be used on a ReadableStreamDefaultController`);
    }
    function ReadableStreamTee(stream, cloneForBranch2) {
      if (IsReadableByteStreamController(stream._readableStreamController)) {
        return ReadableByteStreamTee(stream);
      }
      return ReadableStreamDefaultTee(stream);
    }
    function ReadableStreamDefaultTee(stream, cloneForBranch2) {
      const reader = AcquireReadableStreamDefaultReader(stream);
      let reading = false;
      let canceled1 = false;
      let canceled2 = false;
      let reason1;
      let reason2;
      let branch1;
      let branch2;
      let resolveCancelPromise;
      const cancelPromise = newPromise((resolve2) => {
        resolveCancelPromise = resolve2;
      });
      function pullAlgorithm() {
        if (reading) {
          return promiseResolvedWith(void 0);
        }
        reading = true;
        const readRequest = {
          _chunkSteps: (chunk) => {
            queueMicrotask(() => {
              reading = false;
              const chunk1 = chunk;
              const chunk2 = chunk;
              if (!canceled1) {
                ReadableStreamDefaultControllerEnqueue(branch1._readableStreamController, chunk1);
              }
              if (!canceled2) {
                ReadableStreamDefaultControllerEnqueue(branch2._readableStreamController, chunk2);
              }
            });
          },
          _closeSteps: () => {
            reading = false;
            if (!canceled1) {
              ReadableStreamDefaultControllerClose(branch1._readableStreamController);
            }
            if (!canceled2) {
              ReadableStreamDefaultControllerClose(branch2._readableStreamController);
            }
            if (!canceled1 || !canceled2) {
              resolveCancelPromise(void 0);
            }
          },
          _errorSteps: () => {
            reading = false;
          }
        };
        ReadableStreamDefaultReaderRead(reader, readRequest);
        return promiseResolvedWith(void 0);
      }
      function cancel1Algorithm(reason) {
        canceled1 = true;
        reason1 = reason;
        if (canceled2) {
          const compositeReason = CreateArrayFromList([reason1, reason2]);
          const cancelResult = ReadableStreamCancel(stream, compositeReason);
          resolveCancelPromise(cancelResult);
        }
        return cancelPromise;
      }
      function cancel2Algorithm(reason) {
        canceled2 = true;
        reason2 = reason;
        if (canceled1) {
          const compositeReason = CreateArrayFromList([reason1, reason2]);
          const cancelResult = ReadableStreamCancel(stream, compositeReason);
          resolveCancelPromise(cancelResult);
        }
        return cancelPromise;
      }
      function startAlgorithm() {
      }
      branch1 = CreateReadableStream(startAlgorithm, pullAlgorithm, cancel1Algorithm);
      branch2 = CreateReadableStream(startAlgorithm, pullAlgorithm, cancel2Algorithm);
      uponRejection(reader._closedPromise, (r) => {
        ReadableStreamDefaultControllerError(branch1._readableStreamController, r);
        ReadableStreamDefaultControllerError(branch2._readableStreamController, r);
        if (!canceled1 || !canceled2) {
          resolveCancelPromise(void 0);
        }
      });
      return [branch1, branch2];
    }
    function ReadableByteStreamTee(stream) {
      let reader = AcquireReadableStreamDefaultReader(stream);
      let reading = false;
      let canceled1 = false;
      let canceled2 = false;
      let reason1;
      let reason2;
      let branch1;
      let branch2;
      let resolveCancelPromise;
      const cancelPromise = newPromise((resolve2) => {
        resolveCancelPromise = resolve2;
      });
      function forwardReaderError(thisReader) {
        uponRejection(thisReader._closedPromise, (r) => {
          if (thisReader !== reader) {
            return;
          }
          ReadableByteStreamControllerError(branch1._readableStreamController, r);
          ReadableByteStreamControllerError(branch2._readableStreamController, r);
          if (!canceled1 || !canceled2) {
            resolveCancelPromise(void 0);
          }
        });
      }
      function pullWithDefaultReader() {
        if (IsReadableStreamBYOBReader(reader)) {
          ReadableStreamReaderGenericRelease(reader);
          reader = AcquireReadableStreamDefaultReader(stream);
          forwardReaderError(reader);
        }
        const readRequest = {
          _chunkSteps: (chunk) => {
            queueMicrotask(() => {
              reading = false;
              const chunk1 = chunk;
              let chunk2 = chunk;
              if (!canceled1 && !canceled2) {
                try {
                  chunk2 = CloneAsUint8Array(chunk);
                } catch (cloneE) {
                  ReadableByteStreamControllerError(branch1._readableStreamController, cloneE);
                  ReadableByteStreamControllerError(branch2._readableStreamController, cloneE);
                  resolveCancelPromise(ReadableStreamCancel(stream, cloneE));
                  return;
                }
              }
              if (!canceled1) {
                ReadableByteStreamControllerEnqueue(branch1._readableStreamController, chunk1);
              }
              if (!canceled2) {
                ReadableByteStreamControllerEnqueue(branch2._readableStreamController, chunk2);
              }
            });
          },
          _closeSteps: () => {
            reading = false;
            if (!canceled1) {
              ReadableByteStreamControllerClose(branch1._readableStreamController);
            }
            if (!canceled2) {
              ReadableByteStreamControllerClose(branch2._readableStreamController);
            }
            if (branch1._readableStreamController._pendingPullIntos.length > 0) {
              ReadableByteStreamControllerRespond(branch1._readableStreamController, 0);
            }
            if (branch2._readableStreamController._pendingPullIntos.length > 0) {
              ReadableByteStreamControllerRespond(branch2._readableStreamController, 0);
            }
            if (!canceled1 || !canceled2) {
              resolveCancelPromise(void 0);
            }
          },
          _errorSteps: () => {
            reading = false;
          }
        };
        ReadableStreamDefaultReaderRead(reader, readRequest);
      }
      function pullWithBYOBReader(view, forBranch2) {
        if (IsReadableStreamDefaultReader(reader)) {
          ReadableStreamReaderGenericRelease(reader);
          reader = AcquireReadableStreamBYOBReader(stream);
          forwardReaderError(reader);
        }
        const byobBranch = forBranch2 ? branch2 : branch1;
        const otherBranch = forBranch2 ? branch1 : branch2;
        const readIntoRequest = {
          _chunkSteps: (chunk) => {
            queueMicrotask(() => {
              reading = false;
              const byobCanceled = forBranch2 ? canceled2 : canceled1;
              const otherCanceled = forBranch2 ? canceled1 : canceled2;
              if (!otherCanceled) {
                let clonedChunk;
                try {
                  clonedChunk = CloneAsUint8Array(chunk);
                } catch (cloneE) {
                  ReadableByteStreamControllerError(byobBranch._readableStreamController, cloneE);
                  ReadableByteStreamControllerError(otherBranch._readableStreamController, cloneE);
                  resolveCancelPromise(ReadableStreamCancel(stream, cloneE));
                  return;
                }
                if (!byobCanceled) {
                  ReadableByteStreamControllerRespondWithNewView(byobBranch._readableStreamController, chunk);
                }
                ReadableByteStreamControllerEnqueue(otherBranch._readableStreamController, clonedChunk);
              } else if (!byobCanceled) {
                ReadableByteStreamControllerRespondWithNewView(byobBranch._readableStreamController, chunk);
              }
            });
          },
          _closeSteps: (chunk) => {
            reading = false;
            const byobCanceled = forBranch2 ? canceled2 : canceled1;
            const otherCanceled = forBranch2 ? canceled1 : canceled2;
            if (!byobCanceled) {
              ReadableByteStreamControllerClose(byobBranch._readableStreamController);
            }
            if (!otherCanceled) {
              ReadableByteStreamControllerClose(otherBranch._readableStreamController);
            }
            if (chunk !== void 0) {
              if (!byobCanceled) {
                ReadableByteStreamControllerRespondWithNewView(byobBranch._readableStreamController, chunk);
              }
              if (!otherCanceled && otherBranch._readableStreamController._pendingPullIntos.length > 0) {
                ReadableByteStreamControllerRespond(otherBranch._readableStreamController, 0);
              }
            }
            if (!byobCanceled || !otherCanceled) {
              resolveCancelPromise(void 0);
            }
          },
          _errorSteps: () => {
            reading = false;
          }
        };
        ReadableStreamBYOBReaderRead(reader, view, readIntoRequest);
      }
      function pull1Algorithm() {
        if (reading) {
          return promiseResolvedWith(void 0);
        }
        reading = true;
        const byobRequest = ReadableByteStreamControllerGetBYOBRequest(branch1._readableStreamController);
        if (byobRequest === null) {
          pullWithDefaultReader();
        } else {
          pullWithBYOBReader(byobRequest._view, false);
        }
        return promiseResolvedWith(void 0);
      }
      function pull2Algorithm() {
        if (reading) {
          return promiseResolvedWith(void 0);
        }
        reading = true;
        const byobRequest = ReadableByteStreamControllerGetBYOBRequest(branch2._readableStreamController);
        if (byobRequest === null) {
          pullWithDefaultReader();
        } else {
          pullWithBYOBReader(byobRequest._view, true);
        }
        return promiseResolvedWith(void 0);
      }
      function cancel1Algorithm(reason) {
        canceled1 = true;
        reason1 = reason;
        if (canceled2) {
          const compositeReason = CreateArrayFromList([reason1, reason2]);
          const cancelResult = ReadableStreamCancel(stream, compositeReason);
          resolveCancelPromise(cancelResult);
        }
        return cancelPromise;
      }
      function cancel2Algorithm(reason) {
        canceled2 = true;
        reason2 = reason;
        if (canceled1) {
          const compositeReason = CreateArrayFromList([reason1, reason2]);
          const cancelResult = ReadableStreamCancel(stream, compositeReason);
          resolveCancelPromise(cancelResult);
        }
        return cancelPromise;
      }
      function startAlgorithm() {
        return;
      }
      branch1 = CreateReadableByteStream(startAlgorithm, pull1Algorithm, cancel1Algorithm);
      branch2 = CreateReadableByteStream(startAlgorithm, pull2Algorithm, cancel2Algorithm);
      forwardReaderError(reader);
      return [branch1, branch2];
    }
    function convertUnderlyingDefaultOrByteSource(source, context) {
      assertDictionary(source, context);
      const original = source;
      const autoAllocateChunkSize = original === null || original === void 0 ? void 0 : original.autoAllocateChunkSize;
      const cancel = original === null || original === void 0 ? void 0 : original.cancel;
      const pull = original === null || original === void 0 ? void 0 : original.pull;
      const start = original === null || original === void 0 ? void 0 : original.start;
      const type = original === null || original === void 0 ? void 0 : original.type;
      return {
        autoAllocateChunkSize: autoAllocateChunkSize === void 0 ? void 0 : convertUnsignedLongLongWithEnforceRange(autoAllocateChunkSize, `${context} has member 'autoAllocateChunkSize' that`),
        cancel: cancel === void 0 ? void 0 : convertUnderlyingSourceCancelCallback(cancel, original, `${context} has member 'cancel' that`),
        pull: pull === void 0 ? void 0 : convertUnderlyingSourcePullCallback(pull, original, `${context} has member 'pull' that`),
        start: start === void 0 ? void 0 : convertUnderlyingSourceStartCallback(start, original, `${context} has member 'start' that`),
        type: type === void 0 ? void 0 : convertReadableStreamType(type, `${context} has member 'type' that`)
      };
    }
    function convertUnderlyingSourceCancelCallback(fn, original, context) {
      assertFunction(fn, context);
      return (reason) => promiseCall(fn, original, [reason]);
    }
    function convertUnderlyingSourcePullCallback(fn, original, context) {
      assertFunction(fn, context);
      return (controller) => promiseCall(fn, original, [controller]);
    }
    function convertUnderlyingSourceStartCallback(fn, original, context) {
      assertFunction(fn, context);
      return (controller) => reflectCall(fn, original, [controller]);
    }
    function convertReadableStreamType(type, context) {
      type = `${type}`;
      if (type !== "bytes") {
        throw new TypeError(`${context} '${type}' is not a valid enumeration value for ReadableStreamType`);
      }
      return type;
    }
    function convertReaderOptions(options2, context) {
      assertDictionary(options2, context);
      const mode = options2 === null || options2 === void 0 ? void 0 : options2.mode;
      return {
        mode: mode === void 0 ? void 0 : convertReadableStreamReaderMode(mode, `${context} has member 'mode' that`)
      };
    }
    function convertReadableStreamReaderMode(mode, context) {
      mode = `${mode}`;
      if (mode !== "byob") {
        throw new TypeError(`${context} '${mode}' is not a valid enumeration value for ReadableStreamReaderMode`);
      }
      return mode;
    }
    function convertIteratorOptions(options2, context) {
      assertDictionary(options2, context);
      const preventCancel = options2 === null || options2 === void 0 ? void 0 : options2.preventCancel;
      return { preventCancel: Boolean(preventCancel) };
    }
    function convertPipeOptions(options2, context) {
      assertDictionary(options2, context);
      const preventAbort = options2 === null || options2 === void 0 ? void 0 : options2.preventAbort;
      const preventCancel = options2 === null || options2 === void 0 ? void 0 : options2.preventCancel;
      const preventClose = options2 === null || options2 === void 0 ? void 0 : options2.preventClose;
      const signal = options2 === null || options2 === void 0 ? void 0 : options2.signal;
      if (signal !== void 0) {
        assertAbortSignal(signal, `${context} has member 'signal' that`);
      }
      return {
        preventAbort: Boolean(preventAbort),
        preventCancel: Boolean(preventCancel),
        preventClose: Boolean(preventClose),
        signal
      };
    }
    function assertAbortSignal(signal, context) {
      if (!isAbortSignal2(signal)) {
        throw new TypeError(`${context} is not an AbortSignal.`);
      }
    }
    function convertReadableWritablePair(pair, context) {
      assertDictionary(pair, context);
      const readable = pair === null || pair === void 0 ? void 0 : pair.readable;
      assertRequiredField(readable, "readable", "ReadableWritablePair");
      assertReadableStream(readable, `${context} has member 'readable' that`);
      const writable2 = pair === null || pair === void 0 ? void 0 : pair.writable;
      assertRequiredField(writable2, "writable", "ReadableWritablePair");
      assertWritableStream(writable2, `${context} has member 'writable' that`);
      return { readable, writable: writable2 };
    }
    class ReadableStream2 {
      constructor(rawUnderlyingSource = {}, rawStrategy = {}) {
        if (rawUnderlyingSource === void 0) {
          rawUnderlyingSource = null;
        } else {
          assertObject(rawUnderlyingSource, "First parameter");
        }
        const strategy = convertQueuingStrategy(rawStrategy, "Second parameter");
        const underlyingSource = convertUnderlyingDefaultOrByteSource(rawUnderlyingSource, "First parameter");
        InitializeReadableStream(this);
        if (underlyingSource.type === "bytes") {
          if (strategy.size !== void 0) {
            throw new RangeError("The strategy for a byte stream cannot have a size function");
          }
          const highWaterMark = ExtractHighWaterMark(strategy, 0);
          SetUpReadableByteStreamControllerFromUnderlyingSource(this, underlyingSource, highWaterMark);
        } else {
          const sizeAlgorithm = ExtractSizeAlgorithm(strategy);
          const highWaterMark = ExtractHighWaterMark(strategy, 1);
          SetUpReadableStreamDefaultControllerFromUnderlyingSource(this, underlyingSource, highWaterMark, sizeAlgorithm);
        }
      }
      get locked() {
        if (!IsReadableStream(this)) {
          throw streamBrandCheckException$1("locked");
        }
        return IsReadableStreamLocked(this);
      }
      cancel(reason = void 0) {
        if (!IsReadableStream(this)) {
          return promiseRejectedWith(streamBrandCheckException$1("cancel"));
        }
        if (IsReadableStreamLocked(this)) {
          return promiseRejectedWith(new TypeError("Cannot cancel a stream that already has a reader"));
        }
        return ReadableStreamCancel(this, reason);
      }
      getReader(rawOptions = void 0) {
        if (!IsReadableStream(this)) {
          throw streamBrandCheckException$1("getReader");
        }
        const options2 = convertReaderOptions(rawOptions, "First parameter");
        if (options2.mode === void 0) {
          return AcquireReadableStreamDefaultReader(this);
        }
        return AcquireReadableStreamBYOBReader(this);
      }
      pipeThrough(rawTransform, rawOptions = {}) {
        if (!IsReadableStream(this)) {
          throw streamBrandCheckException$1("pipeThrough");
        }
        assertRequiredArgument(rawTransform, 1, "pipeThrough");
        const transform = convertReadableWritablePair(rawTransform, "First parameter");
        const options2 = convertPipeOptions(rawOptions, "Second parameter");
        if (IsReadableStreamLocked(this)) {
          throw new TypeError("ReadableStream.prototype.pipeThrough cannot be used on a locked ReadableStream");
        }
        if (IsWritableStreamLocked(transform.writable)) {
          throw new TypeError("ReadableStream.prototype.pipeThrough cannot be used on a locked WritableStream");
        }
        const promise = ReadableStreamPipeTo(this, transform.writable, options2.preventClose, options2.preventAbort, options2.preventCancel, options2.signal);
        setPromiseIsHandledToTrue(promise);
        return transform.readable;
      }
      pipeTo(destination, rawOptions = {}) {
        if (!IsReadableStream(this)) {
          return promiseRejectedWith(streamBrandCheckException$1("pipeTo"));
        }
        if (destination === void 0) {
          return promiseRejectedWith(`Parameter 1 is required in 'pipeTo'.`);
        }
        if (!IsWritableStream(destination)) {
          return promiseRejectedWith(new TypeError(`ReadableStream.prototype.pipeTo's first argument must be a WritableStream`));
        }
        let options2;
        try {
          options2 = convertPipeOptions(rawOptions, "Second parameter");
        } catch (e) {
          return promiseRejectedWith(e);
        }
        if (IsReadableStreamLocked(this)) {
          return promiseRejectedWith(new TypeError("ReadableStream.prototype.pipeTo cannot be used on a locked ReadableStream"));
        }
        if (IsWritableStreamLocked(destination)) {
          return promiseRejectedWith(new TypeError("ReadableStream.prototype.pipeTo cannot be used on a locked WritableStream"));
        }
        return ReadableStreamPipeTo(this, destination, options2.preventClose, options2.preventAbort, options2.preventCancel, options2.signal);
      }
      tee() {
        if (!IsReadableStream(this)) {
          throw streamBrandCheckException$1("tee");
        }
        const branches = ReadableStreamTee(this);
        return CreateArrayFromList(branches);
      }
      values(rawOptions = void 0) {
        if (!IsReadableStream(this)) {
          throw streamBrandCheckException$1("values");
        }
        const options2 = convertIteratorOptions(rawOptions, "First parameter");
        return AcquireReadableStreamAsyncIterator(this, options2.preventCancel);
      }
    }
    Object.defineProperties(ReadableStream2.prototype, {
      cancel: { enumerable: true },
      getReader: { enumerable: true },
      pipeThrough: { enumerable: true },
      pipeTo: { enumerable: true },
      tee: { enumerable: true },
      values: { enumerable: true },
      locked: { enumerable: true }
    });
    if (typeof SymbolPolyfill.toStringTag === "symbol") {
      Object.defineProperty(ReadableStream2.prototype, SymbolPolyfill.toStringTag, {
        value: "ReadableStream",
        configurable: true
      });
    }
    if (typeof SymbolPolyfill.asyncIterator === "symbol") {
      Object.defineProperty(ReadableStream2.prototype, SymbolPolyfill.asyncIterator, {
        value: ReadableStream2.prototype.values,
        writable: true,
        configurable: true
      });
    }
    function CreateReadableStream(startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark = 1, sizeAlgorithm = () => 1) {
      const stream = Object.create(ReadableStream2.prototype);
      InitializeReadableStream(stream);
      const controller = Object.create(ReadableStreamDefaultController.prototype);
      SetUpReadableStreamDefaultController(stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark, sizeAlgorithm);
      return stream;
    }
    function CreateReadableByteStream(startAlgorithm, pullAlgorithm, cancelAlgorithm) {
      const stream = Object.create(ReadableStream2.prototype);
      InitializeReadableStream(stream);
      const controller = Object.create(ReadableByteStreamController.prototype);
      SetUpReadableByteStreamController(stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, 0, void 0);
      return stream;
    }
    function InitializeReadableStream(stream) {
      stream._state = "readable";
      stream._reader = void 0;
      stream._storedError = void 0;
      stream._disturbed = false;
    }
    function IsReadableStream(x) {
      if (!typeIsObject(x)) {
        return false;
      }
      if (!Object.prototype.hasOwnProperty.call(x, "_readableStreamController")) {
        return false;
      }
      return x instanceof ReadableStream2;
    }
    function IsReadableStreamLocked(stream) {
      if (stream._reader === void 0) {
        return false;
      }
      return true;
    }
    function ReadableStreamCancel(stream, reason) {
      stream._disturbed = true;
      if (stream._state === "closed") {
        return promiseResolvedWith(void 0);
      }
      if (stream._state === "errored") {
        return promiseRejectedWith(stream._storedError);
      }
      ReadableStreamClose(stream);
      const reader = stream._reader;
      if (reader !== void 0 && IsReadableStreamBYOBReader(reader)) {
        reader._readIntoRequests.forEach((readIntoRequest) => {
          readIntoRequest._closeSteps(void 0);
        });
        reader._readIntoRequests = new SimpleQueue();
      }
      const sourceCancelPromise = stream._readableStreamController[CancelSteps](reason);
      return transformPromiseWith(sourceCancelPromise, noop2);
    }
    function ReadableStreamClose(stream) {
      stream._state = "closed";
      const reader = stream._reader;
      if (reader === void 0) {
        return;
      }
      defaultReaderClosedPromiseResolve(reader);
      if (IsReadableStreamDefaultReader(reader)) {
        reader._readRequests.forEach((readRequest) => {
          readRequest._closeSteps();
        });
        reader._readRequests = new SimpleQueue();
      }
    }
    function ReadableStreamError(stream, e) {
      stream._state = "errored";
      stream._storedError = e;
      const reader = stream._reader;
      if (reader === void 0) {
        return;
      }
      defaultReaderClosedPromiseReject(reader, e);
      if (IsReadableStreamDefaultReader(reader)) {
        reader._readRequests.forEach((readRequest) => {
          readRequest._errorSteps(e);
        });
        reader._readRequests = new SimpleQueue();
      } else {
        reader._readIntoRequests.forEach((readIntoRequest) => {
          readIntoRequest._errorSteps(e);
        });
        reader._readIntoRequests = new SimpleQueue();
      }
    }
    function streamBrandCheckException$1(name) {
      return new TypeError(`ReadableStream.prototype.${name} can only be used on a ReadableStream`);
    }
    function convertQueuingStrategyInit(init2, context) {
      assertDictionary(init2, context);
      const highWaterMark = init2 === null || init2 === void 0 ? void 0 : init2.highWaterMark;
      assertRequiredField(highWaterMark, "highWaterMark", "QueuingStrategyInit");
      return {
        highWaterMark: convertUnrestrictedDouble(highWaterMark)
      };
    }
    const byteLengthSizeFunction = (chunk) => {
      return chunk.byteLength;
    };
    Object.defineProperty(byteLengthSizeFunction, "name", {
      value: "size",
      configurable: true
    });
    class ByteLengthQueuingStrategy {
      constructor(options2) {
        assertRequiredArgument(options2, 1, "ByteLengthQueuingStrategy");
        options2 = convertQueuingStrategyInit(options2, "First parameter");
        this._byteLengthQueuingStrategyHighWaterMark = options2.highWaterMark;
      }
      get highWaterMark() {
        if (!IsByteLengthQueuingStrategy(this)) {
          throw byteLengthBrandCheckException("highWaterMark");
        }
        return this._byteLengthQueuingStrategyHighWaterMark;
      }
      get size() {
        if (!IsByteLengthQueuingStrategy(this)) {
          throw byteLengthBrandCheckException("size");
        }
        return byteLengthSizeFunction;
      }
    }
    Object.defineProperties(ByteLengthQueuingStrategy.prototype, {
      highWaterMark: { enumerable: true },
      size: { enumerable: true }
    });
    if (typeof SymbolPolyfill.toStringTag === "symbol") {
      Object.defineProperty(ByteLengthQueuingStrategy.prototype, SymbolPolyfill.toStringTag, {
        value: "ByteLengthQueuingStrategy",
        configurable: true
      });
    }
    function byteLengthBrandCheckException(name) {
      return new TypeError(`ByteLengthQueuingStrategy.prototype.${name} can only be used on a ByteLengthQueuingStrategy`);
    }
    function IsByteLengthQueuingStrategy(x) {
      if (!typeIsObject(x)) {
        return false;
      }
      if (!Object.prototype.hasOwnProperty.call(x, "_byteLengthQueuingStrategyHighWaterMark")) {
        return false;
      }
      return x instanceof ByteLengthQueuingStrategy;
    }
    const countSizeFunction = () => {
      return 1;
    };
    Object.defineProperty(countSizeFunction, "name", {
      value: "size",
      configurable: true
    });
    class CountQueuingStrategy {
      constructor(options2) {
        assertRequiredArgument(options2, 1, "CountQueuingStrategy");
        options2 = convertQueuingStrategyInit(options2, "First parameter");
        this._countQueuingStrategyHighWaterMark = options2.highWaterMark;
      }
      get highWaterMark() {
        if (!IsCountQueuingStrategy(this)) {
          throw countBrandCheckException("highWaterMark");
        }
        return this._countQueuingStrategyHighWaterMark;
      }
      get size() {
        if (!IsCountQueuingStrategy(this)) {
          throw countBrandCheckException("size");
        }
        return countSizeFunction;
      }
    }
    Object.defineProperties(CountQueuingStrategy.prototype, {
      highWaterMark: { enumerable: true },
      size: { enumerable: true }
    });
    if (typeof SymbolPolyfill.toStringTag === "symbol") {
      Object.defineProperty(CountQueuingStrategy.prototype, SymbolPolyfill.toStringTag, {
        value: "CountQueuingStrategy",
        configurable: true
      });
    }
    function countBrandCheckException(name) {
      return new TypeError(`CountQueuingStrategy.prototype.${name} can only be used on a CountQueuingStrategy`);
    }
    function IsCountQueuingStrategy(x) {
      if (!typeIsObject(x)) {
        return false;
      }
      if (!Object.prototype.hasOwnProperty.call(x, "_countQueuingStrategyHighWaterMark")) {
        return false;
      }
      return x instanceof CountQueuingStrategy;
    }
    function convertTransformer(original, context) {
      assertDictionary(original, context);
      const flush = original === null || original === void 0 ? void 0 : original.flush;
      const readableType = original === null || original === void 0 ? void 0 : original.readableType;
      const start = original === null || original === void 0 ? void 0 : original.start;
      const transform = original === null || original === void 0 ? void 0 : original.transform;
      const writableType = original === null || original === void 0 ? void 0 : original.writableType;
      return {
        flush: flush === void 0 ? void 0 : convertTransformerFlushCallback(flush, original, `${context} has member 'flush' that`),
        readableType,
        start: start === void 0 ? void 0 : convertTransformerStartCallback(start, original, `${context} has member 'start' that`),
        transform: transform === void 0 ? void 0 : convertTransformerTransformCallback(transform, original, `${context} has member 'transform' that`),
        writableType
      };
    }
    function convertTransformerFlushCallback(fn, original, context) {
      assertFunction(fn, context);
      return (controller) => promiseCall(fn, original, [controller]);
    }
    function convertTransformerStartCallback(fn, original, context) {
      assertFunction(fn, context);
      return (controller) => reflectCall(fn, original, [controller]);
    }
    function convertTransformerTransformCallback(fn, original, context) {
      assertFunction(fn, context);
      return (chunk, controller) => promiseCall(fn, original, [chunk, controller]);
    }
    class TransformStream {
      constructor(rawTransformer = {}, rawWritableStrategy = {}, rawReadableStrategy = {}) {
        if (rawTransformer === void 0) {
          rawTransformer = null;
        }
        const writableStrategy = convertQueuingStrategy(rawWritableStrategy, "Second parameter");
        const readableStrategy = convertQueuingStrategy(rawReadableStrategy, "Third parameter");
        const transformer2 = convertTransformer(rawTransformer, "First parameter");
        if (transformer2.readableType !== void 0) {
          throw new RangeError("Invalid readableType specified");
        }
        if (transformer2.writableType !== void 0) {
          throw new RangeError("Invalid writableType specified");
        }
        const readableHighWaterMark = ExtractHighWaterMark(readableStrategy, 0);
        const readableSizeAlgorithm = ExtractSizeAlgorithm(readableStrategy);
        const writableHighWaterMark = ExtractHighWaterMark(writableStrategy, 1);
        const writableSizeAlgorithm = ExtractSizeAlgorithm(writableStrategy);
        let startPromise_resolve;
        const startPromise = newPromise((resolve2) => {
          startPromise_resolve = resolve2;
        });
        InitializeTransformStream(this, startPromise, writableHighWaterMark, writableSizeAlgorithm, readableHighWaterMark, readableSizeAlgorithm);
        SetUpTransformStreamDefaultControllerFromTransformer(this, transformer2);
        if (transformer2.start !== void 0) {
          startPromise_resolve(transformer2.start(this._transformStreamController));
        } else {
          startPromise_resolve(void 0);
        }
      }
      get readable() {
        if (!IsTransformStream(this)) {
          throw streamBrandCheckException("readable");
        }
        return this._readable;
      }
      get writable() {
        if (!IsTransformStream(this)) {
          throw streamBrandCheckException("writable");
        }
        return this._writable;
      }
    }
    Object.defineProperties(TransformStream.prototype, {
      readable: { enumerable: true },
      writable: { enumerable: true }
    });
    if (typeof SymbolPolyfill.toStringTag === "symbol") {
      Object.defineProperty(TransformStream.prototype, SymbolPolyfill.toStringTag, {
        value: "TransformStream",
        configurable: true
      });
    }
    function InitializeTransformStream(stream, startPromise, writableHighWaterMark, writableSizeAlgorithm, readableHighWaterMark, readableSizeAlgorithm) {
      function startAlgorithm() {
        return startPromise;
      }
      function writeAlgorithm(chunk) {
        return TransformStreamDefaultSinkWriteAlgorithm(stream, chunk);
      }
      function abortAlgorithm(reason) {
        return TransformStreamDefaultSinkAbortAlgorithm(stream, reason);
      }
      function closeAlgorithm() {
        return TransformStreamDefaultSinkCloseAlgorithm(stream);
      }
      stream._writable = CreateWritableStream(startAlgorithm, writeAlgorithm, closeAlgorithm, abortAlgorithm, writableHighWaterMark, writableSizeAlgorithm);
      function pullAlgorithm() {
        return TransformStreamDefaultSourcePullAlgorithm(stream);
      }
      function cancelAlgorithm(reason) {
        TransformStreamErrorWritableAndUnblockWrite(stream, reason);
        return promiseResolvedWith(void 0);
      }
      stream._readable = CreateReadableStream(startAlgorithm, pullAlgorithm, cancelAlgorithm, readableHighWaterMark, readableSizeAlgorithm);
      stream._backpressure = void 0;
      stream._backpressureChangePromise = void 0;
      stream._backpressureChangePromise_resolve = void 0;
      TransformStreamSetBackpressure(stream, true);
      stream._transformStreamController = void 0;
    }
    function IsTransformStream(x) {
      if (!typeIsObject(x)) {
        return false;
      }
      if (!Object.prototype.hasOwnProperty.call(x, "_transformStreamController")) {
        return false;
      }
      return x instanceof TransformStream;
    }
    function TransformStreamError(stream, e) {
      ReadableStreamDefaultControllerError(stream._readable._readableStreamController, e);
      TransformStreamErrorWritableAndUnblockWrite(stream, e);
    }
    function TransformStreamErrorWritableAndUnblockWrite(stream, e) {
      TransformStreamDefaultControllerClearAlgorithms(stream._transformStreamController);
      WritableStreamDefaultControllerErrorIfNeeded(stream._writable._writableStreamController, e);
      if (stream._backpressure) {
        TransformStreamSetBackpressure(stream, false);
      }
    }
    function TransformStreamSetBackpressure(stream, backpressure) {
      if (stream._backpressureChangePromise !== void 0) {
        stream._backpressureChangePromise_resolve();
      }
      stream._backpressureChangePromise = newPromise((resolve2) => {
        stream._backpressureChangePromise_resolve = resolve2;
      });
      stream._backpressure = backpressure;
    }
    class TransformStreamDefaultController {
      constructor() {
        throw new TypeError("Illegal constructor");
      }
      get desiredSize() {
        if (!IsTransformStreamDefaultController(this)) {
          throw defaultControllerBrandCheckException("desiredSize");
        }
        const readableController = this._controlledTransformStream._readable._readableStreamController;
        return ReadableStreamDefaultControllerGetDesiredSize(readableController);
      }
      enqueue(chunk = void 0) {
        if (!IsTransformStreamDefaultController(this)) {
          throw defaultControllerBrandCheckException("enqueue");
        }
        TransformStreamDefaultControllerEnqueue(this, chunk);
      }
      error(reason = void 0) {
        if (!IsTransformStreamDefaultController(this)) {
          throw defaultControllerBrandCheckException("error");
        }
        TransformStreamDefaultControllerError(this, reason);
      }
      terminate() {
        if (!IsTransformStreamDefaultController(this)) {
          throw defaultControllerBrandCheckException("terminate");
        }
        TransformStreamDefaultControllerTerminate(this);
      }
    }
    Object.defineProperties(TransformStreamDefaultController.prototype, {
      enqueue: { enumerable: true },
      error: { enumerable: true },
      terminate: { enumerable: true },
      desiredSize: { enumerable: true }
    });
    if (typeof SymbolPolyfill.toStringTag === "symbol") {
      Object.defineProperty(TransformStreamDefaultController.prototype, SymbolPolyfill.toStringTag, {
        value: "TransformStreamDefaultController",
        configurable: true
      });
    }
    function IsTransformStreamDefaultController(x) {
      if (!typeIsObject(x)) {
        return false;
      }
      if (!Object.prototype.hasOwnProperty.call(x, "_controlledTransformStream")) {
        return false;
      }
      return x instanceof TransformStreamDefaultController;
    }
    function SetUpTransformStreamDefaultController(stream, controller, transformAlgorithm, flushAlgorithm) {
      controller._controlledTransformStream = stream;
      stream._transformStreamController = controller;
      controller._transformAlgorithm = transformAlgorithm;
      controller._flushAlgorithm = flushAlgorithm;
    }
    function SetUpTransformStreamDefaultControllerFromTransformer(stream, transformer2) {
      const controller = Object.create(TransformStreamDefaultController.prototype);
      let transformAlgorithm = (chunk) => {
        try {
          TransformStreamDefaultControllerEnqueue(controller, chunk);
          return promiseResolvedWith(void 0);
        } catch (transformResultE) {
          return promiseRejectedWith(transformResultE);
        }
      };
      let flushAlgorithm = () => promiseResolvedWith(void 0);
      if (transformer2.transform !== void 0) {
        transformAlgorithm = (chunk) => transformer2.transform(chunk, controller);
      }
      if (transformer2.flush !== void 0) {
        flushAlgorithm = () => transformer2.flush(controller);
      }
      SetUpTransformStreamDefaultController(stream, controller, transformAlgorithm, flushAlgorithm);
    }
    function TransformStreamDefaultControllerClearAlgorithms(controller) {
      controller._transformAlgorithm = void 0;
      controller._flushAlgorithm = void 0;
    }
    function TransformStreamDefaultControllerEnqueue(controller, chunk) {
      const stream = controller._controlledTransformStream;
      const readableController = stream._readable._readableStreamController;
      if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(readableController)) {
        throw new TypeError("Readable side is not in a state that permits enqueue");
      }
      try {
        ReadableStreamDefaultControllerEnqueue(readableController, chunk);
      } catch (e) {
        TransformStreamErrorWritableAndUnblockWrite(stream, e);
        throw stream._readable._storedError;
      }
      const backpressure = ReadableStreamDefaultControllerHasBackpressure(readableController);
      if (backpressure !== stream._backpressure) {
        TransformStreamSetBackpressure(stream, true);
      }
    }
    function TransformStreamDefaultControllerError(controller, e) {
      TransformStreamError(controller._controlledTransformStream, e);
    }
    function TransformStreamDefaultControllerPerformTransform(controller, chunk) {
      const transformPromise = controller._transformAlgorithm(chunk);
      return transformPromiseWith(transformPromise, void 0, (r) => {
        TransformStreamError(controller._controlledTransformStream, r);
        throw r;
      });
    }
    function TransformStreamDefaultControllerTerminate(controller) {
      const stream = controller._controlledTransformStream;
      const readableController = stream._readable._readableStreamController;
      ReadableStreamDefaultControllerClose(readableController);
      const error2 = new TypeError("TransformStream terminated");
      TransformStreamErrorWritableAndUnblockWrite(stream, error2);
    }
    function TransformStreamDefaultSinkWriteAlgorithm(stream, chunk) {
      const controller = stream._transformStreamController;
      if (stream._backpressure) {
        const backpressureChangePromise = stream._backpressureChangePromise;
        return transformPromiseWith(backpressureChangePromise, () => {
          const writable2 = stream._writable;
          const state = writable2._state;
          if (state === "erroring") {
            throw writable2._storedError;
          }
          return TransformStreamDefaultControllerPerformTransform(controller, chunk);
        });
      }
      return TransformStreamDefaultControllerPerformTransform(controller, chunk);
    }
    function TransformStreamDefaultSinkAbortAlgorithm(stream, reason) {
      TransformStreamError(stream, reason);
      return promiseResolvedWith(void 0);
    }
    function TransformStreamDefaultSinkCloseAlgorithm(stream) {
      const readable = stream._readable;
      const controller = stream._transformStreamController;
      const flushPromise = controller._flushAlgorithm();
      TransformStreamDefaultControllerClearAlgorithms(controller);
      return transformPromiseWith(flushPromise, () => {
        if (readable._state === "errored") {
          throw readable._storedError;
        }
        ReadableStreamDefaultControllerClose(readable._readableStreamController);
      }, (r) => {
        TransformStreamError(stream, r);
        throw readable._storedError;
      });
    }
    function TransformStreamDefaultSourcePullAlgorithm(stream) {
      TransformStreamSetBackpressure(stream, false);
      return stream._backpressureChangePromise;
    }
    function defaultControllerBrandCheckException(name) {
      return new TypeError(`TransformStreamDefaultController.prototype.${name} can only be used on a TransformStreamDefaultController`);
    }
    function streamBrandCheckException(name) {
      return new TypeError(`TransformStream.prototype.${name} can only be used on a TransformStream`);
    }
    exports2.ByteLengthQueuingStrategy = ByteLengthQueuingStrategy;
    exports2.CountQueuingStrategy = CountQueuingStrategy;
    exports2.ReadableByteStreamController = ReadableByteStreamController;
    exports2.ReadableStream = ReadableStream2;
    exports2.ReadableStreamBYOBReader = ReadableStreamBYOBReader;
    exports2.ReadableStreamBYOBRequest = ReadableStreamBYOBRequest;
    exports2.ReadableStreamDefaultController = ReadableStreamDefaultController;
    exports2.ReadableStreamDefaultReader = ReadableStreamDefaultReader;
    exports2.TransformStream = TransformStream;
    exports2.TransformStreamDefaultController = TransformStreamDefaultController;
    exports2.WritableStream = WritableStream;
    exports2.WritableStreamDefaultController = WritableStreamDefaultController;
    exports2.WritableStreamDefaultWriter = WritableStreamDefaultWriter;
    Object.defineProperty(exports2, "__esModule", { value: true });
  });
})(ponyfill_es2018, ponyfill_es2018.exports);
var POOL_SIZE$1 = 65536;
if (!globalThis.ReadableStream) {
  try {
    Object.assign(globalThis, require("stream/web"));
  } catch (error2) {
    Object.assign(globalThis, ponyfill_es2018.exports);
  }
}
try {
  const { Blob: Blob3 } = require("buffer");
  if (Blob3 && !Blob3.prototype.stream) {
    Blob3.prototype.stream = function name(params) {
      let position = 0;
      const blob = this;
      return new ReadableStream({
        type: "bytes",
        async pull(ctrl) {
          const chunk = blob.slice(position, Math.min(blob.size, position + POOL_SIZE$1));
          const buffer = await chunk.arrayBuffer();
          position += buffer.byteLength;
          ctrl.enqueue(new Uint8Array(buffer));
          if (position === blob.size) {
            ctrl.close();
          }
        }
      });
    };
  }
} catch (error2) {
}
var POOL_SIZE = 65536;
async function* toIterator(parts, clone2 = true) {
  for (let part of parts) {
    if ("stream" in part) {
      yield* part.stream();
    } else if (ArrayBuffer.isView(part)) {
      if (clone2) {
        let position = part.byteOffset;
        let end = part.byteOffset + part.byteLength;
        while (position !== end) {
          const size = Math.min(end - position, POOL_SIZE);
          const chunk = part.buffer.slice(position, position + size);
          position += chunk.byteLength;
          yield new Uint8Array(chunk);
        }
      } else {
        yield part;
      }
    } else {
      let position = 0;
      while (position !== part.size) {
        const chunk = part.slice(position, Math.min(part.size, position + POOL_SIZE));
        const buffer = await chunk.arrayBuffer();
        position += buffer.byteLength;
        yield new Uint8Array(buffer);
      }
    }
  }
}
var _Blob = class Blob {
  #parts = [];
  #type = "";
  #size = 0;
  constructor(blobParts = [], options2 = {}) {
    let size = 0;
    const parts = blobParts.map((element) => {
      let part;
      if (ArrayBuffer.isView(element)) {
        part = new Uint8Array(element.buffer.slice(element.byteOffset, element.byteOffset + element.byteLength));
      } else if (element instanceof ArrayBuffer) {
        part = new Uint8Array(element.slice(0));
      } else if (element instanceof Blob) {
        part = element;
      } else {
        part = new TextEncoder().encode(element);
      }
      size += ArrayBuffer.isView(part) ? part.byteLength : part.size;
      return part;
    });
    const type = options2.type === void 0 ? "" : String(options2.type);
    this.#type = /[^\u0020-\u007E]/.test(type) ? "" : type;
    this.#size = size;
    this.#parts = parts;
  }
  get size() {
    return this.#size;
  }
  get type() {
    return this.#type;
  }
  async text() {
    const decoder = new TextDecoder();
    let str = "";
    for await (let part of toIterator(this.#parts, false)) {
      str += decoder.decode(part, { stream: true });
    }
    str += decoder.decode();
    return str;
  }
  async arrayBuffer() {
    const data = new Uint8Array(this.size);
    let offset = 0;
    for await (const chunk of toIterator(this.#parts, false)) {
      data.set(chunk, offset);
      offset += chunk.length;
    }
    return data.buffer;
  }
  stream() {
    const it = toIterator(this.#parts, true);
    return new ReadableStream({
      type: "bytes",
      async pull(ctrl) {
        const chunk = await it.next();
        chunk.done ? ctrl.close() : ctrl.enqueue(chunk.value);
      }
    });
  }
  slice(start = 0, end = this.size, type = "") {
    const { size } = this;
    let relativeStart = start < 0 ? Math.max(size + start, 0) : Math.min(start, size);
    let relativeEnd = end < 0 ? Math.max(size + end, 0) : Math.min(end, size);
    const span = Math.max(relativeEnd - relativeStart, 0);
    const parts = this.#parts;
    const blobParts = [];
    let added = 0;
    for (const part of parts) {
      if (added >= span) {
        break;
      }
      const size2 = ArrayBuffer.isView(part) ? part.byteLength : part.size;
      if (relativeStart && size2 <= relativeStart) {
        relativeStart -= size2;
        relativeEnd -= size2;
      } else {
        let chunk;
        if (ArrayBuffer.isView(part)) {
          chunk = part.subarray(relativeStart, Math.min(size2, relativeEnd));
          added += chunk.byteLength;
        } else {
          chunk = part.slice(relativeStart, Math.min(size2, relativeEnd));
          added += chunk.size;
        }
        blobParts.push(chunk);
        relativeStart = 0;
      }
    }
    const blob = new Blob([], { type: String(type).toLowerCase() });
    blob.#size = span;
    blob.#parts = blobParts;
    return blob;
  }
  get [Symbol.toStringTag]() {
    return "Blob";
  }
  static [Symbol.hasInstance](object2) {
    return object2 && typeof object2 === "object" && typeof object2.constructor === "function" && (typeof object2.stream === "function" || typeof object2.arrayBuffer === "function") && /^(Blob|File)$/.test(object2[Symbol.toStringTag]);
  }
};
Object.defineProperties(_Blob.prototype, {
  size: { enumerable: true },
  type: { enumerable: true },
  slice: { enumerable: true }
});
var Blob2 = _Blob;
var Blob$1 = Blob2;
var FetchBaseError = class extends Error {
  constructor(message, type) {
    super(message);
    Error.captureStackTrace(this, this.constructor);
    this.type = type;
  }
  get name() {
    return this.constructor.name;
  }
  get [Symbol.toStringTag]() {
    return this.constructor.name;
  }
};
var FetchError = class extends FetchBaseError {
  constructor(message, type, systemError) {
    super(message, type);
    if (systemError) {
      this.code = this.errno = systemError.code;
      this.erroredSysCall = systemError.syscall;
    }
  }
};
var NAME = Symbol.toStringTag;
var isURLSearchParameters = (object2) => {
  return typeof object2 === "object" && typeof object2.append === "function" && typeof object2.delete === "function" && typeof object2.get === "function" && typeof object2.getAll === "function" && typeof object2.has === "function" && typeof object2.set === "function" && typeof object2.sort === "function" && object2[NAME] === "URLSearchParams";
};
var isBlob = (object2) => {
  return typeof object2 === "object" && typeof object2.arrayBuffer === "function" && typeof object2.type === "string" && typeof object2.stream === "function" && typeof object2.constructor === "function" && /^(Blob|File)$/.test(object2[NAME]);
};
function isFormData(object2) {
  return typeof object2 === "object" && typeof object2.append === "function" && typeof object2.set === "function" && typeof object2.get === "function" && typeof object2.getAll === "function" && typeof object2.delete === "function" && typeof object2.keys === "function" && typeof object2.values === "function" && typeof object2.entries === "function" && typeof object2.constructor === "function" && object2[NAME] === "FormData";
}
var isAbortSignal = (object2) => {
  return typeof object2 === "object" && (object2[NAME] === "AbortSignal" || object2[NAME] === "EventTarget");
};
var carriage = "\r\n";
var dashes = "-".repeat(2);
var carriageLength = Buffer.byteLength(carriage);
var getFooter = (boundary) => `${dashes}${boundary}${dashes}${carriage.repeat(2)}`;
function getHeader(boundary, name, field) {
  let header = "";
  header += `${dashes}${boundary}${carriage}`;
  header += `Content-Disposition: form-data; name="${name}"`;
  if (isBlob(field)) {
    header += `; filename="${field.name}"${carriage}`;
    header += `Content-Type: ${field.type || "application/octet-stream"}`;
  }
  return `${header}${carriage.repeat(2)}`;
}
var getBoundary = () => (0, import_crypto.randomBytes)(8).toString("hex");
async function* formDataIterator(form, boundary) {
  for (const [name, value] of form) {
    yield getHeader(boundary, name, value);
    if (isBlob(value)) {
      yield* value.stream();
    } else {
      yield value;
    }
    yield carriage;
  }
  yield getFooter(boundary);
}
function getFormDataLength(form, boundary) {
  let length = 0;
  for (const [name, value] of form) {
    length += Buffer.byteLength(getHeader(boundary, name, value));
    length += isBlob(value) ? value.size : Buffer.byteLength(String(value));
    length += carriageLength;
  }
  length += Buffer.byteLength(getFooter(boundary));
  return length;
}
var INTERNALS$2 = Symbol("Body internals");
var Body = class {
  constructor(body, {
    size = 0
  } = {}) {
    let boundary = null;
    if (body === null) {
      body = null;
    } else if (isURLSearchParameters(body)) {
      body = Buffer.from(body.toString());
    } else if (isBlob(body))
      ;
    else if (Buffer.isBuffer(body))
      ;
    else if (import_util.types.isAnyArrayBuffer(body)) {
      body = Buffer.from(body);
    } else if (ArrayBuffer.isView(body)) {
      body = Buffer.from(body.buffer, body.byteOffset, body.byteLength);
    } else if (body instanceof import_stream.default)
      ;
    else if (isFormData(body)) {
      boundary = `NodeFetchFormDataBoundary${getBoundary()}`;
      body = import_stream.default.Readable.from(formDataIterator(body, boundary));
    } else {
      body = Buffer.from(String(body));
    }
    this[INTERNALS$2] = {
      body,
      boundary,
      disturbed: false,
      error: null
    };
    this.size = size;
    if (body instanceof import_stream.default) {
      body.on("error", (error_) => {
        const error2 = error_ instanceof FetchBaseError ? error_ : new FetchError(`Invalid response body while trying to fetch ${this.url}: ${error_.message}`, "system", error_);
        this[INTERNALS$2].error = error2;
      });
    }
  }
  get body() {
    return this[INTERNALS$2].body;
  }
  get bodyUsed() {
    return this[INTERNALS$2].disturbed;
  }
  async arrayBuffer() {
    const { buffer, byteOffset, byteLength } = await consumeBody(this);
    return buffer.slice(byteOffset, byteOffset + byteLength);
  }
  async blob() {
    const ct = this.headers && this.headers.get("content-type") || this[INTERNALS$2].body && this[INTERNALS$2].body.type || "";
    const buf = await this.buffer();
    return new Blob$1([buf], {
      type: ct
    });
  }
  async json() {
    const buffer = await consumeBody(this);
    return JSON.parse(buffer.toString());
  }
  async text() {
    const buffer = await consumeBody(this);
    return buffer.toString();
  }
  buffer() {
    return consumeBody(this);
  }
};
Object.defineProperties(Body.prototype, {
  body: { enumerable: true },
  bodyUsed: { enumerable: true },
  arrayBuffer: { enumerable: true },
  blob: { enumerable: true },
  json: { enumerable: true },
  text: { enumerable: true }
});
async function consumeBody(data) {
  if (data[INTERNALS$2].disturbed) {
    throw new TypeError(`body used already for: ${data.url}`);
  }
  data[INTERNALS$2].disturbed = true;
  if (data[INTERNALS$2].error) {
    throw data[INTERNALS$2].error;
  }
  let { body } = data;
  if (body === null) {
    return Buffer.alloc(0);
  }
  if (isBlob(body)) {
    body = import_stream.default.Readable.from(body.stream());
  }
  if (Buffer.isBuffer(body)) {
    return body;
  }
  if (!(body instanceof import_stream.default)) {
    return Buffer.alloc(0);
  }
  const accum = [];
  let accumBytes = 0;
  try {
    for await (const chunk of body) {
      if (data.size > 0 && accumBytes + chunk.length > data.size) {
        const error2 = new FetchError(`content size at ${data.url} over limit: ${data.size}`, "max-size");
        body.destroy(error2);
        throw error2;
      }
      accumBytes += chunk.length;
      accum.push(chunk);
    }
  } catch (error2) {
    const error_ = error2 instanceof FetchBaseError ? error2 : new FetchError(`Invalid response body while trying to fetch ${data.url}: ${error2.message}`, "system", error2);
    throw error_;
  }
  if (body.readableEnded === true || body._readableState.ended === true) {
    try {
      if (accum.every((c) => typeof c === "string")) {
        return Buffer.from(accum.join(""));
      }
      return Buffer.concat(accum, accumBytes);
    } catch (error2) {
      throw new FetchError(`Could not create Buffer from response body for ${data.url}: ${error2.message}`, "system", error2);
    }
  } else {
    throw new FetchError(`Premature close of server response while trying to fetch ${data.url}`);
  }
}
var clone = (instance, highWaterMark) => {
  let p1;
  let p2;
  let { body } = instance;
  if (instance.bodyUsed) {
    throw new Error("cannot clone body after it is used");
  }
  if (body instanceof import_stream.default && typeof body.getBoundary !== "function") {
    p1 = new import_stream.PassThrough({ highWaterMark });
    p2 = new import_stream.PassThrough({ highWaterMark });
    body.pipe(p1);
    body.pipe(p2);
    instance[INTERNALS$2].body = p1;
    body = p2;
  }
  return body;
};
var extractContentType = (body, request) => {
  if (body === null) {
    return null;
  }
  if (typeof body === "string") {
    return "text/plain;charset=UTF-8";
  }
  if (isURLSearchParameters(body)) {
    return "application/x-www-form-urlencoded;charset=UTF-8";
  }
  if (isBlob(body)) {
    return body.type || null;
  }
  if (Buffer.isBuffer(body) || import_util.types.isAnyArrayBuffer(body) || ArrayBuffer.isView(body)) {
    return null;
  }
  if (body && typeof body.getBoundary === "function") {
    return `multipart/form-data;boundary=${body.getBoundary()}`;
  }
  if (isFormData(body)) {
    return `multipart/form-data; boundary=${request[INTERNALS$2].boundary}`;
  }
  if (body instanceof import_stream.default) {
    return null;
  }
  return "text/plain;charset=UTF-8";
};
var getTotalBytes = (request) => {
  const { body } = request;
  if (body === null) {
    return 0;
  }
  if (isBlob(body)) {
    return body.size;
  }
  if (Buffer.isBuffer(body)) {
    return body.length;
  }
  if (body && typeof body.getLengthSync === "function") {
    return body.hasKnownLength && body.hasKnownLength() ? body.getLengthSync() : null;
  }
  if (isFormData(body)) {
    return getFormDataLength(request[INTERNALS$2].boundary);
  }
  return null;
};
var writeToStream = (dest, { body }) => {
  if (body === null) {
    dest.end();
  } else if (isBlob(body)) {
    import_stream.default.Readable.from(body.stream()).pipe(dest);
  } else if (Buffer.isBuffer(body)) {
    dest.write(body);
    dest.end();
  } else {
    body.pipe(dest);
  }
};
var validateHeaderName = typeof import_http.default.validateHeaderName === "function" ? import_http.default.validateHeaderName : (name) => {
  if (!/^[\^`\-\w!#$%&'*+.|~]+$/.test(name)) {
    const error2 = new TypeError(`Header name must be a valid HTTP token [${name}]`);
    Object.defineProperty(error2, "code", { value: "ERR_INVALID_HTTP_TOKEN" });
    throw error2;
  }
};
var validateHeaderValue = typeof import_http.default.validateHeaderValue === "function" ? import_http.default.validateHeaderValue : (name, value) => {
  if (/[^\t\u0020-\u007E\u0080-\u00FF]/.test(value)) {
    const error2 = new TypeError(`Invalid character in header content ["${name}"]`);
    Object.defineProperty(error2, "code", { value: "ERR_INVALID_CHAR" });
    throw error2;
  }
};
var Headers = class extends URLSearchParams {
  constructor(init2) {
    let result = [];
    if (init2 instanceof Headers) {
      const raw = init2.raw();
      for (const [name, values] of Object.entries(raw)) {
        result.push(...values.map((value) => [name, value]));
      }
    } else if (init2 == null)
      ;
    else if (typeof init2 === "object" && !import_util.types.isBoxedPrimitive(init2)) {
      const method = init2[Symbol.iterator];
      if (method == null) {
        result.push(...Object.entries(init2));
      } else {
        if (typeof method !== "function") {
          throw new TypeError("Header pairs must be iterable");
        }
        result = [...init2].map((pair) => {
          if (typeof pair !== "object" || import_util.types.isBoxedPrimitive(pair)) {
            throw new TypeError("Each header pair must be an iterable object");
          }
          return [...pair];
        }).map((pair) => {
          if (pair.length !== 2) {
            throw new TypeError("Each header pair must be a name/value tuple");
          }
          return [...pair];
        });
      }
    } else {
      throw new TypeError("Failed to construct 'Headers': The provided value is not of type '(sequence<sequence<ByteString>> or record<ByteString, ByteString>)");
    }
    result = result.length > 0 ? result.map(([name, value]) => {
      validateHeaderName(name);
      validateHeaderValue(name, String(value));
      return [String(name).toLowerCase(), String(value)];
    }) : void 0;
    super(result);
    return new Proxy(this, {
      get(target, p, receiver) {
        switch (p) {
          case "append":
          case "set":
            return (name, value) => {
              validateHeaderName(name);
              validateHeaderValue(name, String(value));
              return URLSearchParams.prototype[p].call(target, String(name).toLowerCase(), String(value));
            };
          case "delete":
          case "has":
          case "getAll":
            return (name) => {
              validateHeaderName(name);
              return URLSearchParams.prototype[p].call(target, String(name).toLowerCase());
            };
          case "keys":
            return () => {
              target.sort();
              return new Set(URLSearchParams.prototype.keys.call(target)).keys();
            };
          default:
            return Reflect.get(target, p, receiver);
        }
      }
    });
  }
  get [Symbol.toStringTag]() {
    return this.constructor.name;
  }
  toString() {
    return Object.prototype.toString.call(this);
  }
  get(name) {
    const values = this.getAll(name);
    if (values.length === 0) {
      return null;
    }
    let value = values.join(", ");
    if (/^content-encoding$/i.test(name)) {
      value = value.toLowerCase();
    }
    return value;
  }
  forEach(callback, thisArg = void 0) {
    for (const name of this.keys()) {
      Reflect.apply(callback, thisArg, [this.get(name), name, this]);
    }
  }
  *values() {
    for (const name of this.keys()) {
      yield this.get(name);
    }
  }
  *entries() {
    for (const name of this.keys()) {
      yield [name, this.get(name)];
    }
  }
  [Symbol.iterator]() {
    return this.entries();
  }
  raw() {
    return [...this.keys()].reduce((result, key) => {
      result[key] = this.getAll(key);
      return result;
    }, {});
  }
  [Symbol.for("nodejs.util.inspect.custom")]() {
    return [...this.keys()].reduce((result, key) => {
      const values = this.getAll(key);
      if (key === "host") {
        result[key] = values[0];
      } else {
        result[key] = values.length > 1 ? values : values[0];
      }
      return result;
    }, {});
  }
};
Object.defineProperties(Headers.prototype, ["get", "entries", "forEach", "values"].reduce((result, property) => {
  result[property] = { enumerable: true };
  return result;
}, {}));
function fromRawHeaders(headers = []) {
  return new Headers(headers.reduce((result, value, index2, array) => {
    if (index2 % 2 === 0) {
      result.push(array.slice(index2, index2 + 2));
    }
    return result;
  }, []).filter(([name, value]) => {
    try {
      validateHeaderName(name);
      validateHeaderValue(name, String(value));
      return true;
    } catch {
      return false;
    }
  }));
}
var redirectStatus = new Set([301, 302, 303, 307, 308]);
var isRedirect = (code) => {
  return redirectStatus.has(code);
};
var INTERNALS$1 = Symbol("Response internals");
var Response = class extends Body {
  constructor(body = null, options2 = {}) {
    super(body, options2);
    const status = options2.status != null ? options2.status : 200;
    const headers = new Headers(options2.headers);
    if (body !== null && !headers.has("Content-Type")) {
      const contentType = extractContentType(body);
      if (contentType) {
        headers.append("Content-Type", contentType);
      }
    }
    this[INTERNALS$1] = {
      type: "default",
      url: options2.url,
      status,
      statusText: options2.statusText || "",
      headers,
      counter: options2.counter,
      highWaterMark: options2.highWaterMark
    };
  }
  get type() {
    return this[INTERNALS$1].type;
  }
  get url() {
    return this[INTERNALS$1].url || "";
  }
  get status() {
    return this[INTERNALS$1].status;
  }
  get ok() {
    return this[INTERNALS$1].status >= 200 && this[INTERNALS$1].status < 300;
  }
  get redirected() {
    return this[INTERNALS$1].counter > 0;
  }
  get statusText() {
    return this[INTERNALS$1].statusText;
  }
  get headers() {
    return this[INTERNALS$1].headers;
  }
  get highWaterMark() {
    return this[INTERNALS$1].highWaterMark;
  }
  clone() {
    return new Response(clone(this, this.highWaterMark), {
      type: this.type,
      url: this.url,
      status: this.status,
      statusText: this.statusText,
      headers: this.headers,
      ok: this.ok,
      redirected: this.redirected,
      size: this.size
    });
  }
  static redirect(url, status = 302) {
    if (!isRedirect(status)) {
      throw new RangeError('Failed to execute "redirect" on "response": Invalid status code');
    }
    return new Response(null, {
      headers: {
        location: new URL(url).toString()
      },
      status
    });
  }
  static error() {
    const response = new Response(null, { status: 0, statusText: "" });
    response[INTERNALS$1].type = "error";
    return response;
  }
  get [Symbol.toStringTag]() {
    return "Response";
  }
};
Object.defineProperties(Response.prototype, {
  type: { enumerable: true },
  url: { enumerable: true },
  status: { enumerable: true },
  ok: { enumerable: true },
  redirected: { enumerable: true },
  statusText: { enumerable: true },
  headers: { enumerable: true },
  clone: { enumerable: true }
});
var getSearch = (parsedURL) => {
  if (parsedURL.search) {
    return parsedURL.search;
  }
  const lastOffset = parsedURL.href.length - 1;
  const hash2 = parsedURL.hash || (parsedURL.href[lastOffset] === "#" ? "#" : "");
  return parsedURL.href[lastOffset - hash2.length] === "?" ? "?" : "";
};
var INTERNALS = Symbol("Request internals");
var isRequest = (object2) => {
  return typeof object2 === "object" && typeof object2[INTERNALS] === "object";
};
var Request = class extends Body {
  constructor(input, init2 = {}) {
    let parsedURL;
    if (isRequest(input)) {
      parsedURL = new URL(input.url);
    } else {
      parsedURL = new URL(input);
      input = {};
    }
    let method = init2.method || input.method || "GET";
    method = method.toUpperCase();
    if ((init2.body != null || isRequest(input)) && input.body !== null && (method === "GET" || method === "HEAD")) {
      throw new TypeError("Request with GET/HEAD method cannot have body");
    }
    const inputBody = init2.body ? init2.body : isRequest(input) && input.body !== null ? clone(input) : null;
    super(inputBody, {
      size: init2.size || input.size || 0
    });
    const headers = new Headers(init2.headers || input.headers || {});
    if (inputBody !== null && !headers.has("Content-Type")) {
      const contentType = extractContentType(inputBody, this);
      if (contentType) {
        headers.append("Content-Type", contentType);
      }
    }
    let signal = isRequest(input) ? input.signal : null;
    if ("signal" in init2) {
      signal = init2.signal;
    }
    if (signal != null && !isAbortSignal(signal)) {
      throw new TypeError("Expected signal to be an instanceof AbortSignal or EventTarget");
    }
    this[INTERNALS] = {
      method,
      redirect: init2.redirect || input.redirect || "follow",
      headers,
      parsedURL,
      signal
    };
    this.follow = init2.follow === void 0 ? input.follow === void 0 ? 20 : input.follow : init2.follow;
    this.compress = init2.compress === void 0 ? input.compress === void 0 ? true : input.compress : init2.compress;
    this.counter = init2.counter || input.counter || 0;
    this.agent = init2.agent || input.agent;
    this.highWaterMark = init2.highWaterMark || input.highWaterMark || 16384;
    this.insecureHTTPParser = init2.insecureHTTPParser || input.insecureHTTPParser || false;
  }
  get method() {
    return this[INTERNALS].method;
  }
  get url() {
    return (0, import_url.format)(this[INTERNALS].parsedURL);
  }
  get headers() {
    return this[INTERNALS].headers;
  }
  get redirect() {
    return this[INTERNALS].redirect;
  }
  get signal() {
    return this[INTERNALS].signal;
  }
  clone() {
    return new Request(this);
  }
  get [Symbol.toStringTag]() {
    return "Request";
  }
};
Object.defineProperties(Request.prototype, {
  method: { enumerable: true },
  url: { enumerable: true },
  headers: { enumerable: true },
  redirect: { enumerable: true },
  clone: { enumerable: true },
  signal: { enumerable: true }
});
var getNodeRequestOptions = (request) => {
  const { parsedURL } = request[INTERNALS];
  const headers = new Headers(request[INTERNALS].headers);
  if (!headers.has("Accept")) {
    headers.set("Accept", "*/*");
  }
  let contentLengthValue = null;
  if (request.body === null && /^(post|put)$/i.test(request.method)) {
    contentLengthValue = "0";
  }
  if (request.body !== null) {
    const totalBytes = getTotalBytes(request);
    if (typeof totalBytes === "number" && !Number.isNaN(totalBytes)) {
      contentLengthValue = String(totalBytes);
    }
  }
  if (contentLengthValue) {
    headers.set("Content-Length", contentLengthValue);
  }
  if (!headers.has("User-Agent")) {
    headers.set("User-Agent", "node-fetch");
  }
  if (request.compress && !headers.has("Accept-Encoding")) {
    headers.set("Accept-Encoding", "gzip,deflate,br");
  }
  let { agent } = request;
  if (typeof agent === "function") {
    agent = agent(parsedURL);
  }
  if (!headers.has("Connection") && !agent) {
    headers.set("Connection", "close");
  }
  const search = getSearch(parsedURL);
  const requestOptions = {
    path: parsedURL.pathname + search,
    pathname: parsedURL.pathname,
    hostname: parsedURL.hostname,
    protocol: parsedURL.protocol,
    port: parsedURL.port,
    hash: parsedURL.hash,
    search: parsedURL.search,
    query: parsedURL.query,
    href: parsedURL.href,
    method: request.method,
    headers: headers[Symbol.for("nodejs.util.inspect.custom")](),
    insecureHTTPParser: request.insecureHTTPParser,
    agent
  };
  return requestOptions;
};
var AbortError = class extends FetchBaseError {
  constructor(message, type = "aborted") {
    super(message, type);
  }
};
var supportedSchemas = new Set(["data:", "http:", "https:"]);
async function fetch(url, options_) {
  return new Promise((resolve2, reject) => {
    const request = new Request(url, options_);
    const options2 = getNodeRequestOptions(request);
    if (!supportedSchemas.has(options2.protocol)) {
      throw new TypeError(`node-fetch cannot load ${url}. URL scheme "${options2.protocol.replace(/:$/, "")}" is not supported.`);
    }
    if (options2.protocol === "data:") {
      const data = dataUriToBuffer$1(request.url);
      const response2 = new Response(data, { headers: { "Content-Type": data.typeFull } });
      resolve2(response2);
      return;
    }
    const send = (options2.protocol === "https:" ? import_https.default : import_http.default).request;
    const { signal } = request;
    let response = null;
    const abort = () => {
      const error2 = new AbortError("The operation was aborted.");
      reject(error2);
      if (request.body && request.body instanceof import_stream.default.Readable) {
        request.body.destroy(error2);
      }
      if (!response || !response.body) {
        return;
      }
      response.body.emit("error", error2);
    };
    if (signal && signal.aborted) {
      abort();
      return;
    }
    const abortAndFinalize = () => {
      abort();
      finalize();
    };
    const request_ = send(options2);
    if (signal) {
      signal.addEventListener("abort", abortAndFinalize);
    }
    const finalize = () => {
      request_.abort();
      if (signal) {
        signal.removeEventListener("abort", abortAndFinalize);
      }
    };
    request_.on("error", (error2) => {
      reject(new FetchError(`request to ${request.url} failed, reason: ${error2.message}`, "system", error2));
      finalize();
    });
    fixResponseChunkedTransferBadEnding(request_, (error2) => {
      response.body.destroy(error2);
    });
    if (process.version < "v14") {
      request_.on("socket", (s2) => {
        let endedWithEventsCount;
        s2.prependListener("end", () => {
          endedWithEventsCount = s2._eventsCount;
        });
        s2.prependListener("close", (hadError) => {
          if (response && endedWithEventsCount < s2._eventsCount && !hadError) {
            const error2 = new Error("Premature close");
            error2.code = "ERR_STREAM_PREMATURE_CLOSE";
            response.body.emit("error", error2);
          }
        });
      });
    }
    request_.on("response", (response_) => {
      request_.setTimeout(0);
      const headers = fromRawHeaders(response_.rawHeaders);
      if (isRedirect(response_.statusCode)) {
        const location = headers.get("Location");
        const locationURL = location === null ? null : new URL(location, request.url);
        switch (request.redirect) {
          case "error":
            reject(new FetchError(`uri requested responds with a redirect, redirect mode is set to error: ${request.url}`, "no-redirect"));
            finalize();
            return;
          case "manual":
            if (locationURL !== null) {
              headers.set("Location", locationURL);
            }
            break;
          case "follow": {
            if (locationURL === null) {
              break;
            }
            if (request.counter >= request.follow) {
              reject(new FetchError(`maximum redirect reached at: ${request.url}`, "max-redirect"));
              finalize();
              return;
            }
            const requestOptions = {
              headers: new Headers(request.headers),
              follow: request.follow,
              counter: request.counter + 1,
              agent: request.agent,
              compress: request.compress,
              method: request.method,
              body: request.body,
              signal: request.signal,
              size: request.size
            };
            if (response_.statusCode !== 303 && request.body && options_.body instanceof import_stream.default.Readable) {
              reject(new FetchError("Cannot follow redirect with body being a readable stream", "unsupported-redirect"));
              finalize();
              return;
            }
            if (response_.statusCode === 303 || (response_.statusCode === 301 || response_.statusCode === 302) && request.method === "POST") {
              requestOptions.method = "GET";
              requestOptions.body = void 0;
              requestOptions.headers.delete("content-length");
            }
            resolve2(fetch(new Request(locationURL, requestOptions)));
            finalize();
            return;
          }
          default:
            return reject(new TypeError(`Redirect option '${request.redirect}' is not a valid value of RequestRedirect`));
        }
      }
      if (signal) {
        response_.once("end", () => {
          signal.removeEventListener("abort", abortAndFinalize);
        });
      }
      let body = (0, import_stream.pipeline)(response_, new import_stream.PassThrough(), reject);
      if (process.version < "v12.10") {
        response_.on("aborted", abortAndFinalize);
      }
      const responseOptions = {
        url: request.url,
        status: response_.statusCode,
        statusText: response_.statusMessage,
        headers,
        size: request.size,
        counter: request.counter,
        highWaterMark: request.highWaterMark
      };
      const codings = headers.get("Content-Encoding");
      if (!request.compress || request.method === "HEAD" || codings === null || response_.statusCode === 204 || response_.statusCode === 304) {
        response = new Response(body, responseOptions);
        resolve2(response);
        return;
      }
      const zlibOptions = {
        flush: import_zlib.default.Z_SYNC_FLUSH,
        finishFlush: import_zlib.default.Z_SYNC_FLUSH
      };
      if (codings === "gzip" || codings === "x-gzip") {
        body = (0, import_stream.pipeline)(body, import_zlib.default.createGunzip(zlibOptions), reject);
        response = new Response(body, responseOptions);
        resolve2(response);
        return;
      }
      if (codings === "deflate" || codings === "x-deflate") {
        const raw = (0, import_stream.pipeline)(response_, new import_stream.PassThrough(), reject);
        raw.once("data", (chunk) => {
          body = (chunk[0] & 15) === 8 ? (0, import_stream.pipeline)(body, import_zlib.default.createInflate(), reject) : (0, import_stream.pipeline)(body, import_zlib.default.createInflateRaw(), reject);
          response = new Response(body, responseOptions);
          resolve2(response);
        });
        return;
      }
      if (codings === "br") {
        body = (0, import_stream.pipeline)(body, import_zlib.default.createBrotliDecompress(), reject);
        response = new Response(body, responseOptions);
        resolve2(response);
        return;
      }
      response = new Response(body, responseOptions);
      resolve2(response);
    });
    writeToStream(request_, request);
  });
}
function fixResponseChunkedTransferBadEnding(request, errorCallback) {
  const LAST_CHUNK = Buffer.from("0\r\n\r\n");
  let isChunkedTransfer = false;
  let properLastChunkReceived = false;
  let previousChunk;
  request.on("response", (response) => {
    const { headers } = response;
    isChunkedTransfer = headers["transfer-encoding"] === "chunked" && !headers["content-length"];
  });
  request.on("socket", (socket) => {
    const onSocketClose = () => {
      if (isChunkedTransfer && !properLastChunkReceived) {
        const error2 = new Error("Premature close");
        error2.code = "ERR_STREAM_PREMATURE_CLOSE";
        errorCallback(error2);
      }
    };
    socket.prependListener("close", onSocketClose);
    request.on("abort", () => {
      socket.removeListener("close", onSocketClose);
    });
    socket.on("data", (buf) => {
      properLastChunkReceived = Buffer.compare(buf.slice(-5), LAST_CHUNK) === 0;
      if (!properLastChunkReceived && previousChunk) {
        properLastChunkReceived = Buffer.compare(previousChunk.slice(-3), LAST_CHUNK.slice(0, 3)) === 0 && Buffer.compare(buf.slice(-2), LAST_CHUNK.slice(3)) === 0;
      }
      previousChunk = buf;
    });
  });
}

// .svelte-kit/output/server/app.js
var __accessCheck = (obj, member, msg) => {
  if (!member.has(obj))
    throw TypeError("Cannot " + msg);
};
var __privateGet = (obj, member, getter) => {
  __accessCheck(obj, member, "read from private field");
  return getter ? getter.call(obj) : member.get(obj);
};
var __privateAdd = (obj, member, value) => {
  if (member.has(obj))
    throw TypeError("Cannot add the same private member more than once");
  member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
};
var __privateSet = (obj, member, value, setter) => {
  __accessCheck(obj, member, "write to private field");
  setter ? setter.call(obj, value) : member.set(obj, value);
  return value;
};
var _map;
function get_single_valued_header(headers, key) {
  const value = headers[key];
  if (Array.isArray(value)) {
    if (value.length === 0) {
      return void 0;
    }
    if (value.length > 1) {
      throw new Error(`Multiple headers provided for ${key}. Multiple may be provided only for set-cookie`);
    }
    return value[0];
  }
  return value;
}
function coalesce_to_error(err) {
  return err instanceof Error || err && err.name && err.message ? err : new Error(JSON.stringify(err));
}
function lowercase_keys(obj) {
  const clone2 = {};
  for (const key in obj) {
    clone2[key.toLowerCase()] = obj[key];
  }
  return clone2;
}
function error(body) {
  return {
    status: 500,
    body,
    headers: {}
  };
}
function is_string(s2) {
  return typeof s2 === "string" || s2 instanceof String;
}
function is_content_type_textual(content_type) {
  if (!content_type)
    return true;
  const [type] = content_type.split(";");
  return type === "text/plain" || type === "application/json" || type === "application/x-www-form-urlencoded" || type === "multipart/form-data";
}
async function render_endpoint(request, route, match) {
  const mod = await route.load();
  const handler2 = mod[request.method.toLowerCase().replace("delete", "del")];
  if (!handler2) {
    return;
  }
  const params = route.params(match);
  const response = await handler2({ ...request, params });
  const preface = `Invalid response from route ${request.path}`;
  if (!response) {
    return;
  }
  if (typeof response !== "object") {
    return error(`${preface}: expected an object, got ${typeof response}`);
  }
  let { status = 200, body, headers = {} } = response;
  headers = lowercase_keys(headers);
  const type = get_single_valued_header(headers, "content-type");
  const is_type_textual = is_content_type_textual(type);
  if (!is_type_textual && !(body instanceof Uint8Array || is_string(body))) {
    return error(`${preface}: body must be an instance of string or Uint8Array if content-type is not a supported textual content-type`);
  }
  let normalized_body;
  if ((typeof body === "object" || typeof body === "undefined") && !(body instanceof Uint8Array) && (!type || type.startsWith("application/json"))) {
    headers = { ...headers, "content-type": "application/json; charset=utf-8" };
    normalized_body = JSON.stringify(typeof body === "undefined" ? {} : body);
  } else {
    normalized_body = body;
  }
  return { status, body: normalized_body, headers };
}
var chars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_$";
var unsafeChars = /[<>\b\f\n\r\t\0\u2028\u2029]/g;
var reserved = /^(?:do|if|in|for|int|let|new|try|var|byte|case|char|else|enum|goto|long|this|void|with|await|break|catch|class|const|final|float|short|super|throw|while|yield|delete|double|export|import|native|return|switch|throws|typeof|boolean|default|extends|finally|package|private|abstract|continue|debugger|function|volatile|interface|protected|transient|implements|instanceof|synchronized)$/;
var escaped$1 = {
  "<": "\\u003C",
  ">": "\\u003E",
  "/": "\\u002F",
  "\\": "\\\\",
  "\b": "\\b",
  "\f": "\\f",
  "\n": "\\n",
  "\r": "\\r",
  "	": "\\t",
  "\0": "\\0",
  "\u2028": "\\u2028",
  "\u2029": "\\u2029"
};
var objectProtoOwnPropertyNames = Object.getOwnPropertyNames(Object.prototype).sort().join("\0");
function devalue(value) {
  var counts = new Map();
  function walk(thing) {
    if (typeof thing === "function") {
      throw new Error("Cannot stringify a function");
    }
    if (counts.has(thing)) {
      counts.set(thing, counts.get(thing) + 1);
      return;
    }
    counts.set(thing, 1);
    if (!isPrimitive(thing)) {
      var type = getType(thing);
      switch (type) {
        case "Number":
        case "String":
        case "Boolean":
        case "Date":
        case "RegExp":
          return;
        case "Array":
          thing.forEach(walk);
          break;
        case "Set":
        case "Map":
          Array.from(thing).forEach(walk);
          break;
        default:
          var proto = Object.getPrototypeOf(thing);
          if (proto !== Object.prototype && proto !== null && Object.getOwnPropertyNames(proto).sort().join("\0") !== objectProtoOwnPropertyNames) {
            throw new Error("Cannot stringify arbitrary non-POJOs");
          }
          if (Object.getOwnPropertySymbols(thing).length > 0) {
            throw new Error("Cannot stringify POJOs with symbolic keys");
          }
          Object.keys(thing).forEach(function(key) {
            return walk(thing[key]);
          });
      }
    }
  }
  walk(value);
  var names = new Map();
  Array.from(counts).filter(function(entry) {
    return entry[1] > 1;
  }).sort(function(a, b) {
    return b[1] - a[1];
  }).forEach(function(entry, i) {
    names.set(entry[0], getName(i));
  });
  function stringify(thing) {
    if (names.has(thing)) {
      return names.get(thing);
    }
    if (isPrimitive(thing)) {
      return stringifyPrimitive(thing);
    }
    var type = getType(thing);
    switch (type) {
      case "Number":
      case "String":
      case "Boolean":
        return "Object(" + stringify(thing.valueOf()) + ")";
      case "RegExp":
        return "new RegExp(" + stringifyString(thing.source) + ', "' + thing.flags + '")';
      case "Date":
        return "new Date(" + thing.getTime() + ")";
      case "Array":
        var members = thing.map(function(v, i) {
          return i in thing ? stringify(v) : "";
        });
        var tail = thing.length === 0 || thing.length - 1 in thing ? "" : ",";
        return "[" + members.join(",") + tail + "]";
      case "Set":
      case "Map":
        return "new " + type + "([" + Array.from(thing).map(stringify).join(",") + "])";
      default:
        var obj = "{" + Object.keys(thing).map(function(key) {
          return safeKey(key) + ":" + stringify(thing[key]);
        }).join(",") + "}";
        var proto = Object.getPrototypeOf(thing);
        if (proto === null) {
          return Object.keys(thing).length > 0 ? "Object.assign(Object.create(null)," + obj + ")" : "Object.create(null)";
        }
        return obj;
    }
  }
  var str = stringify(value);
  if (names.size) {
    var params_1 = [];
    var statements_1 = [];
    var values_1 = [];
    names.forEach(function(name, thing) {
      params_1.push(name);
      if (isPrimitive(thing)) {
        values_1.push(stringifyPrimitive(thing));
        return;
      }
      var type = getType(thing);
      switch (type) {
        case "Number":
        case "String":
        case "Boolean":
          values_1.push("Object(" + stringify(thing.valueOf()) + ")");
          break;
        case "RegExp":
          values_1.push(thing.toString());
          break;
        case "Date":
          values_1.push("new Date(" + thing.getTime() + ")");
          break;
        case "Array":
          values_1.push("Array(" + thing.length + ")");
          thing.forEach(function(v, i) {
            statements_1.push(name + "[" + i + "]=" + stringify(v));
          });
          break;
        case "Set":
          values_1.push("new Set");
          statements_1.push(name + "." + Array.from(thing).map(function(v) {
            return "add(" + stringify(v) + ")";
          }).join("."));
          break;
        case "Map":
          values_1.push("new Map");
          statements_1.push(name + "." + Array.from(thing).map(function(_a) {
            var k = _a[0], v = _a[1];
            return "set(" + stringify(k) + ", " + stringify(v) + ")";
          }).join("."));
          break;
        default:
          values_1.push(Object.getPrototypeOf(thing) === null ? "Object.create(null)" : "{}");
          Object.keys(thing).forEach(function(key) {
            statements_1.push("" + name + safeProp(key) + "=" + stringify(thing[key]));
          });
      }
    });
    statements_1.push("return " + str);
    return "(function(" + params_1.join(",") + "){" + statements_1.join(";") + "}(" + values_1.join(",") + "))";
  } else {
    return str;
  }
}
function getName(num) {
  var name = "";
  do {
    name = chars[num % chars.length] + name;
    num = ~~(num / chars.length) - 1;
  } while (num >= 0);
  return reserved.test(name) ? name + "_" : name;
}
function isPrimitive(thing) {
  return Object(thing) !== thing;
}
function stringifyPrimitive(thing) {
  if (typeof thing === "string")
    return stringifyString(thing);
  if (thing === void 0)
    return "void 0";
  if (thing === 0 && 1 / thing < 0)
    return "-0";
  var str = String(thing);
  if (typeof thing === "number")
    return str.replace(/^(-)?0\./, "$1.");
  return str;
}
function getType(thing) {
  return Object.prototype.toString.call(thing).slice(8, -1);
}
function escapeUnsafeChar(c) {
  return escaped$1[c] || c;
}
function escapeUnsafeChars(str) {
  return str.replace(unsafeChars, escapeUnsafeChar);
}
function safeKey(key) {
  return /^[_$a-zA-Z][_$a-zA-Z0-9]*$/.test(key) ? key : escapeUnsafeChars(JSON.stringify(key));
}
function safeProp(key) {
  return /^[_$a-zA-Z][_$a-zA-Z0-9]*$/.test(key) ? "." + key : "[" + escapeUnsafeChars(JSON.stringify(key)) + "]";
}
function stringifyString(str) {
  var result = '"';
  for (var i = 0; i < str.length; i += 1) {
    var char = str.charAt(i);
    var code2 = char.charCodeAt(0);
    if (char === '"') {
      result += '\\"';
    } else if (char in escaped$1) {
      result += escaped$1[char];
    } else if (code2 >= 55296 && code2 <= 57343) {
      var next = str.charCodeAt(i + 1);
      if (code2 <= 56319 && (next >= 56320 && next <= 57343)) {
        result += char + str[++i];
      } else {
        result += "\\u" + code2.toString(16).toUpperCase();
      }
    } else {
      result += char;
    }
  }
  result += '"';
  return result;
}
function noop$1() {
}
function safe_not_equal$1(a, b) {
  return a != a ? b == b : a !== b || (a && typeof a === "object" || typeof a === "function");
}
Promise.resolve();
var subscriber_queue$1 = [];
function writable$1(value, start = noop$1) {
  let stop;
  const subscribers = new Set();
  function set(new_value) {
    if (safe_not_equal$1(value, new_value)) {
      value = new_value;
      if (stop) {
        const run_queue = !subscriber_queue$1.length;
        for (const subscriber of subscribers) {
          subscriber[1]();
          subscriber_queue$1.push(subscriber, value);
        }
        if (run_queue) {
          for (let i = 0; i < subscriber_queue$1.length; i += 2) {
            subscriber_queue$1[i][0](subscriber_queue$1[i + 1]);
          }
          subscriber_queue$1.length = 0;
        }
      }
    }
  }
  function update(fn) {
    set(fn(value));
  }
  function subscribe2(run2, invalidate = noop$1) {
    const subscriber = [run2, invalidate];
    subscribers.add(subscriber);
    if (subscribers.size === 1) {
      stop = start(set) || noop$1;
    }
    run2(value);
    return () => {
      subscribers.delete(subscriber);
      if (subscribers.size === 0) {
        stop();
        stop = null;
      }
    };
  }
  return { set, update, subscribe: subscribe2 };
}
function hash(value) {
  let hash2 = 5381;
  let i = value.length;
  if (typeof value === "string") {
    while (i)
      hash2 = hash2 * 33 ^ value.charCodeAt(--i);
  } else {
    while (i)
      hash2 = hash2 * 33 ^ value[--i];
  }
  return (hash2 >>> 0).toString(36);
}
var s$1 = JSON.stringify;
async function render_response({
  branch,
  options: options2,
  $session,
  page_config,
  status,
  error: error2,
  page: page2
}) {
  const css2 = new Set(options2.entry.css);
  const js = new Set(options2.entry.js);
  const styles = new Set();
  const serialized_data = [];
  let rendered;
  let is_private = false;
  let maxage;
  if (error2) {
    error2.stack = options2.get_stack(error2);
  }
  if (page_config.ssr) {
    branch.forEach(({ node, loaded, fetched, uses_credentials }) => {
      if (node.css)
        node.css.forEach((url) => css2.add(url));
      if (node.js)
        node.js.forEach((url) => js.add(url));
      if (node.styles)
        node.styles.forEach((content) => styles.add(content));
      if (fetched && page_config.hydrate)
        serialized_data.push(...fetched);
      if (uses_credentials)
        is_private = true;
      maxage = loaded.maxage;
    });
    const session = writable$1($session);
    const props = {
      stores: {
        page: writable$1(null),
        navigating: writable$1(null),
        session
      },
      page: page2,
      components: branch.map(({ node }) => node.module.default)
    };
    for (let i = 0; i < branch.length; i += 1) {
      props[`props_${i}`] = await branch[i].loaded.props;
    }
    let session_tracking_active = false;
    const unsubscribe = session.subscribe(() => {
      if (session_tracking_active)
        is_private = true;
    });
    session_tracking_active = true;
    try {
      rendered = options2.root.render(props);
    } finally {
      unsubscribe();
    }
  } else {
    rendered = { head: "", html: "", css: { code: "", map: null } };
  }
  const include_js = page_config.router || page_config.hydrate;
  if (!include_js)
    js.clear();
  const links = options2.amp ? styles.size > 0 || rendered.css.code.length > 0 ? `<style amp-custom>${Array.from(styles).concat(rendered.css.code).join("\n")}</style>` : "" : [
    ...Array.from(js).map((dep) => `<link rel="modulepreload" href="${dep}">`),
    ...Array.from(css2).map((dep) => `<link rel="stylesheet" href="${dep}">`)
  ].join("\n		");
  let init2 = "";
  if (options2.amp) {
    init2 = `
		<style amp-boilerplate>body{-webkit-animation:-amp-start 8s steps(1,end) 0s 1 normal both;-moz-animation:-amp-start 8s steps(1,end) 0s 1 normal both;-ms-animation:-amp-start 8s steps(1,end) 0s 1 normal both;animation:-amp-start 8s steps(1,end) 0s 1 normal both}@-webkit-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@-moz-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@-ms-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@-o-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}</style>
		<noscript><style amp-boilerplate>body{-webkit-animation:none;-moz-animation:none;-ms-animation:none;animation:none}</style></noscript>
		<script async src="https://cdn.ampproject.org/v0.js"><\/script>`;
  } else if (include_js) {
    init2 = `<script type="module">
			import { start } from ${s$1(options2.entry.file)};
			start({
				target: ${options2.target ? `document.querySelector(${s$1(options2.target)})` : "document.body"},
				paths: ${s$1(options2.paths)},
				session: ${try_serialize($session, (error3) => {
      throw new Error(`Failed to serialize session data: ${error3.message}`);
    })},
				host: ${page2 && page2.host ? s$1(page2.host) : "location.host"},
				route: ${!!page_config.router},
				spa: ${!page_config.ssr},
				trailing_slash: ${s$1(options2.trailing_slash)},
				hydrate: ${page_config.ssr && page_config.hydrate ? `{
					status: ${status},
					error: ${serialize_error(error2)},
					nodes: [
						${(branch || []).map(({ node }) => `import(${s$1(node.entry)})`).join(",\n						")}
					],
					page: {
						host: ${page2 && page2.host ? s$1(page2.host) : "location.host"}, // TODO this is redundant
						path: ${s$1(page2 && page2.path)},
						query: new URLSearchParams(${page2 ? s$1(page2.query.toString()) : ""}),
						params: ${page2 && s$1(page2.params)}
					}
				}` : "null"}
			});
		<\/script>`;
  }
  if (options2.service_worker) {
    init2 += `<script>
			if ('serviceWorker' in navigator) {
				navigator.serviceWorker.register('${options2.service_worker}');
			}
		<\/script>`;
  }
  const head = [
    rendered.head,
    styles.size && !options2.amp ? `<style data-svelte>${Array.from(styles).join("\n")}</style>` : "",
    links,
    init2
  ].join("\n\n		");
  const body = options2.amp ? rendered.html : `${rendered.html}

			${serialized_data.map(({ url, body: body2, json }) => {
    let attributes = `type="application/json" data-type="svelte-data" data-url="${url}"`;
    if (body2)
      attributes += ` data-body="${hash(body2)}"`;
    return `<script ${attributes}>${json}<\/script>`;
  }).join("\n\n	")}
		`;
  const headers = {
    "content-type": "text/html"
  };
  if (maxage) {
    headers["cache-control"] = `${is_private ? "private" : "public"}, max-age=${maxage}`;
  }
  if (!options2.floc) {
    headers["permissions-policy"] = "interest-cohort=()";
  }
  return {
    status,
    headers,
    body: options2.template({ head, body })
  };
}
function try_serialize(data, fail) {
  try {
    return devalue(data);
  } catch (err) {
    if (fail)
      fail(coalesce_to_error(err));
    return null;
  }
}
function serialize_error(error2) {
  if (!error2)
    return null;
  let serialized = try_serialize(error2);
  if (!serialized) {
    const { name, message, stack } = error2;
    serialized = try_serialize({ ...error2, name, message, stack });
  }
  if (!serialized) {
    serialized = "{}";
  }
  return serialized;
}
function normalize$1(loaded) {
  const has_error_status = loaded.status && loaded.status >= 400 && loaded.status <= 599 && !loaded.redirect;
  if (loaded.error || has_error_status) {
    const status = loaded.status;
    if (!loaded.error && has_error_status) {
      return {
        status: status || 500,
        error: new Error()
      };
    }
    const error2 = typeof loaded.error === "string" ? new Error(loaded.error) : loaded.error;
    if (!(error2 instanceof Error)) {
      return {
        status: 500,
        error: new Error(`"error" property returned from load() must be a string or instance of Error, received type "${typeof error2}"`)
      };
    }
    if (!status || status < 400 || status > 599) {
      console.warn('"error" returned from load() without a valid status code \u2014 defaulting to 500');
      return { status: 500, error: error2 };
    }
    return { status, error: error2 };
  }
  if (loaded.redirect) {
    if (!loaded.status || Math.floor(loaded.status / 100) !== 3) {
      return {
        status: 500,
        error: new Error('"redirect" property returned from load() must be accompanied by a 3xx status code')
      };
    }
    if (typeof loaded.redirect !== "string") {
      return {
        status: 500,
        error: new Error('"redirect" property returned from load() must be a string')
      };
    }
  }
  if (loaded.context) {
    throw new Error('You are returning "context" from a load function. "context" was renamed to "stuff", please adjust your code accordingly.');
  }
  return loaded;
}
var s = JSON.stringify;
async function load_node({
  request,
  options: options2,
  state,
  route,
  page: page2,
  node,
  $session,
  stuff,
  prerender_enabled,
  is_leaf,
  is_error,
  status,
  error: error2
}) {
  const { module: module2 } = node;
  let uses_credentials = false;
  const fetched = [];
  let set_cookie_headers = [];
  let loaded;
  const page_proxy = new Proxy(page2, {
    get: (target, prop, receiver) => {
      if (prop === "query" && prerender_enabled) {
        throw new Error("Cannot access query on a page with prerendering enabled");
      }
      return Reflect.get(target, prop, receiver);
    }
  });
  if (module2.load) {
    const load_input = {
      page: page_proxy,
      get session() {
        uses_credentials = true;
        return $session;
      },
      fetch: async (resource, opts = {}) => {
        let url;
        if (typeof resource === "string") {
          url = resource;
        } else {
          url = resource.url;
          opts = {
            method: resource.method,
            headers: resource.headers,
            body: resource.body,
            mode: resource.mode,
            credentials: resource.credentials,
            cache: resource.cache,
            redirect: resource.redirect,
            referrer: resource.referrer,
            integrity: resource.integrity,
            ...opts
          };
        }
        const resolved = resolve(request.path, url.split("?")[0]);
        let response;
        const filename = resolved.replace(options2.paths.assets, "").slice(1);
        const filename_html = `${filename}/index.html`;
        const asset = options2.manifest.assets.find((d) => d.file === filename || d.file === filename_html);
        if (asset) {
          response = options2.read ? new Response(options2.read(asset.file), {
            headers: asset.type ? { "content-type": asset.type } : {}
          }) : await fetch(`http://${page2.host}/${asset.file}`, opts);
        } else if (resolved.startsWith("/") && !resolved.startsWith("//")) {
          const relative = resolved;
          const headers = {
            ...opts.headers
          };
          if (opts.credentials !== "omit") {
            uses_credentials = true;
            headers.cookie = request.headers.cookie;
            if (!headers.authorization) {
              headers.authorization = request.headers.authorization;
            }
          }
          if (opts.body && typeof opts.body !== "string") {
            throw new Error("Request body must be a string");
          }
          const search = url.includes("?") ? url.slice(url.indexOf("?") + 1) : "";
          const rendered = await respond({
            host: request.host,
            method: opts.method || "GET",
            headers,
            path: relative,
            rawBody: opts.body == null ? null : new TextEncoder().encode(opts.body),
            query: new URLSearchParams(search)
          }, options2, {
            fetched: url,
            initiator: route
          });
          if (rendered) {
            if (state.prerender) {
              state.prerender.dependencies.set(relative, rendered);
            }
            response = new Response(rendered.body, {
              status: rendered.status,
              headers: rendered.headers
            });
          }
        } else {
          if (resolved.startsWith("//")) {
            throw new Error(`Cannot request protocol-relative URL (${url}) in server-side fetch`);
          }
          if (typeof request.host !== "undefined") {
            const { hostname: fetch_hostname } = new URL(url);
            const [server_hostname] = request.host.split(":");
            if (`.${fetch_hostname}`.endsWith(`.${server_hostname}`) && opts.credentials !== "omit") {
              uses_credentials = true;
              opts.headers = {
                ...opts.headers,
                cookie: request.headers.cookie
              };
            }
          }
          const external_request = new Request(url, opts);
          response = await options2.hooks.externalFetch.call(null, external_request);
        }
        if (response) {
          const proxy = new Proxy(response, {
            get(response2, key, receiver) {
              async function text() {
                const body = await response2.text();
                const headers = {};
                for (const [key2, value] of response2.headers) {
                  if (key2 === "set-cookie") {
                    set_cookie_headers = set_cookie_headers.concat(value);
                  } else if (key2 !== "etag") {
                    headers[key2] = value;
                  }
                }
                if (!opts.body || typeof opts.body === "string") {
                  fetched.push({
                    url,
                    body: opts.body,
                    json: `{"status":${response2.status},"statusText":${s(response2.statusText)},"headers":${s(headers)},"body":${escape$1(body)}}`
                  });
                }
                return body;
              }
              if (key === "text") {
                return text;
              }
              if (key === "json") {
                return async () => {
                  return JSON.parse(await text());
                };
              }
              return Reflect.get(response2, key, response2);
            }
          });
          return proxy;
        }
        return response || new Response("Not found", {
          status: 404
        });
      },
      stuff: { ...stuff }
    };
    if (is_error) {
      load_input.status = status;
      load_input.error = error2;
    }
    loaded = await module2.load.call(null, load_input);
  } else {
    loaded = {};
  }
  if (!loaded && is_leaf && !is_error)
    return;
  if (!loaded) {
    throw new Error(`${node.entry} - load must return a value except for page fall through`);
  }
  return {
    node,
    loaded: normalize$1(loaded),
    stuff: loaded.stuff || stuff,
    fetched,
    set_cookie_headers,
    uses_credentials
  };
}
var escaped$2 = {
  "<": "\\u003C",
  ">": "\\u003E",
  "/": "\\u002F",
  "\\": "\\\\",
  "\b": "\\b",
  "\f": "\\f",
  "\n": "\\n",
  "\r": "\\r",
  "	": "\\t",
  "\0": "\\0",
  "\u2028": "\\u2028",
  "\u2029": "\\u2029"
};
function escape$1(str) {
  let result = '"';
  for (let i = 0; i < str.length; i += 1) {
    const char = str.charAt(i);
    const code2 = char.charCodeAt(0);
    if (char === '"') {
      result += '\\"';
    } else if (char in escaped$2) {
      result += escaped$2[char];
    } else if (code2 >= 55296 && code2 <= 57343) {
      const next = str.charCodeAt(i + 1);
      if (code2 <= 56319 && next >= 56320 && next <= 57343) {
        result += char + str[++i];
      } else {
        result += `\\u${code2.toString(16).toUpperCase()}`;
      }
    } else {
      result += char;
    }
  }
  result += '"';
  return result;
}
var absolute = /^([a-z]+:)?\/?\//;
function resolve(base2, path) {
  const base_match = absolute.exec(base2);
  const path_match = absolute.exec(path);
  if (!base_match) {
    throw new Error(`bad base path: "${base2}"`);
  }
  const baseparts = path_match ? [] : base2.slice(base_match[0].length).split("/");
  const pathparts = path_match ? path.slice(path_match[0].length).split("/") : path.split("/");
  baseparts.pop();
  for (let i = 0; i < pathparts.length; i += 1) {
    const part = pathparts[i];
    if (part === ".")
      continue;
    else if (part === "..")
      baseparts.pop();
    else
      baseparts.push(part);
  }
  const prefix = path_match && path_match[0] || base_match && base_match[0] || "";
  return `${prefix}${baseparts.join("/")}`;
}
async function respond_with_error({ request, options: options2, state, $session, status, error: error2 }) {
  const default_layout = await options2.load_component(options2.manifest.layout);
  const default_error = await options2.load_component(options2.manifest.error);
  const page2 = {
    host: request.host,
    path: request.path,
    query: request.query,
    params: {}
  };
  const loaded = await load_node({
    request,
    options: options2,
    state,
    route: null,
    page: page2,
    node: default_layout,
    $session,
    stuff: {},
    prerender_enabled: is_prerender_enabled(options2, default_error, state),
    is_leaf: false,
    is_error: false
  });
  const branch = [
    loaded,
    await load_node({
      request,
      options: options2,
      state,
      route: null,
      page: page2,
      node: default_error,
      $session,
      stuff: loaded ? loaded.stuff : {},
      prerender_enabled: is_prerender_enabled(options2, default_error, state),
      is_leaf: false,
      is_error: true,
      status,
      error: error2
    })
  ];
  try {
    return await render_response({
      options: options2,
      $session,
      page_config: {
        hydrate: options2.hydrate,
        router: options2.router,
        ssr: options2.ssr
      },
      status,
      error: error2,
      branch,
      page: page2
    });
  } catch (err) {
    const error3 = coalesce_to_error(err);
    options2.handle_error(error3, request);
    return {
      status: 500,
      headers: {},
      body: error3.stack
    };
  }
}
function is_prerender_enabled(options2, node, state) {
  return options2.prerender && (!!node.module.prerender || !!state.prerender && state.prerender.all);
}
async function respond$1(opts) {
  const { request, options: options2, state, $session, route } = opts;
  let nodes;
  try {
    nodes = await Promise.all(route.a.map((id) => id ? options2.load_component(id) : void 0));
  } catch (err) {
    const error3 = coalesce_to_error(err);
    options2.handle_error(error3, request);
    return await respond_with_error({
      request,
      options: options2,
      state,
      $session,
      status: 500,
      error: error3
    });
  }
  const leaf = nodes[nodes.length - 1].module;
  let page_config = get_page_config(leaf, options2);
  if (!leaf.prerender && state.prerender && !state.prerender.all) {
    return {
      status: 204,
      headers: {},
      body: ""
    };
  }
  let branch = [];
  let status = 200;
  let error2;
  let set_cookie_headers = [];
  ssr:
    if (page_config.ssr) {
      let stuff = {};
      for (let i = 0; i < nodes.length; i += 1) {
        const node = nodes[i];
        let loaded;
        if (node) {
          try {
            loaded = await load_node({
              ...opts,
              node,
              stuff,
              prerender_enabled: is_prerender_enabled(options2, node, state),
              is_leaf: i === nodes.length - 1,
              is_error: false
            });
            if (!loaded)
              return;
            set_cookie_headers = set_cookie_headers.concat(loaded.set_cookie_headers);
            if (loaded.loaded.redirect) {
              return with_cookies({
                status: loaded.loaded.status,
                headers: {
                  location: encodeURI(loaded.loaded.redirect)
                }
              }, set_cookie_headers);
            }
            if (loaded.loaded.error) {
              ({ status, error: error2 } = loaded.loaded);
            }
          } catch (err) {
            const e = coalesce_to_error(err);
            options2.handle_error(e, request);
            status = 500;
            error2 = e;
          }
          if (loaded && !error2) {
            branch.push(loaded);
          }
          if (error2) {
            while (i--) {
              if (route.b[i]) {
                const error_node = await options2.load_component(route.b[i]);
                let node_loaded;
                let j = i;
                while (!(node_loaded = branch[j])) {
                  j -= 1;
                }
                try {
                  const error_loaded = await load_node({
                    ...opts,
                    node: error_node,
                    stuff: node_loaded.stuff,
                    prerender_enabled: is_prerender_enabled(options2, error_node, state),
                    is_leaf: false,
                    is_error: true,
                    status,
                    error: error2
                  });
                  if (error_loaded.loaded.error) {
                    continue;
                  }
                  page_config = get_page_config(error_node.module, options2);
                  branch = branch.slice(0, j + 1).concat(error_loaded);
                  break ssr;
                } catch (err) {
                  const e = coalesce_to_error(err);
                  options2.handle_error(e, request);
                  continue;
                }
              }
            }
            return with_cookies(await respond_with_error({
              request,
              options: options2,
              state,
              $session,
              status,
              error: error2
            }), set_cookie_headers);
          }
        }
        if (loaded && loaded.loaded.stuff) {
          stuff = {
            ...stuff,
            ...loaded.loaded.stuff
          };
        }
      }
    }
  try {
    return with_cookies(await render_response({
      ...opts,
      page_config,
      status,
      error: error2,
      branch: branch.filter(Boolean)
    }), set_cookie_headers);
  } catch (err) {
    const error3 = coalesce_to_error(err);
    options2.handle_error(error3, request);
    return with_cookies(await respond_with_error({
      ...opts,
      status: 500,
      error: error3
    }), set_cookie_headers);
  }
}
function get_page_config(leaf, options2) {
  return {
    ssr: "ssr" in leaf ? !!leaf.ssr : options2.ssr,
    router: "router" in leaf ? !!leaf.router : options2.router,
    hydrate: "hydrate" in leaf ? !!leaf.hydrate : options2.hydrate
  };
}
function with_cookies(response, set_cookie_headers) {
  if (set_cookie_headers.length) {
    response.headers["set-cookie"] = set_cookie_headers;
  }
  return response;
}
async function render_page(request, route, match, options2, state) {
  if (state.initiator === route) {
    return {
      status: 404,
      headers: {},
      body: `Not found: ${request.path}`
    };
  }
  const params = route.params(match);
  const page2 = {
    host: request.host,
    path: request.path,
    query: request.query,
    params
  };
  const $session = await options2.hooks.getSession(request);
  const response = await respond$1({
    request,
    options: options2,
    state,
    $session,
    route,
    page: page2
  });
  if (response) {
    return response;
  }
  if (state.fetched) {
    return {
      status: 500,
      headers: {},
      body: `Bad request in load function: failed to fetch ${state.fetched}`
    };
  }
}
function read_only_form_data() {
  const map2 = new Map();
  return {
    append(key, value) {
      if (map2.has(key)) {
        (map2.get(key) || []).push(value);
      } else {
        map2.set(key, [value]);
      }
    },
    data: new ReadOnlyFormData(map2)
  };
}
var ReadOnlyFormData = class {
  constructor(map2) {
    __privateAdd(this, _map, void 0);
    __privateSet(this, _map, map2);
  }
  get(key) {
    const value = __privateGet(this, _map).get(key);
    return value && value[0];
  }
  getAll(key) {
    return __privateGet(this, _map).get(key);
  }
  has(key) {
    return __privateGet(this, _map).has(key);
  }
  *[Symbol.iterator]() {
    for (const [key, value] of __privateGet(this, _map)) {
      for (let i = 0; i < value.length; i += 1) {
        yield [key, value[i]];
      }
    }
  }
  *entries() {
    for (const [key, value] of __privateGet(this, _map)) {
      for (let i = 0; i < value.length; i += 1) {
        yield [key, value[i]];
      }
    }
  }
  *keys() {
    for (const [key] of __privateGet(this, _map))
      yield key;
  }
  *values() {
    for (const [, value] of __privateGet(this, _map)) {
      for (let i = 0; i < value.length; i += 1) {
        yield value[i];
      }
    }
  }
};
_map = new WeakMap();
function parse_body(raw, headers) {
  if (!raw)
    return raw;
  const content_type = headers["content-type"];
  const [type, ...directives] = content_type ? content_type.split(/;\s*/) : [];
  const text = () => new TextDecoder(headers["content-encoding"] || "utf-8").decode(raw);
  switch (type) {
    case "text/plain":
      return text();
    case "application/json":
      return JSON.parse(text());
    case "application/x-www-form-urlencoded":
      return get_urlencoded(text());
    case "multipart/form-data": {
      const boundary = directives.find((directive) => directive.startsWith("boundary="));
      if (!boundary)
        throw new Error("Missing boundary");
      return get_multipart(text(), boundary.slice("boundary=".length));
    }
    default:
      return raw;
  }
}
function get_urlencoded(text) {
  const { data, append } = read_only_form_data();
  text.replace(/\+/g, " ").split("&").forEach((str) => {
    const [key, value] = str.split("=");
    append(decodeURIComponent(key), decodeURIComponent(value));
  });
  return data;
}
function get_multipart(text, boundary) {
  const parts = text.split(`--${boundary}`);
  if (parts[0] !== "" || parts[parts.length - 1].trim() !== "--") {
    throw new Error("Malformed form data");
  }
  const { data, append } = read_only_form_data();
  parts.slice(1, -1).forEach((part) => {
    const match = /\s*([\s\S]+?)\r\n\r\n([\s\S]*)\s*/.exec(part);
    if (!match) {
      throw new Error("Malformed form data");
    }
    const raw_headers = match[1];
    const body = match[2].trim();
    let key;
    const headers = {};
    raw_headers.split("\r\n").forEach((str) => {
      const [raw_header, ...raw_directives] = str.split("; ");
      let [name, value] = raw_header.split(": ");
      name = name.toLowerCase();
      headers[name] = value;
      const directives = {};
      raw_directives.forEach((raw_directive) => {
        const [name2, value2] = raw_directive.split("=");
        directives[name2] = JSON.parse(value2);
      });
      if (name === "content-disposition") {
        if (value !== "form-data")
          throw new Error("Malformed form data");
        if (directives.filename) {
          throw new Error("File upload is not yet implemented");
        }
        if (directives.name) {
          key = directives.name;
        }
      }
    });
    if (!key)
      throw new Error("Malformed form data");
    append(key, body);
  });
  return data;
}
async function respond(incoming, options2, state = {}) {
  if (incoming.path !== "/" && options2.trailing_slash !== "ignore") {
    const has_trailing_slash = incoming.path.endsWith("/");
    if (has_trailing_slash && options2.trailing_slash === "never" || !has_trailing_slash && options2.trailing_slash === "always" && !(incoming.path.split("/").pop() || "").includes(".")) {
      const path = has_trailing_slash ? incoming.path.slice(0, -1) : incoming.path + "/";
      const q = incoming.query.toString();
      return {
        status: 301,
        headers: {
          location: options2.paths.base + path + (q ? `?${q}` : "")
        }
      };
    }
  }
  const headers = lowercase_keys(incoming.headers);
  const request = {
    ...incoming,
    headers,
    body: parse_body(incoming.rawBody, headers),
    params: {},
    locals: {}
  };
  try {
    return await options2.hooks.handle({
      request,
      resolve: async (request2) => {
        if (state.prerender && state.prerender.fallback) {
          return await render_response({
            options: options2,
            $session: await options2.hooks.getSession(request2),
            page_config: { ssr: false, router: true, hydrate: true },
            status: 200,
            branch: []
          });
        }
        const decoded = decodeURI(request2.path);
        for (const route of options2.manifest.routes) {
          const match = route.pattern.exec(decoded);
          if (!match)
            continue;
          const response = route.type === "endpoint" ? await render_endpoint(request2, route, match) : await render_page(request2, route, match, options2, state);
          if (response) {
            if (response.status === 200) {
              const cache_control = get_single_valued_header(response.headers, "cache-control");
              if (!cache_control || !/(no-store|immutable)/.test(cache_control)) {
                const etag = `"${hash(response.body || "")}"`;
                if (request2.headers["if-none-match"] === etag) {
                  return {
                    status: 304,
                    headers: {},
                    body: ""
                  };
                }
                response.headers["etag"] = etag;
              }
            }
            return response;
          }
        }
        const $session = await options2.hooks.getSession(request2);
        return await respond_with_error({
          request: request2,
          options: options2,
          state,
          $session,
          status: 404,
          error: new Error(`Not found: ${request2.path}`)
        });
      }
    });
  } catch (err) {
    const e = coalesce_to_error(err);
    options2.handle_error(e, request);
    return {
      status: 500,
      headers: {},
      body: options2.dev ? e.stack : e.message
    };
  }
}
function noop() {
}
function run(fn) {
  return fn();
}
function blank_object() {
  return Object.create(null);
}
function run_all(fns) {
  fns.forEach(run);
}
function safe_not_equal(a, b) {
  return a != a ? b == b : a !== b || (a && typeof a === "object" || typeof a === "function");
}
function subscribe(store, ...callbacks) {
  if (store == null) {
    return noop;
  }
  const unsub = store.subscribe(...callbacks);
  return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;
}
function null_to_empty(value) {
  return value == null ? "" : value;
}
function set_store_value(store, ret, value) {
  store.set(value);
  return ret;
}
var current_component;
function set_current_component(component) {
  current_component = component;
}
function get_current_component() {
  if (!current_component)
    throw new Error("Function called outside component initialization");
  return current_component;
}
function setContext(key, context) {
  get_current_component().$$.context.set(key, context);
}
function getContext(key) {
  return get_current_component().$$.context.get(key);
}
Promise.resolve();
var escaped = {
  '"': "&quot;",
  "'": "&#39;",
  "&": "&amp;",
  "<": "&lt;",
  ">": "&gt;"
};
function escape(html) {
  return String(html).replace(/["'&<>]/g, (match) => escaped[match]);
}
function each(items, fn) {
  let str = "";
  for (let i = 0; i < items.length; i += 1) {
    str += fn(items[i], i);
  }
  return str;
}
var missing_component = {
  $$render: () => ""
};
function validate_component(component, name) {
  if (!component || !component.$$render) {
    if (name === "svelte:component")
      name += " this={...}";
    throw new Error(`<${name}> is not a valid SSR component. You may need to review your build config to ensure that dependencies are compiled, rather than imported as pre-compiled modules`);
  }
  return component;
}
var on_destroy;
function create_ssr_component(fn) {
  function $$render(result, props, bindings, slots, context) {
    const parent_component = current_component;
    const $$ = {
      on_destroy,
      context: new Map(context || (parent_component ? parent_component.$$.context : [])),
      on_mount: [],
      before_update: [],
      after_update: [],
      callbacks: blank_object()
    };
    set_current_component({ $$ });
    const html = fn(result, props, bindings, slots);
    set_current_component(parent_component);
    return html;
  }
  return {
    render: (props = {}, { $$slots = {}, context = new Map() } = {}) => {
      on_destroy = [];
      const result = { title: "", head: "", css: new Set() };
      const html = $$render(result, props, {}, $$slots, context);
      run_all(on_destroy);
      return {
        html,
        css: {
          code: Array.from(result.css).map((css2) => css2.code).join("\n"),
          map: null
        },
        head: result.title + result.head
      };
    },
    $$render
  };
}
function add_attribute(name, value, boolean) {
  if (value == null || boolean && !value)
    return "";
  return ` ${name}${value === true ? "" : `=${typeof value === "string" ? JSON.stringify(escape(value)) : `"${value}"`}`}`;
}
function afterUpdate() {
}
var css$g = {
  code: "#svelte-announcer.svelte-1j55zn5{position:absolute;left:0;top:0;clip:rect(0 0 0 0);clip-path:inset(50%);overflow:hidden;white-space:nowrap;width:1px;height:1px}",
  map: `{"version":3,"file":"root.svelte","sources":["root.svelte"],"sourcesContent":["<!-- This file is generated by @sveltejs/kit \u2014 do not edit it! -->\\n<script>\\n\\timport { setContext, afterUpdate, onMount } from 'svelte';\\n\\n\\t// stores\\n\\texport let stores;\\n\\texport let page;\\n\\n\\texport let components;\\n\\texport let props_0 = null;\\n\\texport let props_1 = null;\\n\\texport let props_2 = null;\\n\\n\\tsetContext('__svelte__', stores);\\n\\n\\t$: stores.page.set(page);\\n\\tafterUpdate(stores.page.notify);\\n\\n\\tlet mounted = false;\\n\\tlet navigated = false;\\n\\tlet title = null;\\n\\n\\tonMount(() => {\\n\\t\\tconst unsubscribe = stores.page.subscribe(() => {\\n\\t\\t\\tif (mounted) {\\n\\t\\t\\t\\tnavigated = true;\\n\\t\\t\\t\\ttitle = document.title || 'untitled page';\\n\\t\\t\\t}\\n\\t\\t});\\n\\n\\t\\tmounted = true;\\n\\t\\treturn unsubscribe;\\n\\t});\\n<\/script>\\n\\n<svelte:component this={components[0]} {...(props_0 || {})}>\\n\\t{#if components[1]}\\n\\t\\t<svelte:component this={components[1]} {...(props_1 || {})}>\\n\\t\\t\\t{#if components[2]}\\n\\t\\t\\t\\t<svelte:component this={components[2]} {...(props_2 || {})}/>\\n\\t\\t\\t{/if}\\n\\t\\t</svelte:component>\\n\\t{/if}\\n</svelte:component>\\n\\n{#if mounted}\\n\\t<div id=\\"svelte-announcer\\" aria-live=\\"assertive\\" aria-atomic=\\"true\\">\\n\\t\\t{#if navigated}\\n\\t\\t\\t{title}\\n\\t\\t{/if}\\n\\t</div>\\n{/if}\\n\\n<style>\\n\\t#svelte-announcer {\\n\\t\\tposition: absolute;\\n\\t\\tleft: 0;\\n\\t\\ttop: 0;\\n\\t\\tclip: rect(0 0 0 0);\\n\\t\\tclip-path: inset(50%);\\n\\t\\toverflow: hidden;\\n\\t\\twhite-space: nowrap;\\n\\t\\twidth: 1px;\\n\\t\\theight: 1px;\\n\\t}\\n</style>"],"names":[],"mappings":"AAsDC,iBAAiB,eAAC,CAAC,AAClB,QAAQ,CAAE,QAAQ,CAClB,IAAI,CAAE,CAAC,CACP,GAAG,CAAE,CAAC,CACN,IAAI,CAAE,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CACnB,SAAS,CAAE,MAAM,GAAG,CAAC,CACrB,QAAQ,CAAE,MAAM,CAChB,WAAW,CAAE,MAAM,CACnB,KAAK,CAAE,GAAG,CACV,MAAM,CAAE,GAAG,AACZ,CAAC"}`
};
var Root = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let { stores } = $$props;
  let { page: page2 } = $$props;
  let { components } = $$props;
  let { props_0 = null } = $$props;
  let { props_1 = null } = $$props;
  let { props_2 = null } = $$props;
  setContext("__svelte__", stores);
  afterUpdate(stores.page.notify);
  if ($$props.stores === void 0 && $$bindings.stores && stores !== void 0)
    $$bindings.stores(stores);
  if ($$props.page === void 0 && $$bindings.page && page2 !== void 0)
    $$bindings.page(page2);
  if ($$props.components === void 0 && $$bindings.components && components !== void 0)
    $$bindings.components(components);
  if ($$props.props_0 === void 0 && $$bindings.props_0 && props_0 !== void 0)
    $$bindings.props_0(props_0);
  if ($$props.props_1 === void 0 && $$bindings.props_1 && props_1 !== void 0)
    $$bindings.props_1(props_1);
  if ($$props.props_2 === void 0 && $$bindings.props_2 && props_2 !== void 0)
    $$bindings.props_2(props_2);
  $$result.css.add(css$g);
  {
    stores.page.set(page2);
  }
  return `


${validate_component(components[0] || missing_component, "svelte:component").$$render($$result, Object.assign(props_0 || {}), {}, {
    default: () => `${components[1] ? `${validate_component(components[1] || missing_component, "svelte:component").$$render($$result, Object.assign(props_1 || {}), {}, {
      default: () => `${components[2] ? `${validate_component(components[2] || missing_component, "svelte:component").$$render($$result, Object.assign(props_2 || {}), {}, {})}` : ``}`
    })}` : ``}`
  })}

${``}`;
});
var base = "";
var assets = "";
function set_paths(paths) {
  base = paths.base;
  assets = paths.assets || base;
}
function set_prerendering(value) {
}
var user_hooks = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module"
});
var template = ({ head, body }) => '<!DOCTYPE html>\n<html lang="en">\n  <head>\n    <meta charset="utf-8" />\n    <link rel="icon" href="/favicon.ico" />\n    <link rel="stylesheet" href="https://use.typekit.net/mhr2lku.css">\n    <meta name="viewport" content="width=device-width, initial-scale=1" />\n\n   ' + head + '\n  </head>\n  <body>\n    <div id="svelte">' + body + "</div>\n  </body>\n</html>\n";
var options = null;
var default_settings = { paths: { "base": "", "assets": "" } };
function init(settings = default_settings) {
  set_paths(settings.paths);
  set_prerendering(settings.prerendering || false);
  const hooks = get_hooks(user_hooks);
  options = {
    amp: false,
    dev: false,
    entry: {
      file: assets + "/_app/start-af4606e6.js",
      css: [assets + "/_app/assets/start-d977ffc4.css", assets + "/_app/assets/vendor-e5bb3ecd.css"],
      js: [assets + "/_app/start-af4606e6.js", assets + "/_app/chunks/vendor-a70f949e.js"]
    },
    fetched: void 0,
    floc: false,
    get_component_path: (id) => assets + "/_app/" + entry_lookup[id],
    get_stack: (error2) => String(error2),
    handle_error: (error2, request) => {
      hooks.handleError({ error: error2, request });
      error2.stack = options.get_stack(error2);
    },
    hooks,
    hydrate: true,
    initiator: void 0,
    load_component,
    manifest,
    paths: settings.paths,
    prerender: true,
    read: settings.read,
    root: Root,
    service_worker: null,
    router: true,
    ssr: true,
    target: "#svelte",
    template,
    trailing_slash: "never"
  };
}
var empty = () => ({});
var manifest = {
  assets: [{ "file": ".DS_Store", "size": 6148, "type": null }, { "file": "images/.DS_Store", "size": 6148, "type": null }, { "file": "images/blog/.DS_Store", "size": 16388, "type": null }, { "file": "images/blog/adding-a-chart-to-your-d3-tooltip/.DS_Store", "size": 6148, "type": null }, { "file": "images/blog/adding-a-chart-to-your-d3-tooltip/header.png", "size": 222355, "type": "image/png" }, { "file": "images/blog/adding-a-chart-to-your-d3-tooltip/new-tooltip.gif", "size": 1394285, "type": "image/gif" }, { "file": "images/blog/adding-a-chart-to-your-d3-tooltip/old-tooltip.gif", "size": 1828083, "type": "image/gif" }, { "file": "images/blog/adding-a-chart-to-your-d3-tooltip/west-virginia.jpg", "size": 96852, "type": "image/jpeg" }, { "file": "images/blog/animate-hugo-academic/about.png", "size": 171201, "type": "image/png" }, { "file": "images/blog/animate-hugo-academic/after-demo-hero-remove.png", "size": 274988, "type": "image/png" }, { "file": "images/blog/animate-hugo-academic/before-demo-hero-remove.png", "size": 996449, "type": "image/png" }, { "file": "images/blog/animate-hugo-academic/bg-red.png", "size": 247553, "type": "image/png" }, { "file": "images/blog/animate-hugo-academic/double-slide.gif", "size": 4049647, "type": "image/gif" }, { "file": "images/blog/animate-hugo-academic/final.gif", "size": 4711318, "type": "image/gif" }, { "file": "images/blog/animate-hugo-academic/font-red.png", "size": 274418, "type": "image/png" }, { "file": "images/blog/animate-hugo-academic/header.jpg", "size": 272081, "type": "image/jpeg" }, { "file": "images/blog/animate-hugo-academic/header.png", "size": 502097, "type": "image/png" }, { "file": "images/blog/animate-hugo-academic/left-and-right.gif", "size": 7187557, "type": "image/gif" }, { "file": "images/blog/animate-hugo-academic/red.gif", "size": 6389199, "type": "image/gif" }, { "file": "images/blog/animate-hugo-academic/slide-from-right.gif", "size": 5650648, "type": "image/gif" }, { "file": "images/blog/automation-scrollytell/header.png", "size": 347231, "type": "image/png" }, { "file": "images/blog/bible-babies/boys.gif", "size": 3320504, "type": "image/gif" }, { "file": "images/blog/bible-babies/combined.gif", "size": 2500209, "type": "image/gif" }, { "file": "images/blog/bible-babies/girls.gif", "size": 3171023, "type": "image/gif" }, { "file": "images/blog/bible-babies/header.png", "size": 207384, "type": "image/png" }, { "file": "images/blog/bible-babies/line.png", "size": 88209, "type": "image/png" }, { "file": "images/blog/bible-babies/male-female-line.png", "size": 103538, "type": "image/png" }, { "file": "images/blog/color-in-data-vis/.DS_Store", "size": 8196, "type": null }, { "file": "images/blog/color-in-data-vis/all-color.jpg", "size": 48568, "type": "image/jpeg" }, { "file": "images/blog/color-in-data-vis/all-grey.jpg", "size": 25976, "type": "image/jpeg" }, { "file": "images/blog/color-in-data-vis/bad-and-better.jpg", "size": 41594, "type": "image/jpeg" }, { "file": "images/blog/color-in-data-vis/bad-chart.jpg", "size": 144491, "type": "image/jpeg" }, { "file": "images/blog/color-in-data-vis/bad-color-use-1.jpg", "size": 25638, "type": "image/jpeg" }, { "file": "images/blog/color-in-data-vis/bad-color-use-2.jpg", "size": 462044, "type": "image/jpeg" }, { "file": "images/blog/color-in-data-vis/better-chart1.png", "size": 102932, "type": "image/png" }, { "file": "images/blog/color-in-data-vis/betterchart-1.jpg", "size": 102932, "type": "image/jpeg" }, { "file": "images/blog/color-in-data-vis/choropleth-ex.jpg", "size": 116015, "type": "image/jpeg" }, { "file": "images/blog/color-in-data-vis/color-emotion-guide-lol.jpg", "size": 142938, "type": "image/jpeg" }, { "file": "images/blog/color-in-data-vis/color-emphasized.png", "size": 88831, "type": "image/png" }, { "file": "images/blog/color-in-data-vis/flipping-points-color-annotate1.jpg", "size": 388831, "type": "image/jpeg" }, { "file": "images/blog/color-in-data-vis/flipping-points-color-annotate2.jpg", "size": 292758, "type": "image/jpeg" }, { "file": "images/blog/color-in-data-vis/flipping-points-color.jpg", "size": 281680, "type": "image/jpeg" }, { "file": "images/blog/color-in-data-vis/header.png", "size": 1500611, "type": "image/png" }, { "file": "images/blog/color-in-data-vis/map-Texas-rainbow-1.jpg", "size": 125882, "type": "image/jpeg" }, { "file": "images/blog/color-in-data-vis/popgrowth-vs-popsize-bw-1.png", "size": 102932, "type": "image/png" }, { "file": "images/blog/covid-gun-spikes/featured.png", "size": 708910, "type": "image/png" }, { "file": "images/blog/covid-gun-spikes/header.png", "size": 960654, "type": "image/png" }, { "file": "images/blog/covid-gun-spikes/table-replacement.png", "size": 37277, "type": "image/png" }, { "file": "images/blog/covid-gun-spikes/unnamed-chunk-4-1.png", "size": 157047, "type": "image/png" }, { "file": "images/blog/covid-gun-spikes/unnamed-chunk-5-1.png", "size": 55822, "type": "image/png" }, { "file": "images/blog/covid-gun-spikes/unnamed-chunk-6-1.png", "size": 124650, "type": "image/png" }, { "file": "images/blog/covid-on-campus/featured.png", "size": 144039, "type": "image/png" }, { "file": "images/blog/covid-on-campus/geofacet_processed.png", "size": 233674, "type": "image/png" }, { "file": "images/blog/covid-on-campus/header.png", "size": 246566, "type": "image/png" }, { "file": "images/blog/covid-on-campus/table1.png", "size": 111521, "type": "image/png" }, { "file": "images/blog/covid-on-campus/table2.png", "size": 49261, "type": "image/png" }, { "file": "images/blog/covid-on-campus/table3.png", "size": 46864, "type": "image/png" }, { "file": "images/blog/covid-posts/authorVer2-1.png", "size": 66037, "type": "image/png" }, { "file": "images/blog/covid-posts/dataTable-1.png", "size": 123935, "type": "image/png" }, { "file": "images/blog/covid-posts/featured.png", "size": 142943, "type": "image/png" }, { "file": "images/blog/covid-posts/header.png", "size": 142943, "type": "image/png" }, { "file": "images/blog/covid-posts/prolificVer2-1.png", "size": 178507, "type": "image/png" }, { "file": "images/blog/covid-posts/topicsVer2-1.png", "size": 142943, "type": "image/png" }, { "file": "images/blog/covid-posts/weekly-1.png", "size": 66718, "type": "image/png" }, { "file": "images/blog/do-something-else/startup-faang-satisfaction.png", "size": 128566, "type": "image/png" }, { "file": "images/blog/dumbbell-plots/age-disrupt.jpg", "size": 127112, "type": "image/jpeg" }, { "file": "images/blog/dumbbell-plots/age-worry.jpg", "size": 133455, "type": "image/jpeg" }, { "file": "images/blog/dumbbell-plots/axios.jpg", "size": 94024, "type": "image/jpeg" }, { "file": "images/blog/dumbbell-plots/featured.jpg", "size": 146966, "type": "image/jpeg" }, { "file": "images/blog/dumbbell-plots/header.png", "size": 211763, "type": "image/png" }, { "file": "images/blog/dumbbell-plots/partisan-disrupt.jpg", "size": 139913, "type": "image/jpeg" }, { "file": "images/blog/dumbbell-plots/partisan-worry.jpg", "size": 146966, "type": "image/jpeg" }, { "file": "images/blog/dumbbell-plots/pew.jpg", "size": 83415, "type": "image/jpeg" }, { "file": "images/blog/dumbbell-plots/process-0.jpg", "size": 79993, "type": "image/jpeg" }, { "file": "images/blog/dumbbell-plots/process-1.jpg", "size": 86350, "type": "image/jpeg" }, { "file": "images/blog/dumbbell-plots/process-2.jpg", "size": 93592, "type": "image/jpeg" }, { "file": "images/blog/dumbbell-plots/process-3.jpg", "size": 101971, "type": "image/jpeg" }, { "file": "images/blog/dumbbell-plots/process-4.jpg", "size": 96114, "type": "image/jpeg" }, { "file": "images/blog/dumbbell-plots/process-5.jpg", "size": 160258, "type": "image/jpeg" }, { "file": "images/blog/dumbbell-plots/process-6.jpg", "size": 146966, "type": "image/jpeg" }, { "file": "images/blog/dumbbell-plots/process-gif.gif", "size": 670401, "type": "image/gif" }, { "file": "images/blog/dumbbell-plots/table.jpg", "size": 27809, "type": "image/jpeg" }, { "file": "images/blog/economist-table-replication-using-reactable/featured.png", "size": 107802, "type": "image/png" }, { "file": "images/blog/economist-table-replication-using-reactable/header.png", "size": 207227, "type": "image/png" }, { "file": "images/blog/flat-data-r/.DS_Store", "size": 6148, "type": null }, { "file": "images/blog/flat-data-r/flat-diagram.png", "size": 739814, "type": "image/png" }, { "file": "images/blog/flat-data-r/header.png", "size": 1651665, "type": "image/png" }, { "file": "images/blog/introducing-tpltheme/featured.png", "size": 60896, "type": "image/png" }, { "file": "images/blog/introducing-tpltheme/header.png", "size": 82172, "type": "image/png" }, { "file": "images/blog/introducing-tpltheme/unnamed-chunk-10-1.png", "size": 156710, "type": "image/png" }, { "file": "images/blog/introducing-tpltheme/unnamed-chunk-11-1.png", "size": 69452, "type": "image/png" }, { "file": "images/blog/introducing-tpltheme/unnamed-chunk-12-1.png", "size": 146481, "type": "image/png" }, { "file": "images/blog/introducing-tpltheme/unnamed-chunk-13-1.png", "size": 155022, "type": "image/png" }, { "file": "images/blog/introducing-tpltheme/unnamed-chunk-14-1.png", "size": 79963, "type": "image/png" }, { "file": "images/blog/introducing-tpltheme/unnamed-chunk-15-1.png", "size": 76710, "type": "image/png" }, { "file": "images/blog/introducing-tpltheme/unnamed-chunk-16-1.png", "size": 151633, "type": "image/png" }, { "file": "images/blog/introducing-tpltheme/unnamed-chunk-17-1.png", "size": 168762, "type": "image/png" }, { "file": "images/blog/introducing-tpltheme/unnamed-chunk-18-1.png", "size": 147878, "type": "image/png" }, { "file": "images/blog/introducing-tpltheme/unnamed-chunk-3-1.png", "size": 44351, "type": "image/png" }, { "file": "images/blog/introducing-tpltheme/unnamed-chunk-5-1.png", "size": 146995, "type": "image/png" }, { "file": "images/blog/introducing-tpltheme/unnamed-chunk-6-1.png", "size": 259141, "type": "image/png" }, { "file": "images/blog/introducing-tpltheme/unnamed-chunk-7-1.png", "size": 208134, "type": "image/png" }, { "file": "images/blog/introducing-tpltheme/unnamed-chunk-8-1.png", "size": 262530, "type": "image/png" }, { "file": "images/blog/introducing-tpltheme/unnamed-chunk-9-1.png", "size": 60075, "type": "image/png" }, { "file": "images/blog/map-springfield/bw_map_springfield.png", "size": 374640, "type": "image/png" }, { "file": "images/blog/map-springfield/gold_map_springfield.png", "size": 673257, "type": "image/png" }, { "file": "images/blog/map-springfield/header.png", "size": 462454, "type": "image/png" }, { "file": "images/blog/media-mentions/header.png", "size": 311367, "type": "image/png" }, { "file": "images/blog/media-mentions/unnamed-chunk-2-1.png", "size": 80891, "type": "image/png" }, { "file": "images/blog/media-mentions/unnamed-chunk-3-1.png", "size": 192170, "type": "image/png" }, { "file": "images/blog/media-mentions/unnamed-chunk-4-1.png", "size": 137279, "type": "image/png" }, { "file": "images/blog/media-mentions/unnamed-chunk-5-1.png", "size": 86116, "type": "image/png" }, { "file": "images/blog/media-mentions/unnamed-chunk-6-1.png", "size": 503911, "type": "image/png" }, { "file": "images/blog/media-mentions/unnamed-chunk-7-1.png", "size": 349985, "type": "image/png" }, { "file": "images/blog/nuxt-blog-starter/blog-card.png", "size": 317721, "type": "image/png" }, { "file": "images/blog/nuxt-blog-starter/dark.png", "size": 86381, "type": "image/png" }, { "file": "images/blog/nuxt-blog-starter/header.png", "size": 160358, "type": "image/png" }, { "file": "images/blog/nuxt-blog-starter/home-card.png", "size": 245943, "type": "image/png" }, { "file": "images/blog/nuxt-blog-starter/light.png", "size": 88342, "type": "image/png" }, { "file": "images/blog/nuxt-blog-starter/new-site-perf.png", "size": 729480, "type": "image/png" }, { "file": "images/blog/nuxt-blog-starter/old-site-perf.png", "size": 891912, "type": "image/png" }, { "file": "images/blog/nuxt-blog-starter/transitions.gif", "size": 1269461, "type": "image/gif" }, { "file": "images/blog/refugee-trends/.DS_Store", "size": 6148, "type": null }, { "file": "images/blog/refugee-trends/featured.png", "size": 96723, "type": "image/png" }, { "file": "images/blog/refugee-trends/final.svg", "size": 339820, "type": "image/svg+xml" }, { "file": "images/blog/refugee-trends/firsttry.jpg", "size": 249381, "type": "image/jpeg" }, { "file": "images/blog/refugee-trends/header.png", "size": 209771, "type": "image/png" }, { "file": "images/blog/refugee-trends/macro.jpg", "size": 59219, "type": "image/jpeg" }, { "file": "images/blog/refugee-trends/policyviz.jpg", "size": 62077, "type": "image/jpeg" }, { "file": "images/blog/refugee-trends/ref.png", "size": 77965, "type": "image/png" }, { "file": "images/blog/refugee-trends/secondtry.jpg", "size": 220813, "type": "image/jpeg" }, { "file": "images/blog/refugee-trends/wapo.png", "size": 254826, "type": "image/png" }, { "file": "images/blog/svelte-and-d3/header.png", "size": 1916771, "type": "image/png" }, { "file": "images/blog/tidy-tuesday-powerlifting/featured.png", "size": 395928, "type": "image/png" }, { "file": "images/blog/tidy-tuesday-powerlifting/header.png", "size": 609028, "type": "image/png" }, { "file": "images/blog/tidy-tuesday-powerlifting/table.png", "size": 39430, "type": "image/png" }, { "file": "images/blog/tidy-tuesday-powerlifting/unnamed-chunk-10-1.gif", "size": 2045058, "type": "image/gif" }, { "file": "images/blog/tidy-tuesday-powerlifting/unnamed-chunk-11-1.gif", "size": 3152748, "type": "image/gif" }, { "file": "images/blog/tidy-tuesday-powerlifting/unnamed-chunk-8-1.png", "size": 80022, "type": "image/png" }, { "file": "images/blog/tidy-tuesday-powerlifting/unnamed-chunk-9-1.gif", "size": 1471396, "type": "image/gif" }, { "file": "images/blog/tidy-tuesday-replication/bloomberg.png", "size": 286679, "type": "image/png" }, { "file": "images/blog/tidy-tuesday-replication/featured.png", "size": 220110, "type": "image/png" }, { "file": "images/blog/tidy-tuesday-replication/header.png", "size": 391425, "type": "image/png" }, { "file": "images/blog/tidy-tuesday-replication/replication.png", "size": 220110, "type": "image/png" }, { "file": "images/icons/shuffle.svg", "size": 1574, "type": "image/svg+xml" }, { "file": "images/jobs/axios.svg", "size": 455, "type": "image/svg+xml" }, { "file": "images/jobs/moksha.svg", "size": 1261, "type": "image/svg+xml" }, { "file": "images/jobs/socom.svg", "size": 77530, "type": "image/svg+xml" }, { "file": "images/jobs/tpl.svg", "size": 709, "type": "image/svg+xml" }, { "file": "images/projects/bob-ross-virtual-art-gallery.png", "size": 109443, "type": "image/png" }, { "file": "images/projects/cudi-hums.png", "size": 396399, "type": "image/png" }, { "file": "images/projects/mapping-missing-migrants.png", "size": 109443, "type": "image/png" }, { "file": "images/projects/quarantunes.png", "size": 396399, "type": "image/png" }],
  layout: "src/routes/__layout.svelte",
  error: "src/routes/__error.svelte",
  routes: [
    {
      type: "page",
      pattern: /^\/$/,
      params: empty,
      a: ["src/routes/__layout.svelte", "src/routes/index.svelte"],
      b: ["src/routes/__error.svelte"]
    },
    {
      type: "endpoint",
      pattern: /^\/experience\.json$/,
      params: empty,
      load: () => Promise.resolve().then(function() {
        return experience_json;
      })
    },
    {
      type: "endpoint",
      pattern: /^\/projects\.json$/,
      params: empty,
      load: () => Promise.resolve().then(function() {
        return projects_json;
      })
    },
    {
      type: "page",
      pattern: /^\/experience\/?$/,
      params: empty,
      a: ["src/routes/__layout.svelte", "src/routes/experience/index.svelte"],
      b: ["src/routes/__error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/experience\/layout\/?$/,
      params: empty,
      a: ["src/routes/__layout.svelte", "src/routes/experience/layout.svelte"],
      b: ["src/routes/__error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/experience\/moksha\/?$/,
      params: empty,
      a: ["src/routes/__layout.svelte", "src/routes/experience/moksha.md"],
      b: ["src/routes/__error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/experience\/axios\/?$/,
      params: empty,
      a: ["src/routes/__layout.svelte", "src/routes/experience/axios.md"],
      b: ["src/routes/__error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/experience\/socom\/?$/,
      params: empty,
      a: ["src/routes/__layout.svelte", "src/routes/experience/socom.md"],
      b: ["src/routes/__error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/experience\/tpl\/?$/,
      params: empty,
      a: ["src/routes/__layout.svelte", "src/routes/experience/tpl.md"],
      b: ["src/routes/__error.svelte"]
    },
    {
      type: "endpoint",
      pattern: /^\/posts\.json$/,
      params: empty,
      load: () => Promise.resolve().then(function() {
        return posts_json;
      })
    },
    {
      type: "page",
      pattern: /^\/projects\/?$/,
      params: empty,
      a: ["src/routes/__layout.svelte", "src/routes/projects/index.svelte"],
      b: ["src/routes/__error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/projects\/cudi-hums-copy-2\/?$/,
      params: empty,
      a: ["src/routes/__layout.svelte", "src/routes/projects/cudi-hums-copy-2.md"],
      b: ["src/routes/__error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/projects\/cudi-hums-copy-3\/?$/,
      params: empty,
      a: ["src/routes/__layout.svelte", "src/routes/projects/cudi-hums-copy-3.md"],
      b: ["src/routes/__error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/projects\/cudi-hums-copy\/?$/,
      params: empty,
      a: ["src/routes/__layout.svelte", "src/routes/projects/cudi-hums-copy.md"],
      b: ["src/routes/__error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/projects\/cudi-hums\/?$/,
      params: empty,
      a: ["src/routes/__layout.svelte", "src/routes/projects/cudi-hums.md"],
      b: ["src/routes/__error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/projects\/layout\/?$/,
      params: empty,
      a: ["src/routes/__layout.svelte", "src/routes/projects/layout.svelte"],
      b: ["src/routes/__error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/blog\/?$/,
      params: empty,
      a: ["src/routes/__layout.svelte", "src/routes/blog/index.svelte"],
      b: ["src/routes/__error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/blog\/economist-table-replication-using-reactable\/?$/,
      params: empty,
      a: ["src/routes/__layout.svelte", "src/routes/blog/economist-table-replication-using-reactable.md"],
      b: ["src/routes/__error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/blog\/adding-a-chart-to-your-d3-tooltip\/?$/,
      params: empty,
      a: ["src/routes/__layout.svelte", "src/routes/blog/adding-a-chart-to-your-d3-tooltip.md"],
      b: ["src/routes/__error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/blog\/tidy-tuesday-powerlifting\/?$/,
      params: empty,
      a: ["src/routes/__layout.svelte", "src/routes/blog/tidy-tuesday-powerlifting.md"],
      b: ["src/routes/__error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/blog\/tidy-tuesday-replication\/?$/,
      params: empty,
      a: ["src/routes/__layout.svelte", "src/routes/blog/tidy-tuesday-replication.md"],
      b: ["src/routes/__error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/blog\/automation-scrollytell\/?$/,
      params: empty,
      a: ["src/routes/__layout.svelte", "src/routes/blog/automation-scrollytell.md"],
      b: ["src/routes/__error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/blog\/animate-hugo-academic\/?$/,
      params: empty,
      a: ["src/routes/__layout.svelte", "src/routes/blog/animate-hugo-academic.md"],
      b: ["src/routes/__error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/blog\/introducing-tpltheme\/?$/,
      params: empty,
      a: ["src/routes/__layout.svelte", "src/routes/blog/introducing-tpltheme.md"],
      b: ["src/routes/__error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/blog\/color-in-data-vis\/?$/,
      params: empty,
      a: ["src/routes/__layout.svelte", "src/routes/blog/color-in-data-vis.md"],
      b: ["src/routes/__error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/blog\/do-something-else\/?$/,
      params: empty,
      a: ["src/routes/__layout.svelte", "src/routes/blog/do-something-else.md"],
      b: ["src/routes/__error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/blog\/nuxt-blog-starter\/?$/,
      params: empty,
      a: ["src/routes/__layout.svelte", "src/routes/blog/nuxt-blog-starter.md"],
      b: ["src/routes/__error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/blog\/covid-gun-spikes\/?$/,
      params: empty,
      a: ["src/routes/__layout.svelte", "src/routes/blog/covid-gun-spikes.md"],
      b: ["src/routes/__error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/blog\/covid-on-campus\/?$/,
      params: empty,
      a: ["src/routes/__layout.svelte", "src/routes/blog/covid-on-campus.md"],
      b: ["src/routes/__error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/blog\/map-springfield\/?$/,
      params: empty,
      a: ["src/routes/__layout.svelte", "src/routes/blog/map-springfield.md"],
      b: ["src/routes/__error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/blog\/dumbbell-plots\/?$/,
      params: empty,
      a: ["src/routes/__layout.svelte", "src/routes/blog/dumbbell-plots.md"],
      b: ["src/routes/__error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/blog\/refugee-trends\/?$/,
      params: empty,
      a: ["src/routes/__layout.svelte", "src/routes/blog/refugee-trends.md"],
      b: ["src/routes/__error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/blog\/svelte-scatter\/?$/,
      params: empty,
      a: ["src/routes/__layout.svelte", "src/routes/blog/svelte-scatter.md"],
      b: ["src/routes/__error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/blog\/svelte-and-d3\/?$/,
      params: empty,
      a: ["src/routes/__layout.svelte", "src/routes/blog/svelte-and-d3.md"],
      b: ["src/routes/__error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/blog\/covid-posts\/?$/,
      params: empty,
      a: ["src/routes/__layout.svelte", "src/routes/blog/covid-posts.md"],
      b: ["src/routes/__error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/blog\/flat-data-r\/?$/,
      params: empty,
      a: ["src/routes/__layout.svelte", "src/routes/blog/flat-data-r.md"],
      b: ["src/routes/__error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/blog\/layout\/?$/,
      params: empty,
      a: ["src/routes/__layout.svelte", "src/routes/blog/layout.svelte"],
      b: ["src/routes/__error.svelte"]
    }
  ]
};
var get_hooks = (hooks) => ({
  getSession: hooks.getSession || (() => ({})),
  handle: hooks.handle || (({ request, resolve: resolve2 }) => resolve2(request)),
  handleError: hooks.handleError || (({ error: error2 }) => console.error(error2.stack)),
  externalFetch: hooks.externalFetch || fetch
});
var module_lookup = {
  "src/routes/__layout.svelte": () => Promise.resolve().then(function() {
    return __layout;
  }),
  "src/routes/__error.svelte": () => Promise.resolve().then(function() {
    return __error;
  }),
  "src/routes/index.svelte": () => Promise.resolve().then(function() {
    return index$3;
  }),
  "src/routes/experience/index.svelte": () => Promise.resolve().then(function() {
    return index$2;
  }),
  "src/routes/experience/layout.svelte": () => Promise.resolve().then(function() {
    return layout$2;
  }),
  "src/routes/experience/moksha.md": () => Promise.resolve().then(function() {
    return moksha;
  }),
  "src/routes/experience/axios.md": () => Promise.resolve().then(function() {
    return axios;
  }),
  "src/routes/experience/socom.md": () => Promise.resolve().then(function() {
    return socom;
  }),
  "src/routes/experience/tpl.md": () => Promise.resolve().then(function() {
    return tpl;
  }),
  "src/routes/projects/index.svelte": () => Promise.resolve().then(function() {
    return index$1;
  }),
  "src/routes/projects/cudi-hums-copy-2.md": () => Promise.resolve().then(function() {
    return cudiHumsCopy2;
  }),
  "src/routes/projects/cudi-hums-copy-3.md": () => Promise.resolve().then(function() {
    return cudiHumsCopy3;
  }),
  "src/routes/projects/cudi-hums-copy.md": () => Promise.resolve().then(function() {
    return cudiHumsCopy;
  }),
  "src/routes/projects/cudi-hums.md": () => Promise.resolve().then(function() {
    return cudiHums;
  }),
  "src/routes/projects/layout.svelte": () => Promise.resolve().then(function() {
    return layout$1;
  }),
  "src/routes/blog/index.svelte": () => Promise.resolve().then(function() {
    return index;
  }),
  "src/routes/blog/economist-table-replication-using-reactable.md": () => Promise.resolve().then(function() {
    return economistTableReplicationUsingReactable;
  }),
  "src/routes/blog/adding-a-chart-to-your-d3-tooltip.md": () => Promise.resolve().then(function() {
    return addingAChartToYourD3Tooltip;
  }),
  "src/routes/blog/tidy-tuesday-powerlifting.md": () => Promise.resolve().then(function() {
    return tidyTuesdayPowerlifting;
  }),
  "src/routes/blog/tidy-tuesday-replication.md": () => Promise.resolve().then(function() {
    return tidyTuesdayReplication;
  }),
  "src/routes/blog/automation-scrollytell.md": () => Promise.resolve().then(function() {
    return automationScrollytell;
  }),
  "src/routes/blog/animate-hugo-academic.md": () => Promise.resolve().then(function() {
    return animateHugoAcademic;
  }),
  "src/routes/blog/introducing-tpltheme.md": () => Promise.resolve().then(function() {
    return introducingTpltheme;
  }),
  "src/routes/blog/color-in-data-vis.md": () => Promise.resolve().then(function() {
    return colorInDataVis;
  }),
  "src/routes/blog/do-something-else.md": () => Promise.resolve().then(function() {
    return doSomethingElse;
  }),
  "src/routes/blog/nuxt-blog-starter.md": () => Promise.resolve().then(function() {
    return nuxtBlogStarter;
  }),
  "src/routes/blog/covid-gun-spikes.md": () => Promise.resolve().then(function() {
    return covidGunSpikes;
  }),
  "src/routes/blog/covid-on-campus.md": () => Promise.resolve().then(function() {
    return covidOnCampus;
  }),
  "src/routes/blog/map-springfield.md": () => Promise.resolve().then(function() {
    return mapSpringfield;
  }),
  "src/routes/blog/dumbbell-plots.md": () => Promise.resolve().then(function() {
    return dumbbellPlots;
  }),
  "src/routes/blog/refugee-trends.md": () => Promise.resolve().then(function() {
    return refugeeTrends;
  }),
  "src/routes/blog/svelte-scatter.md": () => Promise.resolve().then(function() {
    return svelteScatter;
  }),
  "src/routes/blog/svelte-and-d3.md": () => Promise.resolve().then(function() {
    return svelteAndD3;
  }),
  "src/routes/blog/covid-posts.md": () => Promise.resolve().then(function() {
    return covidPosts;
  }),
  "src/routes/blog/flat-data-r.md": () => Promise.resolve().then(function() {
    return flatDataR;
  }),
  "src/routes/blog/layout.svelte": () => Promise.resolve().then(function() {
    return layout;
  })
};
var metadata_lookup = { "src/routes/__layout.svelte": { "entry": "pages/__layout.svelte-9ee50ac6.js", "css": ["assets/pages/__layout.svelte-2c0a7297.css", "assets/vendor-e5bb3ecd.css"], "js": ["pages/__layout.svelte-9ee50ac6.js", "chunks/vendor-a70f949e.js", "chunks/store-2c9da468.js"], "styles": [] }, "src/routes/__error.svelte": { "entry": "pages/__error.svelte-ed17eae8.js", "css": ["assets/vendor-e5bb3ecd.css"], "js": ["pages/__error.svelte-ed17eae8.js", "chunks/vendor-a70f949e.js"], "styles": [] }, "src/routes/index.svelte": { "entry": "pages/index.svelte-b696a596.js", "css": ["assets/pages/index.svelte-6a3ab3fb.css", "assets/vendor-e5bb3ecd.css"], "js": ["pages/index.svelte-b696a596.js", "chunks/vendor-a70f949e.js"], "styles": [] }, "src/routes/experience/index.svelte": { "entry": "pages/experience/index.svelte-c7e02e8b.js", "css": ["assets/pages/experience/index.svelte-6d9ecd69.css", "assets/vendor-e5bb3ecd.css"], "js": ["pages/experience/index.svelte-c7e02e8b.js", "chunks/vendor-a70f949e.js"], "styles": [] }, "src/routes/experience/layout.svelte": { "entry": "pages/experience/layout.svelte-996efeb7.js", "css": ["assets/pages/experience/layout.svelte-5adffccd.css", "assets/vendor-e5bb3ecd.css"], "js": ["pages/experience/layout.svelte-996efeb7.js", "chunks/vendor-a70f949e.js", "chunks/store-2c9da468.js"], "styles": [] }, "src/routes/experience/moksha.md": { "entry": "pages/experience/moksha.md-9e775145.js", "css": ["assets/vendor-e5bb3ecd.css", "assets/pages/experience/layout.svelte-5adffccd.css"], "js": ["pages/experience/moksha.md-9e775145.js", "chunks/vendor-a70f949e.js", "pages/experience/layout.svelte-996efeb7.js", "chunks/store-2c9da468.js"], "styles": [] }, "src/routes/experience/axios.md": { "entry": "pages/experience/axios.md-a97d7c3a.js", "css": ["assets/vendor-e5bb3ecd.css", "assets/pages/experience/layout.svelte-5adffccd.css"], "js": ["pages/experience/axios.md-a97d7c3a.js", "chunks/vendor-a70f949e.js", "pages/experience/layout.svelte-996efeb7.js", "chunks/store-2c9da468.js"], "styles": [] }, "src/routes/experience/socom.md": { "entry": "pages/experience/socom.md-df8bd314.js", "css": ["assets/vendor-e5bb3ecd.css", "assets/pages/experience/layout.svelte-5adffccd.css"], "js": ["pages/experience/socom.md-df8bd314.js", "chunks/vendor-a70f949e.js", "pages/experience/layout.svelte-996efeb7.js", "chunks/store-2c9da468.js"], "styles": [] }, "src/routes/experience/tpl.md": { "entry": "pages/experience/tpl.md-599e8f58.js", "css": ["assets/vendor-e5bb3ecd.css", "assets/pages/experience/layout.svelte-5adffccd.css"], "js": ["pages/experience/tpl.md-599e8f58.js", "chunks/vendor-a70f949e.js", "pages/experience/layout.svelte-996efeb7.js", "chunks/store-2c9da468.js"], "styles": [] }, "src/routes/projects/index.svelte": { "entry": "pages/projects/index.svelte-3dbd94bd.js", "css": ["assets/pages/projects/index.svelte-7e3694af.css", "assets/vendor-e5bb3ecd.css"], "js": ["pages/projects/index.svelte-3dbd94bd.js", "chunks/vendor-a70f949e.js"], "styles": [] }, "src/routes/projects/cudi-hums-copy-2.md": { "entry": "pages/projects/cudi-hums-copy-2.md-0b6cb164.js", "css": ["assets/vendor-e5bb3ecd.css", "assets/pages/experience/layout.svelte-5adffccd.css"], "js": ["pages/projects/cudi-hums-copy-2.md-0b6cb164.js", "chunks/vendor-a70f949e.js", "pages/projects/layout.svelte-f2a22434.js", "chunks/store-2c9da468.js"], "styles": [] }, "src/routes/projects/cudi-hums-copy-3.md": { "entry": "pages/projects/cudi-hums-copy-3.md-e19a3d06.js", "css": ["assets/vendor-e5bb3ecd.css", "assets/pages/experience/layout.svelte-5adffccd.css"], "js": ["pages/projects/cudi-hums-copy-3.md-e19a3d06.js", "chunks/vendor-a70f949e.js", "pages/projects/layout.svelte-f2a22434.js", "chunks/store-2c9da468.js"], "styles": [] }, "src/routes/projects/cudi-hums-copy.md": { "entry": "pages/projects/cudi-hums-copy.md-4f7acdfe.js", "css": ["assets/vendor-e5bb3ecd.css", "assets/pages/experience/layout.svelte-5adffccd.css"], "js": ["pages/projects/cudi-hums-copy.md-4f7acdfe.js", "chunks/vendor-a70f949e.js", "pages/projects/layout.svelte-f2a22434.js", "chunks/store-2c9da468.js"], "styles": [] }, "src/routes/projects/cudi-hums.md": { "entry": "pages/projects/cudi-hums.md-e52cb4df.js", "css": ["assets/vendor-e5bb3ecd.css", "assets/pages/experience/layout.svelte-5adffccd.css"], "js": ["pages/projects/cudi-hums.md-e52cb4df.js", "chunks/vendor-a70f949e.js", "pages/projects/layout.svelte-f2a22434.js", "chunks/store-2c9da468.js"], "styles": [] }, "src/routes/projects/layout.svelte": { "entry": "pages/projects/layout.svelte-f2a22434.js", "css": ["assets/pages/experience/layout.svelte-5adffccd.css", "assets/vendor-e5bb3ecd.css"], "js": ["pages/projects/layout.svelte-f2a22434.js", "chunks/vendor-a70f949e.js", "chunks/store-2c9da468.js"], "styles": [] }, "src/routes/blog/index.svelte": { "entry": "pages/blog/index.svelte-14c62f8f.js", "css": ["assets/pages/blog/index.svelte-d9b4a5c1.css", "assets/vendor-e5bb3ecd.css"], "js": ["pages/blog/index.svelte-14c62f8f.js", "chunks/vendor-a70f949e.js", "chunks/store-2c9da468.js"], "styles": [] }, "src/routes/blog/economist-table-replication-using-reactable.md": { "entry": "pages/blog/economist-table-replication-using-reactable.md-48de797f.js", "css": ["assets/Info.svelte_svelte&type=style&lang-5efaffaa.css", "assets/vendor-e5bb3ecd.css", "assets/pages/blog/layout.svelte-90305b41.css"], "js": ["pages/blog/economist-table-replication-using-reactable.md-48de797f.js", "chunks/vendor-a70f949e.js", "pages/blog/layout.svelte-b3dbe1c1.js", "chunks/store-2c9da468.js", "chunks/Image-aa9d4653.js"], "styles": [] }, "src/routes/blog/adding-a-chart-to-your-d3-tooltip.md": { "entry": "pages/blog/adding-a-chart-to-your-d3-tooltip.md-d19bf0a8.js", "css": ["assets/Info.svelte_svelte&type=style&lang-5efaffaa.css", "assets/vendor-e5bb3ecd.css", "assets/pages/blog/layout.svelte-90305b41.css"], "js": ["pages/blog/adding-a-chart-to-your-d3-tooltip.md-d19bf0a8.js", "chunks/vendor-a70f949e.js", "pages/blog/layout.svelte-b3dbe1c1.js", "chunks/store-2c9da468.js", "chunks/Image-aa9d4653.js", "chunks/Info-f78e0e8e.js"], "styles": [] }, "src/routes/blog/tidy-tuesday-powerlifting.md": { "entry": "pages/blog/tidy-tuesday-powerlifting.md-507fa080.js", "css": ["assets/Info.svelte_svelte&type=style&lang-5efaffaa.css", "assets/vendor-e5bb3ecd.css", "assets/pages/blog/layout.svelte-90305b41.css"], "js": ["pages/blog/tidy-tuesday-powerlifting.md-507fa080.js", "chunks/vendor-a70f949e.js", "pages/blog/layout.svelte-b3dbe1c1.js", "chunks/store-2c9da468.js", "chunks/Image-aa9d4653.js"], "styles": [] }, "src/routes/blog/tidy-tuesday-replication.md": { "entry": "pages/blog/tidy-tuesday-replication.md-2db83f88.js", "css": ["assets/Info.svelte_svelte&type=style&lang-5efaffaa.css", "assets/vendor-e5bb3ecd.css", "assets/pages/blog/layout.svelte-90305b41.css"], "js": ["pages/blog/tidy-tuesday-replication.md-2db83f88.js", "chunks/vendor-a70f949e.js", "pages/blog/layout.svelte-b3dbe1c1.js", "chunks/store-2c9da468.js", "chunks/Image-aa9d4653.js"], "styles": [] }, "src/routes/blog/automation-scrollytell.md": { "entry": "pages/blog/automation-scrollytell.md-e506d106.js", "css": ["assets/Info.svelte_svelte&type=style&lang-5efaffaa.css", "assets/vendor-e5bb3ecd.css", "assets/pages/blog/layout.svelte-90305b41.css"], "js": ["pages/blog/automation-scrollytell.md-e506d106.js", "chunks/vendor-a70f949e.js", "pages/blog/layout.svelte-b3dbe1c1.js", "chunks/store-2c9da468.js"], "styles": [] }, "src/routes/blog/animate-hugo-academic.md": { "entry": "pages/blog/animate-hugo-academic.md-a5e4186b.js", "css": ["assets/Info.svelte_svelte&type=style&lang-5efaffaa.css", "assets/vendor-e5bb3ecd.css", "assets/pages/blog/layout.svelte-90305b41.css"], "js": ["pages/blog/animate-hugo-academic.md-a5e4186b.js", "chunks/vendor-a70f949e.js", "pages/blog/layout.svelte-b3dbe1c1.js", "chunks/store-2c9da468.js", "chunks/Image-aa9d4653.js", "chunks/Info-f78e0e8e.js"], "styles": [] }, "src/routes/blog/introducing-tpltheme.md": { "entry": "pages/blog/introducing-tpltheme.md-7fa22711.js", "css": ["assets/Info.svelte_svelte&type=style&lang-5efaffaa.css", "assets/vendor-e5bb3ecd.css", "assets/pages/blog/layout.svelte-90305b41.css"], "js": ["pages/blog/introducing-tpltheme.md-7fa22711.js", "chunks/vendor-a70f949e.js", "pages/blog/layout.svelte-b3dbe1c1.js", "chunks/store-2c9da468.js", "chunks/Image-aa9d4653.js"], "styles": [] }, "src/routes/blog/color-in-data-vis.md": { "entry": "pages/blog/color-in-data-vis.md-880955e3.js", "css": ["assets/Info.svelte_svelte&type=style&lang-5efaffaa.css", "assets/vendor-e5bb3ecd.css", "assets/pages/blog/layout.svelte-90305b41.css"], "js": ["pages/blog/color-in-data-vis.md-880955e3.js", "chunks/vendor-a70f949e.js", "pages/blog/layout.svelte-b3dbe1c1.js", "chunks/store-2c9da468.js", "chunks/Image-aa9d4653.js"], "styles": [] }, "src/routes/blog/do-something-else.md": { "entry": "pages/blog/do-something-else.md-188159c3.js", "css": ["assets/Info.svelte_svelte&type=style&lang-5efaffaa.css", "assets/vendor-e5bb3ecd.css", "assets/pages/blog/layout.svelte-90305b41.css"], "js": ["pages/blog/do-something-else.md-188159c3.js", "chunks/vendor-a70f949e.js", "pages/blog/layout.svelte-b3dbe1c1.js", "chunks/store-2c9da468.js", "chunks/Image-aa9d4653.js", "chunks/Info-f78e0e8e.js"], "styles": [] }, "src/routes/blog/nuxt-blog-starter.md": { "entry": "pages/blog/nuxt-blog-starter.md-b4f7b8bc.js", "css": ["assets/Info.svelte_svelte&type=style&lang-5efaffaa.css", "assets/vendor-e5bb3ecd.css", "assets/pages/blog/layout.svelte-90305b41.css"], "js": ["pages/blog/nuxt-blog-starter.md-b4f7b8bc.js", "chunks/vendor-a70f949e.js", "pages/blog/layout.svelte-b3dbe1c1.js", "chunks/store-2c9da468.js", "chunks/Image-aa9d4653.js", "chunks/Info-f78e0e8e.js"], "styles": [] }, "src/routes/blog/covid-gun-spikes.md": { "entry": "pages/blog/covid-gun-spikes.md-8b39acfb.js", "css": ["assets/Info.svelte_svelte&type=style&lang-5efaffaa.css", "assets/vendor-e5bb3ecd.css", "assets/pages/blog/layout.svelte-90305b41.css", "assets/TableHandler-d632bac2.css"], "js": ["pages/blog/covid-gun-spikes.md-8b39acfb.js", "chunks/vendor-a70f949e.js", "pages/blog/layout.svelte-b3dbe1c1.js", "chunks/store-2c9da468.js", "chunks/Image-aa9d4653.js", "chunks/TableHandler-b5b402ea.js"], "styles": [] }, "src/routes/blog/covid-on-campus.md": { "entry": "pages/blog/covid-on-campus.md-98b44fe6.js", "css": ["assets/Info.svelte_svelte&type=style&lang-5efaffaa.css", "assets/vendor-e5bb3ecd.css", "assets/pages/blog/layout.svelte-90305b41.css", "assets/TableHandler-d632bac2.css"], "js": ["pages/blog/covid-on-campus.md-98b44fe6.js", "chunks/vendor-a70f949e.js", "pages/blog/layout.svelte-b3dbe1c1.js", "chunks/store-2c9da468.js", "chunks/Image-aa9d4653.js", "chunks/TableHandler-b5b402ea.js"], "styles": [] }, "src/routes/blog/map-springfield.md": { "entry": "pages/blog/map-springfield.md-84f278f7.js", "css": ["assets/Info.svelte_svelte&type=style&lang-5efaffaa.css", "assets/vendor-e5bb3ecd.css", "assets/pages/blog/layout.svelte-90305b41.css"], "js": ["pages/blog/map-springfield.md-84f278f7.js", "chunks/vendor-a70f949e.js", "pages/blog/layout.svelte-b3dbe1c1.js", "chunks/store-2c9da468.js", "chunks/Image-aa9d4653.js"], "styles": [] }, "src/routes/blog/dumbbell-plots.md": { "entry": "pages/blog/dumbbell-plots.md-0d177afd.js", "css": ["assets/Info.svelte_svelte&type=style&lang-5efaffaa.css", "assets/vendor-e5bb3ecd.css", "assets/pages/blog/layout.svelte-90305b41.css"], "js": ["pages/blog/dumbbell-plots.md-0d177afd.js", "chunks/vendor-a70f949e.js", "pages/blog/layout.svelte-b3dbe1c1.js", "chunks/store-2c9da468.js", "chunks/Image-aa9d4653.js"], "styles": [] }, "src/routes/blog/refugee-trends.md": { "entry": "pages/blog/refugee-trends.md-e1bbaf81.js", "css": ["assets/Info.svelte_svelte&type=style&lang-5efaffaa.css", "assets/vendor-e5bb3ecd.css", "assets/pages/blog/layout.svelte-90305b41.css"], "js": ["pages/blog/refugee-trends.md-e1bbaf81.js", "chunks/vendor-a70f949e.js", "pages/blog/layout.svelte-b3dbe1c1.js", "chunks/store-2c9da468.js", "chunks/Image-aa9d4653.js"], "styles": [] }, "src/routes/blog/svelte-scatter.md": { "entry": "pages/blog/svelte-scatter.md-eff26c19.js", "css": ["assets/Info.svelte_svelte&type=style&lang-5efaffaa.css", "assets/vendor-e5bb3ecd.css", "assets/pages/blog/layout.svelte-90305b41.css"], "js": ["pages/blog/svelte-scatter.md-eff26c19.js", "chunks/vendor-a70f949e.js", "pages/blog/layout.svelte-b3dbe1c1.js", "chunks/store-2c9da468.js", "chunks/Info-f78e0e8e.js"], "styles": [] }, "src/routes/blog/svelte-and-d3.md": { "entry": "pages/blog/svelte-and-d3.md-29949d09.js", "css": ["assets/pages/blog/svelte-and-d3.md-7e478bba.css", "assets/Info.svelte_svelte&type=style&lang-5efaffaa.css", "assets/vendor-e5bb3ecd.css", "assets/pages/blog/layout.svelte-90305b41.css"], "js": ["pages/blog/svelte-and-d3.md-29949d09.js", "chunks/vendor-a70f949e.js", "pages/blog/layout.svelte-b3dbe1c1.js", "chunks/store-2c9da468.js", "chunks/Info-f78e0e8e.js"], "styles": [] }, "src/routes/blog/covid-posts.md": { "entry": "pages/blog/covid-posts.md-d96a1095.js", "css": ["assets/Info.svelte_svelte&type=style&lang-5efaffaa.css", "assets/vendor-e5bb3ecd.css", "assets/pages/blog/layout.svelte-90305b41.css"], "js": ["pages/blog/covid-posts.md-d96a1095.js", "chunks/vendor-a70f949e.js", "pages/blog/layout.svelte-b3dbe1c1.js", "chunks/store-2c9da468.js", "chunks/Image-aa9d4653.js"], "styles": [] }, "src/routes/blog/flat-data-r.md": { "entry": "pages/blog/flat-data-r.md-fbf5075b.js", "css": ["assets/Info.svelte_svelte&type=style&lang-5efaffaa.css", "assets/vendor-e5bb3ecd.css", "assets/pages/blog/layout.svelte-90305b41.css"], "js": ["pages/blog/flat-data-r.md-fbf5075b.js", "chunks/vendor-a70f949e.js", "pages/blog/layout.svelte-b3dbe1c1.js", "chunks/store-2c9da468.js", "chunks/Image-aa9d4653.js", "chunks/Info-f78e0e8e.js"], "styles": [] }, "src/routes/blog/layout.svelte": { "entry": "pages/blog/layout.svelte-b3dbe1c1.js", "css": ["assets/pages/blog/layout.svelte-90305b41.css", "assets/vendor-e5bb3ecd.css"], "js": ["pages/blog/layout.svelte-b3dbe1c1.js", "chunks/vendor-a70f949e.js", "chunks/store-2c9da468.js"], "styles": [] } };
async function load_component(file) {
  const { entry, css: css2, js, styles } = metadata_lookup[file];
  return {
    module: await module_lookup[file](),
    entry: assets + "/_app/" + entry,
    css: css2.map((dep) => assets + "/_app/" + dep),
    js: js.map((dep) => assets + "/_app/" + dep),
    styles
  };
}
function render(request, {
  prerender
} = {}) {
  const host = request.headers["host"];
  return respond({ ...request, host }, options, { prerender });
}
async function get$2() {
  const imports = { "./experience/axios.md": () => Promise.resolve().then(function() {
    return axios;
  }), "./experience/moksha.md": () => Promise.resolve().then(function() {
    return moksha;
  }), "./experience/socom.md": () => Promise.resolve().then(function() {
    return socom;
  }), "./experience/tpl.md": () => Promise.resolve().then(function() {
    return tpl;
  }) };
  let body = [];
  for (const path in imports) {
    body.push(imports[path]().then(({ metadata: metadata2 }) => {
      return {
        metadata: metadata2,
        path
      };
    }));
  }
  const posts = await Promise.all(body);
  return {
    body: JSON.stringify(posts)
  };
}
var experience_json = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  get: get$2
});
async function get$1() {
  const imports = { "./projects/cudi-hums-copy-2.md": () => Promise.resolve().then(function() {
    return cudiHumsCopy2;
  }), "./projects/cudi-hums-copy-3.md": () => Promise.resolve().then(function() {
    return cudiHumsCopy3;
  }), "./projects/cudi-hums-copy.md": () => Promise.resolve().then(function() {
    return cudiHumsCopy;
  }), "./projects/cudi-hums.md": () => Promise.resolve().then(function() {
    return cudiHums;
  }) };
  let body = [];
  for (const path in imports) {
    body.push(imports[path]().then(({ metadata: metadata2 }) => {
      return {
        metadata: metadata2,
        path
      };
    }));
  }
  const projects = await Promise.all(body);
  return {
    body: JSON.stringify(projects)
  };
}
var projects_json = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  get: get$1
});
async function get() {
  const imports = { "./blog/adding-a-chart-to-your-d3-tooltip.md": () => Promise.resolve().then(function() {
    return addingAChartToYourD3Tooltip;
  }), "./blog/animate-hugo-academic.md": () => Promise.resolve().then(function() {
    return animateHugoAcademic;
  }), "./blog/automation-scrollytell.md": () => Promise.resolve().then(function() {
    return automationScrollytell;
  }), "./blog/color-in-data-vis.md": () => Promise.resolve().then(function() {
    return colorInDataVis;
  }), "./blog/covid-gun-spikes.md": () => Promise.resolve().then(function() {
    return covidGunSpikes;
  }), "./blog/covid-on-campus.md": () => Promise.resolve().then(function() {
    return covidOnCampus;
  }), "./blog/covid-posts.md": () => Promise.resolve().then(function() {
    return covidPosts;
  }), "./blog/do-something-else.md": () => Promise.resolve().then(function() {
    return doSomethingElse;
  }), "./blog/dumbbell-plots.md": () => Promise.resolve().then(function() {
    return dumbbellPlots;
  }), "./blog/economist-table-replication-using-reactable.md": () => Promise.resolve().then(function() {
    return economistTableReplicationUsingReactable;
  }), "./blog/flat-data-r.md": () => Promise.resolve().then(function() {
    return flatDataR;
  }), "./blog/introducing-tpltheme.md": () => Promise.resolve().then(function() {
    return introducingTpltheme;
  }), "./blog/map-springfield.md": () => Promise.resolve().then(function() {
    return mapSpringfield;
  }), "./blog/nuxt-blog-starter.md": () => Promise.resolve().then(function() {
    return nuxtBlogStarter;
  }), "./blog/refugee-trends.md": () => Promise.resolve().then(function() {
    return refugeeTrends;
  }), "./blog/svelte-and-d3.md": () => Promise.resolve().then(function() {
    return svelteAndD3;
  }), "./blog/svelte-scatter.md": () => Promise.resolve().then(function() {
    return svelteScatter;
  }), "./blog/tidy-tuesday-powerlifting.md": () => Promise.resolve().then(function() {
    return tidyTuesdayPowerlifting;
  }), "./blog/tidy-tuesday-replication.md": () => Promise.resolve().then(function() {
    return tidyTuesdayReplication;
  }) };
  let body = [];
  for (const path in imports) {
    body.push(imports[path]().then(({ metadata: metadata2 }) => {
      return {
        metadata: metadata2,
        path
      };
    }));
  }
  const posts = await Promise.all(body);
  return {
    body: JSON.stringify(posts)
  };
}
var posts_json = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  get
});
var subscriber_queue = [];
function writable(value, start = noop) {
  let stop;
  const subscribers = new Set();
  function set(new_value) {
    if (safe_not_equal(value, new_value)) {
      value = new_value;
      if (stop) {
        const run_queue = !subscriber_queue.length;
        for (const subscriber of subscribers) {
          subscriber[1]();
          subscriber_queue.push(subscriber, value);
        }
        if (run_queue) {
          for (let i = 0; i < subscriber_queue.length; i += 2) {
            subscriber_queue[i][0](subscriber_queue[i + 1]);
          }
          subscriber_queue.length = 0;
        }
      }
    }
  }
  function update(fn) {
    set(fn(value));
  }
  function subscribe2(run2, invalidate = noop) {
    const subscriber = [run2, invalidate];
    subscribers.add(subscriber);
    if (subscribers.size === 1) {
      stop = start(set) || noop;
    }
    run2(value);
    return () => {
      subscribers.delete(subscriber);
      if (subscribers.size === 0) {
        stop();
        stop = null;
      }
    };
  }
  return { set, update, subscribe: subscribe2 };
}
var seo = writable({
  title: "Connor Rothschild",
  description: "Description"
});
var Seo = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let $seo, $$unsubscribe_seo;
  $$unsubscribe_seo = subscribe(seo, (value) => $seo = value);
  $$unsubscribe_seo();
  return `${$$result.head += `${$$result.title = `<title>${escape($seo.title)}</title>`, ""}<meta name="${"description"}"${add_attribute("content", $seo.description, 0)} data-svelte="svelte-1w5w2bj">`, ""}`;
});
var getStores = () => {
  const stores = getContext("__svelte__");
  return {
    page: {
      subscribe: stores.page.subscribe
    },
    navigating: {
      subscribe: stores.navigating.subscribe
    },
    get preloading() {
      console.error("stores.preloading is deprecated; use stores.navigating instead");
      return {
        subscribe: stores.navigating.subscribe
      };
    },
    session: stores.session
  };
};
var page = {
  subscribe(fn) {
    const store = getStores().page;
    return store.subscribe(fn);
  }
};
var css$f = {
  code: "ul.svelte-193wuv4{width:90%;margin:0 auto;padding:1em;list-style-type:none;display:flex;justify-content:space-evenly}li.svelte-193wuv4{display:inline-block;padding:0;margin:0}a.svelte-193wuv4{color:var(--text-color);font-family:var(--font-serif);text-transform:uppercase}.current.svelte-193wuv4{color:var(--accent-color);border-bottom:2px solid var(--accent-color)}.current.svelte-193wuv4:hover{text-decoration:none}",
  map: '{"version":3,"file":"Nav.svelte","sources":["Nav.svelte"],"sourcesContent":["<script>\\n  import { page } from \\"$app/stores\\";\\n<\/script>\\n\\n<ul>\\n  <li>\\n    <a sveltekit:prefetch href=\\"/\\" class={$page.path == \\"/\\" ? \\"current\\" : \\"\\"}\\n      >Home</a\\n    >\\n  </li>\\n  <li>\\n    <a\\n      sveltekit:prefetch\\n      href=\\"/experience\\"\\n      class={$page.path == \\"/experience\\" ? \\"current\\" : \\"\\"}>Work</a\\n    >\\n  </li>\\n  <li>\\n    <a\\n      sveltekit:prefetch\\n      href=\\"/projects\\"\\n      class={$page.path == \\"/projects\\" ? \\"current\\" : \\"\\"}>Projects</a\\n    >\\n  </li>\\n  <li>\\n    <a\\n      sveltekit:prefetch\\n      href=\\"/blog\\"\\n      class={$page.path == \\"/blog\\" ? \\"current\\" : \\"\\"}>Blog</a\\n    >\\n  </li>\\n</ul>\\n\\n<style>\\n  /* nav {\\n    max-width: 768px;\\n    margin: 0 auto;\\n    padding: 1em;\\n  } */\\n  ul {\\n    width: 90%;\\n    margin: 0 auto;\\n    padding: 1em;\\n    list-style-type: none;\\n    display: flex;\\n    justify-content: space-evenly;\\n  }\\n\\n  li {\\n    display: inline-block;\\n    padding: 0;\\n    margin: 0;\\n  }\\n\\n  a {\\n    color: var(--text-color);\\n    font-family: var(--font-serif);\\n    text-transform: uppercase;\\n  }\\n\\n  .current {\\n    color: var(--accent-color);\\n    border-bottom: 2px solid var(--accent-color);\\n  }\\n\\n  .current:hover {\\n    text-decoration: none;\\n  }\\n</style>\\n"],"names":[],"mappings":"AAuCE,EAAE,eAAC,CAAC,AACF,KAAK,CAAE,GAAG,CACV,MAAM,CAAE,CAAC,CAAC,IAAI,CACd,OAAO,CAAE,GAAG,CACZ,eAAe,CAAE,IAAI,CACrB,OAAO,CAAE,IAAI,CACb,eAAe,CAAE,YAAY,AAC/B,CAAC,AAED,EAAE,eAAC,CAAC,AACF,OAAO,CAAE,YAAY,CACrB,OAAO,CAAE,CAAC,CACV,MAAM,CAAE,CAAC,AACX,CAAC,AAED,CAAC,eAAC,CAAC,AACD,KAAK,CAAE,IAAI,YAAY,CAAC,CACxB,WAAW,CAAE,IAAI,YAAY,CAAC,CAC9B,cAAc,CAAE,SAAS,AAC3B,CAAC,AAED,QAAQ,eAAC,CAAC,AACR,KAAK,CAAE,IAAI,cAAc,CAAC,CAC1B,aAAa,CAAE,GAAG,CAAC,KAAK,CAAC,IAAI,cAAc,CAAC,AAC9C,CAAC,AAED,uBAAQ,MAAM,AAAC,CAAC,AACd,eAAe,CAAE,IAAI,AACvB,CAAC"}'
};
var Nav = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let $page, $$unsubscribe_page;
  $$unsubscribe_page = subscribe(page, (value) => $page = value);
  $$result.css.add(css$f);
  $$unsubscribe_page();
  return `<ul class="${"svelte-193wuv4"}"><li class="${"svelte-193wuv4"}"><a sveltekit:prefetch href="${"/"}" class="${escape(null_to_empty($page.path == "/" ? "current" : "")) + " svelte-193wuv4"}">Home</a></li>
  <li class="${"svelte-193wuv4"}"><a sveltekit:prefetch href="${"/experience"}" class="${escape(null_to_empty($page.path == "/experience" ? "current" : "")) + " svelte-193wuv4"}">Work</a></li>
  <li class="${"svelte-193wuv4"}"><a sveltekit:prefetch href="${"/projects"}" class="${escape(null_to_empty($page.path == "/projects" ? "current" : "")) + " svelte-193wuv4"}">Projects</a></li>
  <li class="${"svelte-193wuv4"}"><a sveltekit:prefetch href="${"/blog"}" class="${escape(null_to_empty($page.path == "/blog" ? "current" : "")) + " svelte-193wuv4"}">Blog</a></li>
</ul>`;
});
function cubicOut(t) {
  const f = t - 1;
  return f * f * f + 1;
}
var PageTransition = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let { refresh = "" } = $$props;
  let { duration = 400 } = $$props;
  let isTransitioning;
  function setTransitioningForDuration() {
    isTransitioning = true;
    setTimeout(() => {
      isTransitioning = false;
    }, duration);
  }
  if ($$props.refresh === void 0 && $$bindings.refresh && refresh !== void 0)
    $$bindings.refresh(refresh);
  if ($$props.duration === void 0 && $$bindings.duration && duration !== void 0)
    $$bindings.duration(duration);
  {
    setTransitioningForDuration();
  }
  return `${$$result.head += `${isTransitioning == true ? `<style data-svelte="svelte-m4pd8v">body {
        overflow-x: hidden !important;
      }
      html {
        overflow-x: hidden !important;
      }
    </style>` : ``}`, ""}

<div>${slots.default ? slots.default({}) : ``}</div>`;
});
var load$4 = async ({ page: page2 }) => ({ props: { key: page2.path } });
var _layout = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let { key } = $$props;
  if ($$props.key === void 0 && $$bindings.key && key !== void 0)
    $$bindings.key(key);
  return `${validate_component(Seo, "Seo").$$render($$result, {}, {}, {})}

${validate_component(Nav, "Nav").$$render($$result, {}, {}, {})}
${validate_component(PageTransition, "PageTransition").$$render($$result, { refresh: key, duration: 1e3 }, {}, {
    default: () => `${slots.default ? slots.default({}) : ``}`
  })}

`;
});
var __layout = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  "default": _layout,
  load: load$4
});
function load$3({ error: error2, status }) {
  console.log(error2);
  return {
    props: {
      title: `${status}: ${error2.message}`,
      errorCode: `${error2.stack}`
    }
  };
}
var _error = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let { title } = $$props;
  let { errorCode } = $$props;
  if ($$props.title === void 0 && $$bindings.title && title !== void 0)
    $$bindings.title(title);
  if ($$props.errorCode === void 0 && $$bindings.errorCode && errorCode !== void 0)
    $$bindings.errorCode(errorCode);
  return `<h1>${escape(title)}</h1>

<p>${escape("Show")} the technical details
</p>
${``}`;
});
var __error = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  "default": _error,
  load: load$3
});
var css$e = {
  code: "div.svelte-19au29d{display:inline;user-select:none;cursor:pointer;transition:border-bottom 300ms linear}img.svelte-19au29d{vertical-align:middle;margin-bottom:1px;width:32px;height:32px}",
  map: '{"version":3,"file":"Spinner.svelte","sources":["Spinner.svelte"],"sourcesContent":["<script>\\n  import { quintOut } from \\"svelte/easing\\";\\n  import { fade, draw, fly } from \\"svelte/transition\\";\\n  import { cubicOut } from \\"svelte/easing\\";\\n\\n  export function expand(node, params) {\\n    const { delay = 0, duration = 400, easing = cubicOut } = params;\\n\\n    const w = parseFloat(getComputedStyle(node).strokeWidth);\\n\\n    return {\\n      delay,\\n      duration,\\n      easing,\\n      css: (t) => `opacity: ${t}; stroke-width: ${t * w}`,\\n    };\\n  }\\n\\n  export let options;\\n  let index = 0;\\n\\n  function increment() {\\n    let newIndex = index + 1 > options.length - 1 ? 0 : index + 1;\\n    return newIndex;\\n  }\\n\\n  $: currJob = options[index];\\n\\n  let color = {\\n    Axios: \\"#3b6be3\\",\\n    USSOCOM: \\"#BDAE50\\",\\n    \\"Texas Policy Lab\\": \\"#e54e4d\\",\\n  };\\n\\n  let hovered = false;\\n<\/script>\\n\\n<div\\n  style=\\"border-bottom: 4px solid {color[currJob]}\\"\\n  on:click={() => (index = increment())}\\n  on:mouseover={() => (hovered = true)}\\n>\\n  {currJob}\\n  <img src=\\"/images/icons/shuffle.svg\\" alt=\\"Shuffle icon\\" />\\n</div>\\n\\n<style>\\n  div {\\n    display: inline;\\n    user-select: none;\\n    cursor: pointer;\\n    transition: border-bottom 300ms linear;\\n  }\\n\\n  img {\\n    vertical-align: middle;\\n    margin-bottom: 1px;\\n    width: 32px;\\n    height: 32px;\\n  }\\n</style>\\n"],"names":[],"mappings":"AA+CE,GAAG,eAAC,CAAC,AACH,OAAO,CAAE,MAAM,CACf,WAAW,CAAE,IAAI,CACjB,MAAM,CAAE,OAAO,CACf,UAAU,CAAE,aAAa,CAAC,KAAK,CAAC,MAAM,AACxC,CAAC,AAED,GAAG,eAAC,CAAC,AACH,cAAc,CAAE,MAAM,CACtB,aAAa,CAAE,GAAG,CAClB,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,AACd,CAAC"}'
};
var Spinner = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let currJob;
  function expand(node, params) {
    const { delay = 0, duration = 400, easing = cubicOut } = params;
    const w = parseFloat(getComputedStyle(node).strokeWidth);
    return {
      delay,
      duration,
      easing,
      css: (t) => `opacity: ${t}; stroke-width: ${t * w}`
    };
  }
  let { options: options2 } = $$props;
  let index2 = 0;
  let color2 = {
    Axios: "#3b6be3",
    USSOCOM: "#BDAE50",
    "Texas Policy Lab": "#e54e4d"
  };
  if ($$props.expand === void 0 && $$bindings.expand && expand !== void 0)
    $$bindings.expand(expand);
  if ($$props.options === void 0 && $$bindings.options && options2 !== void 0)
    $$bindings.options(options2);
  $$result.css.add(css$e);
  currJob = options2[index2];
  return `<div style="${"border-bottom: 4px solid " + escape(color2[currJob])}" class="${"svelte-19au29d"}">${escape(currJob)}
  <img src="${"/images/icons/shuffle.svg"}" alt="${"Shuffle icon"}" class="${"svelte-19au29d"}">
</div>`;
});
var css$d = {
  code: "main.svelte-1aw74na{max-width:780px;margin:0 auto;padding:1em;margin-bottom:2rem}section.svelte-1aw74na{display:flex;flex-direction:column;justify-content:center;align-items:flex-start;flex:1}h1.svelte-1aw74na{margin:3rem 0 2rem;font-size:64px;text-align:left;letter-spacing:-1px}h2.svelte-1aw74na{font-size:32px;line-height:1.5;margin-bottom:2rem;font-weight:300}p.svelte-1aw74na{margin-bottom:1rem}@media(max-width: 768px){h1.svelte-1aw74na{font-size:3.5rem}h2.svelte-1aw74na{font-size:1.75rem}}",
  map: `{"version":3,"file":"index.svelte","sources":["index.svelte"],"sourcesContent":["<script>\\n  import Spinner from \\"$lib/Spinner.svelte\\";\\n  let options = [\\"Axios\\", \\"Texas Policy Lab\\", \\"USSOCOM\\"];\\n<\/script>\\n\\n<main>\\n  <section>\\n    <h1 style=\\"font-weight: 200;\\">\\n      Hi, I'm <span class=\\"accented\\" style=\\"font-weight: 600;\\"\\n        >Connor Rothschild</span\\n      >\\n    </h1>\\n    <h2>\\n      I'm a data scientist who specializes in telling visual stories on the web.\\n      Right now, I'm doing that at <a\\n        href=\\"https://www.mokshadata.com/\\"\\n        target=\\"_blank\\">Moksha Data</a\\n      >. Previously, I did similar work at <Spinner {options} />\\n    </h2>\\n  </section>\\n\\n  <section class=\\"content\\">\\n    <p>\\n      During my time at Rice University, I found that nothing motivates me like <em\\n        >impact</em\\n      >. Lorem ipsum dolor sit amet consectetur, adipisicing elit. Illo,\\n      explicabo? Blanditiis, laborum aliquid odit magni possimus numquam\\n      necessitatibus cumque vel. Impedit animi possimus culpa explicabo mollitia\\n      fugit delectus dolores qui!\\n    </p>\\n    <p>\\n      Lorem ipsum dolor sit amet consectetur, adipisicing elit. Illo, explicabo?\\n      Blanditiis, laborum aliquid odit magni possimus numquam necessitatibus\\n      cumque vel. Impedit animi possimus culpa explicabo mollitia fugit delectus\\n      dolores qui!\\n    </p>\\n\\n    <a sveltekit:prefetch href=\\"/blog\\" class=\\"pulled-right padding-bottom\\"\\n      >See my blog &#8594;</a\\n    >\\n  </section>\\n</main>\\n\\n<style>\\n  main {\\n    max-width: 780px;\\n    margin: 0 auto;\\n    padding: 1em;\\n    margin-bottom: 2rem;\\n  }\\n\\n  section {\\n    display: flex;\\n    flex-direction: column;\\n    justify-content: center;\\n    align-items: flex-start;\\n    flex: 1;\\n  }\\n\\n  h1 {\\n    /* border-bottom: 1px solid var(--accent-color);\\n    padding-bottom: 0.3em; */\\n    margin: 3rem 0 2rem;\\n    font-size: 64px;\\n    /* width: 100%; */\\n    text-align: left;\\n    letter-spacing: -1px;\\n  }\\n\\n  h2 {\\n    font-size: 32px;\\n    line-height: 1.5;\\n    margin-bottom: 2rem;\\n    font-weight: 300;\\n  }\\n\\n  p {\\n    margin-bottom: 1rem;\\n  }\\n\\n  @media (max-width: 768px) {\\n    h1 {\\n      font-size: 3.5rem;\\n    }\\n    h2 {\\n      font-size: 1.75rem;\\n    }\\n  }\\n</style>\\n"],"names":[],"mappings":"AA4CE,IAAI,eAAC,CAAC,AACJ,SAAS,CAAE,KAAK,CAChB,MAAM,CAAE,CAAC,CAAC,IAAI,CACd,OAAO,CAAE,GAAG,CACZ,aAAa,CAAE,IAAI,AACrB,CAAC,AAED,OAAO,eAAC,CAAC,AACP,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,MAAM,CACtB,eAAe,CAAE,MAAM,CACvB,WAAW,CAAE,UAAU,CACvB,IAAI,CAAE,CAAC,AACT,CAAC,AAED,EAAE,eAAC,CAAC,AAGF,MAAM,CAAE,IAAI,CAAC,CAAC,CAAC,IAAI,CACnB,SAAS,CAAE,IAAI,CAEf,UAAU,CAAE,IAAI,CAChB,cAAc,CAAE,IAAI,AACtB,CAAC,AAED,EAAE,eAAC,CAAC,AACF,SAAS,CAAE,IAAI,CACf,WAAW,CAAE,GAAG,CAChB,aAAa,CAAE,IAAI,CACnB,WAAW,CAAE,GAAG,AAClB,CAAC,AAED,CAAC,eAAC,CAAC,AACD,aAAa,CAAE,IAAI,AACrB,CAAC,AAED,MAAM,AAAC,YAAY,KAAK,CAAC,AAAC,CAAC,AACzB,EAAE,eAAC,CAAC,AACF,SAAS,CAAE,MAAM,AACnB,CAAC,AACD,EAAE,eAAC,CAAC,AACF,SAAS,CAAE,OAAO,AACpB,CAAC,AACH,CAAC"}`
};
var Routes = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let options2 = ["Axios", "Texas Policy Lab", "USSOCOM"];
  $$result.css.add(css$d);
  return `<main class="${"svelte-1aw74na"}"><section class="${"svelte-1aw74na"}"><h1 style="${"font-weight: 200;"}" class="${"svelte-1aw74na"}">Hi, I&#39;m <span class="${"accented"}" style="${"font-weight: 600;"}">Connor Rothschild</span></h1>
    <h2 class="${"svelte-1aw74na"}">I&#39;m a data scientist who specializes in telling visual stories on the web.
      Right now, I&#39;m doing that at <a href="${"https://www.mokshadata.com/"}" target="${"_blank"}">Moksha Data</a>. Previously, I did similar work at ${validate_component(Spinner, "Spinner").$$render($$result, { options: options2 }, {}, {})}</h2></section>

  <section class="${"content svelte-1aw74na"}"><p class="${"svelte-1aw74na"}">During my time at Rice University, I found that nothing motivates me like <em>impact</em>. Lorem ipsum dolor sit amet consectetur, adipisicing elit. Illo,
      explicabo? Blanditiis, laborum aliquid odit magni possimus numquam
      necessitatibus cumque vel. Impedit animi possimus culpa explicabo mollitia
      fugit delectus dolores qui!
    </p>
    <p class="${"svelte-1aw74na"}">Lorem ipsum dolor sit amet consectetur, adipisicing elit. Illo, explicabo?
      Blanditiis, laborum aliquid odit magni possimus numquam necessitatibus
      cumque vel. Impedit animi possimus culpa explicabo mollitia fugit delectus
      dolores qui!
    </p>

    <a sveltekit:prefetch href="${"/blog"}" class="${"pulled-right padding-bottom"}">See my blog \u2192</a></section>
</main>`;
});
var index$3 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  "default": Routes
});
var css$c = {
  code: ".job-container.svelte-gkdjpt.svelte-gkdjpt{padding:2rem 0;border-bottom:1px dashed var(--accent-color);display:flex;align-items:center;justify-content:space-between}h2.svelte-gkdjpt.svelte-gkdjpt{font-size:44px;font-weight:200;text-transform:uppercase;letter-spacing:0.64px;transition:all 300ms linear}h3.svelte-gkdjpt.svelte-gkdjpt{font-size:34px}.job-image.svelte-gkdjpt.svelte-gkdjpt{margin-left:12px;width:40px;transition:width 300ms ease}.job-container.hovered.svelte-gkdjpt.svelte-gkdjpt{cursor:pointer;border-bottom:1px solid var(--accent-color)}.job-container.hovered.svelte-gkdjpt h2.svelte-gkdjpt{color:var(--accent-color);text-decoration:none !important;letter-spacing:1px}.job-container.hovered.svelte-gkdjpt h3.svelte-gkdjpt{color:var(--accent-color);animation:svelte-gkdjpt-right 1s ease infinite;text-decoration:none}a.svelte-gkdjpt.svelte-gkdjpt:hover{text-decoration:none}@keyframes svelte-gkdjpt-right{0%{transform:translateX(0px)}50%{transform:translateX(5px)}100%{transform:translateX(0px)}}@media(max-width: 768px){h2.svelte-gkdjpt.svelte-gkdjpt{font-size:2rem !important}.job-container.svelte-gkdjpt.svelte-gkdjpt{padding:0.5em 0;height:100px}.job-image.svelte-gkdjpt.svelte-gkdjpt{width:32.5px;margin-left:8px}}@media(max-width: 560px){.job-container.svelte-gkdjpt.svelte-gkdjpt{padding:0.5em 0;height:100px}}@media(max-width: 400px){h2.svelte-gkdjpt.svelte-gkdjpt{font-size:1.5rem !important}.job-image.svelte-gkdjpt.svelte-gkdjpt{width:25px}}",
  map: `{"version":3,"file":"JobSection.svelte","sources":["JobSection.svelte"],"sourcesContent":["<script>\\n  export let job;\\n  export let slug;\\n\\n  let hovered = false;\\n<\/script>\\n\\n<a\\n  class=\\"job-container {hovered ? 'hovered' : ''}\\"\\n  on:mouseover={() => (hovered = true)}\\n  on:mouseout={() => (hovered = false)}\\n  sveltekit:prefetch\\n  href={slug}\\n>\\n  <div style=\\"display: flex; place-items: center;\\">\\n    <h2>{job.name}</h2>\\n    <img\\n      src=\\"/images/jobs/{job.imageUrl}.svg\\"\\n      class=\\"job-image {hovered ? 'hovered' : ''}\\"\\n      alt=\\"logo\\"\\n    />\\n  </div>\\n  <h3>&#8594;</h3>\\n</a>\\n\\n<style>\\n  .job-container {\\n    padding: 2rem 0;\\n    border-bottom: 1px dashed var(--accent-color);\\n    display: flex;\\n    align-items: center;\\n    justify-content: space-between;\\n  }\\n\\n  h2 {\\n    font-size: 44px;\\n    font-weight: 200;\\n    text-transform: uppercase;\\n    letter-spacing: 0.64px;\\n    transition: all 300ms linear;\\n  }\\n\\n  h3 {\\n    font-size: 34px;\\n  }\\n\\n  .job-image {\\n    margin-left: 12px;\\n    width: 40px;\\n    transition: width 300ms ease;\\n  }\\n\\n  .job-container.hovered {\\n    cursor: pointer;\\n    border-bottom: 1px solid var(--accent-color);\\n  }\\n\\n  .job-container.hovered h2 {\\n    color: var(--accent-color);\\n    text-decoration: none !important;\\n    letter-spacing: 1px;\\n  }\\n\\n  .job-container.hovered h3 {\\n    color: var(--accent-color);\\n    animation: right 1s ease infinite;\\n    text-decoration: none;\\n  }\\n\\n  a:hover {\\n    text-decoration: none;\\n  }\\n\\n  @keyframes right {\\n    0% {\\n      transform: translateX(0px);\\n    }\\n    50% {\\n      transform: translateX(5px);\\n    }\\n    100% {\\n      transform: translateX(0px);\\n    }\\n  }\\n\\n  /* TABLET */\\n  @media (max-width: 768px) {\\n    h2 {\\n      font-size: 2rem !important;\\n    }\\n    .job-container {\\n      padding: 0.5em 0;\\n      height: 100px;\\n    }\\n    .job-image {\\n      width: 32.5px;\\n      margin-left: 8px;\\n    }\\n  }\\n\\n  /* MOBILE */\\n  @media (max-width: 560px) {\\n    .job-container {\\n      padding: 0.5em 0;\\n      height: 100px;\\n    }\\n  }\\n\\n  /* TINY */\\n  @media (max-width: 400px) {\\n    h2 {\\n      font-size: 1.5rem !important;\\n    }\\n    .job-image {\\n      width: 25px;\\n    }\\n  }\\n  /* .logos {\\n    display: flex;\\n    flex-direction: row;\\n    place-items: center;\\n  }\\n\\n  .job-image {\\n    margin-left: 1em;\\n  }\\n  .job-image {\\n    filter: blur(2px) grayscale(0.8);\\n    transition: filter 400ms ease;\\n    cursor: pointer;\\n  }\\n\\n  .job-image.hovered {\\n    filter: blur(0) grayscale(0.8);\\n  } */\\n\\n  /* .job-image {\\n    transition: transform 0.3s ease-in-out;\\n  }\\n\\n  .job-image.hovered {\\n    transform: rotate(360deg);\\n  } */\\n</style>\\n"],"names":[],"mappings":"AA0BE,cAAc,4BAAC,CAAC,AACd,OAAO,CAAE,IAAI,CAAC,CAAC,CACf,aAAa,CAAE,GAAG,CAAC,MAAM,CAAC,IAAI,cAAc,CAAC,CAC7C,OAAO,CAAE,IAAI,CACb,WAAW,CAAE,MAAM,CACnB,eAAe,CAAE,aAAa,AAChC,CAAC,AAED,EAAE,4BAAC,CAAC,AACF,SAAS,CAAE,IAAI,CACf,WAAW,CAAE,GAAG,CAChB,cAAc,CAAE,SAAS,CACzB,cAAc,CAAE,MAAM,CACtB,UAAU,CAAE,GAAG,CAAC,KAAK,CAAC,MAAM,AAC9B,CAAC,AAED,EAAE,4BAAC,CAAC,AACF,SAAS,CAAE,IAAI,AACjB,CAAC,AAED,UAAU,4BAAC,CAAC,AACV,WAAW,CAAE,IAAI,CACjB,KAAK,CAAE,IAAI,CACX,UAAU,CAAE,KAAK,CAAC,KAAK,CAAC,IAAI,AAC9B,CAAC,AAED,cAAc,QAAQ,4BAAC,CAAC,AACtB,MAAM,CAAE,OAAO,CACf,aAAa,CAAE,GAAG,CAAC,KAAK,CAAC,IAAI,cAAc,CAAC,AAC9C,CAAC,AAED,cAAc,sBAAQ,CAAC,EAAE,cAAC,CAAC,AACzB,KAAK,CAAE,IAAI,cAAc,CAAC,CAC1B,eAAe,CAAE,IAAI,CAAC,UAAU,CAChC,cAAc,CAAE,GAAG,AACrB,CAAC,AAED,cAAc,sBAAQ,CAAC,EAAE,cAAC,CAAC,AACzB,KAAK,CAAE,IAAI,cAAc,CAAC,CAC1B,SAAS,CAAE,mBAAK,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CACjC,eAAe,CAAE,IAAI,AACvB,CAAC,AAED,6BAAC,MAAM,AAAC,CAAC,AACP,eAAe,CAAE,IAAI,AACvB,CAAC,AAED,WAAW,mBAAM,CAAC,AAChB,EAAE,AAAC,CAAC,AACF,SAAS,CAAE,WAAW,GAAG,CAAC,AAC5B,CAAC,AACD,GAAG,AAAC,CAAC,AACH,SAAS,CAAE,WAAW,GAAG,CAAC,AAC5B,CAAC,AACD,IAAI,AAAC,CAAC,AACJ,SAAS,CAAE,WAAW,GAAG,CAAC,AAC5B,CAAC,AACH,CAAC,AAGD,MAAM,AAAC,YAAY,KAAK,CAAC,AAAC,CAAC,AACzB,EAAE,4BAAC,CAAC,AACF,SAAS,CAAE,IAAI,CAAC,UAAU,AAC5B,CAAC,AACD,cAAc,4BAAC,CAAC,AACd,OAAO,CAAE,KAAK,CAAC,CAAC,CAChB,MAAM,CAAE,KAAK,AACf,CAAC,AACD,UAAU,4BAAC,CAAC,AACV,KAAK,CAAE,MAAM,CACb,WAAW,CAAE,GAAG,AAClB,CAAC,AACH,CAAC,AAGD,MAAM,AAAC,YAAY,KAAK,CAAC,AAAC,CAAC,AACzB,cAAc,4BAAC,CAAC,AACd,OAAO,CAAE,KAAK,CAAC,CAAC,CAChB,MAAM,CAAE,KAAK,AACf,CAAC,AACH,CAAC,AAGD,MAAM,AAAC,YAAY,KAAK,CAAC,AAAC,CAAC,AACzB,EAAE,4BAAC,CAAC,AACF,SAAS,CAAE,MAAM,CAAC,UAAU,AAC9B,CAAC,AACD,UAAU,4BAAC,CAAC,AACV,KAAK,CAAE,IAAI,AACb,CAAC,AACH,CAAC"}`
};
var JobSection = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let { job } = $$props;
  let { slug } = $$props;
  if ($$props.job === void 0 && $$bindings.job && job !== void 0)
    $$bindings.job(job);
  if ($$props.slug === void 0 && $$bindings.slug && slug !== void 0)
    $$bindings.slug(slug);
  $$result.css.add(css$c);
  return `<a class="${"job-container " + escape("") + " svelte-gkdjpt"}" sveltekit:prefetch${add_attribute("href", slug, 0)}><div style="${"display: flex; place-items: center;"}"><h2 class="${"svelte-gkdjpt"}">${escape(job.name)}</h2>
    <img src="${"/images/jobs/" + escape(job.imageUrl) + ".svg"}" class="${"job-image " + escape("") + " svelte-gkdjpt"}" alt="${"logo"}"></div>
  <h3 class="${"svelte-gkdjpt"}">\u2192</h3>
</a>`;
});
var css$b = {
  code: "main.svelte-1k3c6fk{width:90vw;max-width:860px;margin:0 auto;padding:1em}",
  map: `{"version":3,"file":"index.svelte","sources":["index.svelte"],"sourcesContent":["<script context=\\"module\\">\\n  /**\\n   * @type {import('@sveltejs/kit').Load}\\n   */\\n  export async function load({ fetch }) {\\n    const res = await fetch(\`/experience.json\`);\\n    const jobs = await res.json();\\n    return {\\n      props: {\\n        jobs,\\n      },\\n    };\\n  }\\n<\/script>\\n\\n<script>\\n  import JobSection from \\"$lib/JobSection.svelte\\";\\n  export let jobs;\\n<\/script>\\n\\n<main>\\n  <h1 class=\\"page-overline\\">Experience</h1>\\n  <h1 class=\\"page-title\\">\\n    Where I've\\n    <span class=\\"accented bolded \\">worked</span>\\n  </h1>\\n\\n  {#each jobs as job}\\n    <JobSection job={job.metadata} slug={job.path.replace(/\\\\.[^/.]+$/, \\"\\")} />\\n  {/each}\\n</main>\\n\\n<style>\\n  main {\\n    width: 90vw;\\n    max-width: 860px;\\n    margin: 0 auto;\\n    padding: 1em;\\n  }\\n\\n  /* .page-title {\\n    font-size: 2.5rem !important;\\n  } */\\n</style>\\n"],"names":[],"mappings":"AAiCE,IAAI,eAAC,CAAC,AACJ,KAAK,CAAE,IAAI,CACX,SAAS,CAAE,KAAK,CAChB,MAAM,CAAE,CAAC,CAAC,IAAI,CACd,OAAO,CAAE,GAAG,AACd,CAAC"}`
};
async function load$2({ fetch: fetch2 }) {
  const res = await fetch2(`/experience.json`);
  const jobs = await res.json();
  return { props: { jobs } };
}
var Experience = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let { jobs } = $$props;
  if ($$props.jobs === void 0 && $$bindings.jobs && jobs !== void 0)
    $$bindings.jobs(jobs);
  $$result.css.add(css$b);
  return `<main class="${"svelte-1k3c6fk"}"><h1 class="${"page-overline"}">Experience</h1>
  <h1 class="${"page-title"}">Where I&#39;ve
    <span class="${"accented bolded "}">worked</span></h1>

  ${each(jobs, (job) => `${validate_component(JobSection, "JobSection").$$render($$result, {
    job: job.metadata,
    slug: job.path.replace(/\.[^/.]+$/, "")
  }, {}, {})}`)}
</main>`;
});
var index$2 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  "default": Experience,
  load: load$2
});
var css$a = {
  code: "main.svelte-1k8xgre{max-width:768px;margin:0 auto;padding:1em;width:90vw}.post.svelte-1k8xgre{margin-bottom:4rem}",
  map: '{"version":3,"file":"layout.svelte","sources":["layout.svelte"],"sourcesContent":["<script>\\n  import { onMount } from \\"svelte\\";\\n  import { seo } from \\"$lib/store\\";\\n\\n  export let name;\\n  export let description;\\n  // export let imageUrl;\\n\\n  $seo = {\\n    title: name,\\n    description: description,\\n  };\\n<\/script>\\n\\n<main>\\n  <h1 class=\\"page-title\\">{name}</h1>\\n  <div class=\\"post\\">\\n    <slot />\\n  </div>\\n  <a class=\\"border-top no-underline block\\" sveltekit:prefetch href=\\"/experience\\"\\n    >&#8592; Back to all jobs</a\\n  >\\n</main>\\n\\n<style>\\n  main {\\n    max-width: 768px;\\n    margin: 0 auto;\\n    padding: 1em;\\n    width: 90vw;\\n  }\\n\\n  .post {\\n    margin-bottom: 4rem;\\n  }\\n\\n  .date {\\n    font-weight: 300;\\n    margin-top: -1rem;\\n    font-size: 1.5rem;\\n    margin-bottom: 2rem;\\n    border-bottom: 1px solid var(--accent-color);\\n    padding-bottom: 1rem;\\n  }\\n</style>\\n"],"names":[],"mappings":"AAyBE,IAAI,eAAC,CAAC,AACJ,SAAS,CAAE,KAAK,CAChB,MAAM,CAAE,CAAC,CAAC,IAAI,CACd,OAAO,CAAE,GAAG,CACZ,KAAK,CAAE,IAAI,AACb,CAAC,AAED,KAAK,eAAC,CAAC,AACL,aAAa,CAAE,IAAI,AACrB,CAAC"}'
};
var Layout$2 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let $seo, $$unsubscribe_seo;
  $$unsubscribe_seo = subscribe(seo, (value) => $seo = value);
  let { name } = $$props;
  let { description } = $$props;
  set_store_value(seo, $seo = { title: name, description }, $seo);
  if ($$props.name === void 0 && $$bindings.name && name !== void 0)
    $$bindings.name(name);
  if ($$props.description === void 0 && $$bindings.description && description !== void 0)
    $$bindings.description(description);
  $$result.css.add(css$a);
  $$unsubscribe_seo();
  return `<main class="${"svelte-1k8xgre"}"><h1 class="${"page-title"}">${escape(name)}</h1>
  <div class="${"post svelte-1k8xgre"}">${slots.default ? slots.default({}) : ``}</div>
  <a class="${"border-top no-underline block"}" sveltekit:prefetch href="${"/experience"}">\u2190 Back to all jobs</a>
</main>`;
});
var layout$2 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  "default": Layout$2
});
var metadata$q = {
  "layout": "experience",
  "name": "Moksha Data",
  "imageUrl": "moksha",
  "description": "Lorem"
};
var Moksha = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Layout$2, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign($$props, metadata$q), {}, {})}`;
});
var moksha = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  "default": Moksha,
  metadata: metadata$q
});
var metadata$p = {
  "layout": "experience",
  "name": "Axios",
  "imageUrl": "axios",
  "description": "Lorem"
};
var Axios = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Layout$2, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign($$props, metadata$p), {}, {})}`;
});
var axios = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  "default": Axios,
  metadata: metadata$p
});
var metadata$o = {
  "layout": "experience",
  "name": "USSOCOM",
  "imageUrl": "socom",
  "description": "Lorem"
};
var Socom = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Layout$2, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign($$props, metadata$o), {}, {})}`;
});
var socom = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  "default": Socom,
  metadata: metadata$o
});
var metadata$n = {
  "layout": "experience",
  "name": "Texas Policy Lab",
  "imageUrl": "tpl",
  "description": "Lorem"
};
var Tpl = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Layout$2, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign($$props, metadata$n), {}, {})}`;
});
var tpl = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  "default": Tpl,
  metadata: metadata$n
});
var css$9 = {
  code: ".project.svelte-1apxzrz{position:relative}.project-image.svelte-1apxzrz{width:100%;height:100%;object-fit:cover;border-radius:3px;box-shadow:1px 1px 4px #b2b2b2}.hovered-gradient.svelte-1apxzrz{position:absolute;background-image:linear-gradient(\n      to bottom,\n      rgba(255, 255, 255, 0),\n      rgba(0, 0, 0, 0.52)\n    );width:100%;height:100%;background-size:cover;pointer-events:none}.project-text.svelte-1apxzrz{position:absolute;bottom:0;left:0;pointer-events:none;padding:0.5rem 0.5rem 1rem 1rem}h1.svelte-1apxzrz,h2.svelte-1apxzrz{color:white}h1.svelte-1apxzrz{font-size:1.5rem;text-shadow:1px 1px 6px black}.description.svelte-1apxzrz{font-size:1rem;margin-top:12px;font-weight:200;letter-spacing:0.44px}",
  map: '{"version":3,"file":"ProjectSection.svelte","sources":["ProjectSection.svelte"],"sourcesContent":["<script>\\n  export let project;\\n  export let slug;\\n\\n  import { fly, fade } from \\"svelte/transition\\";\\n\\n  let hovered = false;\\n<\/script>\\n\\n<a class=\\"project no-underline\\" href={slug} sveltekit:prefetch>\\n  {#if hovered}\\n    <div transition:fade={{ duration: 200 }} class=\\"hovered-gradient\\" />{/if}\\n  <img\\n    src=\\"./images/projects/{project.imageUrl}.png\\"\\n    alt=\\"Project image for {project.name}\\"\\n    class=\\"project-image\\"\\n    on:mouseover={() => {\\n      hovered = true;\\n    }}\\n    on:mouseout={() => {\\n      hovered = false;\\n    }}\\n    class:hovered\\n  />\\n  {#if hovered}\\n    <div\\n      in:fly={{ y: 50, duration: 200 }}\\n      out:fade={{ duration: 200 }}\\n      class=\\"project-text\\"\\n    >\\n      <h1>{project.name}</h1>\\n      <h2 class=\\"description\\">{project.description}</h2>\\n    </div>{/if}\\n</a>\\n\\n<style>\\n  .project {\\n    position: relative;\\n  }\\n\\n  .project-image {\\n    width: 100%;\\n    height: 100%;\\n    object-fit: cover;\\n    border-radius: 3px;\\n    box-shadow: 1px 1px 4px #b2b2b2;\\n    /* transition: filter 300ms ease; */\\n  }\\n\\n  .project-image.hovered {\\n    /* filter: brightness(0.7); */\\n  }\\n\\n  .hovered-gradient {\\n    position: absolute;\\n    background-image: linear-gradient(\\n      to bottom,\\n      rgba(255, 255, 255, 0),\\n      rgba(0, 0, 0, 0.52)\\n    );\\n    width: 100%;\\n    height: 100%;\\n    background-size: cover;\\n    pointer-events: none;\\n  }\\n\\n  .project-text {\\n    position: absolute;\\n    bottom: 0;\\n    left: 0;\\n    pointer-events: none;\\n    padding: 0.5rem 0.5rem 1rem 1rem;\\n  }\\n\\n  h1,\\n  h2 {\\n    color: white;\\n  }\\n\\n  h1 {\\n    font-size: 1.5rem;\\n    text-shadow: 1px 1px 6px black;\\n  }\\n\\n  .description {\\n    font-size: 1rem;\\n    margin-top: 12px;\\n    font-weight: 200;\\n    letter-spacing: 0.44px;\\n    /* text-shadow: 1px 1px 1 0px black; */\\n  }\\n</style>\\n"],"names":[],"mappings":"AAoCE,QAAQ,eAAC,CAAC,AACR,QAAQ,CAAE,QAAQ,AACpB,CAAC,AAED,cAAc,eAAC,CAAC,AACd,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,CACZ,UAAU,CAAE,KAAK,CACjB,aAAa,CAAE,GAAG,CAClB,UAAU,CAAE,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,OAAO,AAEjC,CAAC,AAMD,iBAAiB,eAAC,CAAC,AACjB,QAAQ,CAAE,QAAQ,CAClB,gBAAgB,CAAE;MAChB,EAAE,CAAC,MAAM,CAAC;MACV,KAAK,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;MACvB,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;KACpB,CACD,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,CACZ,eAAe,CAAE,KAAK,CACtB,cAAc,CAAE,IAAI,AACtB,CAAC,AAED,aAAa,eAAC,CAAC,AACb,QAAQ,CAAE,QAAQ,CAClB,MAAM,CAAE,CAAC,CACT,IAAI,CAAE,CAAC,CACP,cAAc,CAAE,IAAI,CACpB,OAAO,CAAE,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,AAClC,CAAC,AAED,iBAAE,CACF,EAAE,eAAC,CAAC,AACF,KAAK,CAAE,KAAK,AACd,CAAC,AAED,EAAE,eAAC,CAAC,AACF,SAAS,CAAE,MAAM,CACjB,WAAW,CAAE,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,KAAK,AAChC,CAAC,AAED,YAAY,eAAC,CAAC,AACZ,SAAS,CAAE,IAAI,CACf,UAAU,CAAE,IAAI,CAChB,WAAW,CAAE,GAAG,CAChB,cAAc,CAAE,MAAM,AAExB,CAAC"}'
};
var ProjectSection = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let { project } = $$props;
  let { slug } = $$props;
  if ($$props.project === void 0 && $$bindings.project && project !== void 0)
    $$bindings.project(project);
  if ($$props.slug === void 0 && $$bindings.slug && slug !== void 0)
    $$bindings.slug(slug);
  $$result.css.add(css$9);
  return `<a class="${"project no-underline svelte-1apxzrz"}"${add_attribute("href", slug, 0)} sveltekit:prefetch>${``}
  <img src="${"./images/projects/" + escape(project.imageUrl) + ".png"}" alt="${"Project image for " + escape(project.name)}" class="${["project-image svelte-1apxzrz", ""].join(" ").trim()}">
  ${``}
</a>`;
});
var css$8 = {
  code: "main.svelte-1wf2rgn{width:90vw;max-width:860px;margin:0 auto;padding:1em}.projects-container.svelte-1wf2rgn{display:grid;grid-template-columns:repeat(2, 1fr);grid-gap:10px;margin-bottom:10px}.button.svelte-1wf2rgn{margin:12px 0 12px auto}@media screen and (max-width: 660px){.projects-container.svelte-1wf2rgn{grid-template-columns:auto;grid-template-rows:repeat(1, 1fr)}}",
  map: `{"version":3,"file":"index.svelte","sources":["index.svelte"],"sourcesContent":["<script context=\\"module\\">\\n  /**\\n   * @type {import('@sveltejs/kit').Load}\\n   */\\n  export async function load({ fetch }) {\\n    const res = await fetch(\`/projects.json\`);\\n    const projects = await res.json();\\n    return {\\n      props: {\\n        projects,\\n      },\\n    };\\n  }\\n<\/script>\\n\\n<script>\\n  import { slide } from \\"svelte/transition\\";\\n  import ProjectSection from \\"$lib/ProjectSection.svelte\\";\\n  export let projects;\\n\\n  let featuredProjects = projects.filter((d) => d.metadata.featured == true);\\n  let otherProjects = projects.filter((d) => !d.metadata.featured == true);\\n\\n  let showAll = false;\\n<\/script>\\n\\n<main>\\n  <h1 class=\\"page-overline\\">Projects</h1>\\n  <h1 class=\\"page-title\\">\\n    What I've <span class=\\"accented bolded\\">built</span>\\n  </h1>\\n\\n  <div class=\\"projects-container\\">\\n    {#each featuredProjects as project}\\n      <ProjectSection\\n        project={project.metadata}\\n        slug={project.path.replace(/\\\\.[^/.]+$/, \\"\\")}\\n      />\\n    {/each}\\n  </div>\\n  {#if showAll}\\n    <div transition:slide class=\\"projects-container\\">\\n      {#each otherProjects as project}\\n        <ProjectSection\\n          project={project.metadata}\\n          slug={project.path.replace(/\\\\.[^/.]+$/, \\"\\")}\\n        />\\n      {/each}\\n    </div>\\n  {/if}\\n  <button\\n    class=\\"button pulled-right block\\"\\n    on:click={() => {\\n      showAll = !showAll;\\n    }}\\n  >\\n    {showAll ? \\"Hide others\\" : \\"Show all\\"}\\n    <span style=\\"font-size: .85rem; vertical-align: top;\\">\\n      {showAll ? \\"\u2191\\" : \\"\u2193\\"}</span\\n    >\\n  </button>\\n</main>\\n\\n<style>\\n  main {\\n    width: 90vw;\\n    max-width: 860px;\\n    margin: 0 auto;\\n    padding: 1em;\\n  }\\n\\n  .projects-container {\\n    display: grid;\\n    grid-template-columns: repeat(2, 1fr);\\n    grid-gap: 10px;\\n    margin-bottom: 10px;\\n  }\\n\\n  .button {\\n    margin: 12px 0 12px auto;\\n  }\\n\\n  @media screen and (max-width: 660px) {\\n    .projects-container {\\n      grid-template-columns: auto;\\n      grid-template-rows: repeat(1, 1fr);\\n    }\\n  }\\n</style>\\n"],"names":[],"mappings":"AAgEE,IAAI,eAAC,CAAC,AACJ,KAAK,CAAE,IAAI,CACX,SAAS,CAAE,KAAK,CAChB,MAAM,CAAE,CAAC,CAAC,IAAI,CACd,OAAO,CAAE,GAAG,AACd,CAAC,AAED,mBAAmB,eAAC,CAAC,AACnB,OAAO,CAAE,IAAI,CACb,qBAAqB,CAAE,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,CACrC,QAAQ,CAAE,IAAI,CACd,aAAa,CAAE,IAAI,AACrB,CAAC,AAED,OAAO,eAAC,CAAC,AACP,MAAM,CAAE,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,AAC1B,CAAC,AAED,OAAO,MAAM,CAAC,GAAG,CAAC,YAAY,KAAK,CAAC,AAAC,CAAC,AACpC,mBAAmB,eAAC,CAAC,AACnB,qBAAqB,CAAE,IAAI,CAC3B,kBAAkB,CAAE,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,AACpC,CAAC,AACH,CAAC"}`
};
async function load$1({ fetch: fetch2 }) {
  const res = await fetch2(`/projects.json`);
  const projects = await res.json();
  return { props: { projects } };
}
var Projects = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let { projects } = $$props;
  let featuredProjects = projects.filter((d) => d.metadata.featured == true);
  projects.filter((d) => !d.metadata.featured == true);
  if ($$props.projects === void 0 && $$bindings.projects && projects !== void 0)
    $$bindings.projects(projects);
  $$result.css.add(css$8);
  return `<main class="${"svelte-1wf2rgn"}"><h1 class="${"page-overline"}">Projects</h1>
  <h1 class="${"page-title"}">What I&#39;ve <span class="${"accented bolded"}">built</span></h1>

  <div class="${"projects-container svelte-1wf2rgn"}">${each(featuredProjects, (project) => `${validate_component(ProjectSection, "ProjectSection").$$render($$result, {
    project: project.metadata,
    slug: project.path.replace(/\.[^/.]+$/, "")
  }, {}, {})}`)}</div>
  ${``}
  <button class="${"button pulled-right block svelte-1wf2rgn"}">${escape("Show all")}
    <span style="${"font-size: .85rem; vertical-align: top;"}">${escape("\u2193")}</span></button>
</main>`;
});
var index$1 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  "default": Projects,
  load: load$1
});
var css$7 = {
  code: "main.svelte-1k8xgre{max-width:768px;margin:0 auto;padding:1em;width:90vw}.post.svelte-1k8xgre{margin-bottom:4rem}",
  map: '{"version":3,"file":"layout.svelte","sources":["layout.svelte"],"sourcesContent":["<script>\\n  import { onMount } from \\"svelte\\";\\n  import { seo } from \\"$lib/store\\";\\n\\n  export let name;\\n  export let description;\\n\\n  $seo = {\\n    title: name,\\n    description: description,\\n  };\\n<\/script>\\n\\n<main>\\n  <h1 class=\\"page-title\\">{name}</h1>\\n  <div class=\\"post\\">\\n    <slot />\\n  </div>\\n  <a class=\\"border-top no-underline block\\" sveltekit:prefetch href=\\"/projects\\"\\n    >&#8592; Back to all projects</a\\n  >\\n</main>\\n\\n<style>\\n  main {\\n    max-width: 768px;\\n    margin: 0 auto;\\n    padding: 1em;\\n    width: 90vw;\\n  }\\n\\n  .post {\\n    margin-bottom: 4rem;\\n  }\\n\\n  .date {\\n    font-weight: 300;\\n    margin-top: -1rem;\\n    font-size: 1.5rem;\\n    margin-bottom: 2rem;\\n    border-bottom: 1px solid var(--accent-color);\\n    padding-bottom: 1rem;\\n  }\\n</style>\\n"],"names":[],"mappings":"AAwBE,IAAI,eAAC,CAAC,AACJ,SAAS,CAAE,KAAK,CAChB,MAAM,CAAE,CAAC,CAAC,IAAI,CACd,OAAO,CAAE,GAAG,CACZ,KAAK,CAAE,IAAI,AACb,CAAC,AAED,KAAK,eAAC,CAAC,AACL,aAAa,CAAE,IAAI,AACrB,CAAC"}'
};
var Layout$1 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let $seo, $$unsubscribe_seo;
  $$unsubscribe_seo = subscribe(seo, (value) => $seo = value);
  let { name } = $$props;
  let { description } = $$props;
  set_store_value(seo, $seo = { title: name, description }, $seo);
  if ($$props.name === void 0 && $$bindings.name && name !== void 0)
    $$bindings.name(name);
  if ($$props.description === void 0 && $$bindings.description && description !== void 0)
    $$bindings.description(description);
  $$result.css.add(css$7);
  $$unsubscribe_seo();
  return `<main class="${"svelte-1k8xgre"}"><h1 class="${"page-title"}">${escape(name)}</h1>
  <div class="${"post svelte-1k8xgre"}">${slots.default ? slots.default({}) : ``}</div>
  <a class="${"border-top no-underline block"}" sveltekit:prefetch href="${"/projects"}">\u2190 Back to all projects</a>
</main>`;
});
var layout$1 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  "default": Layout$1
});
var metadata$m = {
  "layout": "project",
  "name": "How Much Does Kid Cudi Hum?",
  "imageUrl": "cudi-hums",
  "description": "Lorem lorem ipsum lorem ipsum lorem ipsum lorem ipsum lorem ipsum lorem ipsum lorem ipsum lorem ipsum lorem ipsum lorem ipsum"
};
var Cudi_hums_copy_2 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Layout$1, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign($$props, metadata$m), {}, {})}`;
});
var cudiHumsCopy2 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  "default": Cudi_hums_copy_2,
  metadata: metadata$m
});
var metadata$l = {
  "layout": "project",
  "name": "How Much Does Kid Cudi Hum?",
  "imageUrl": "cudi-hums",
  "description": "Lorem"
};
var Cudi_hums_copy_3 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Layout$1, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign($$props, metadata$l), {}, {})}`;
});
var cudiHumsCopy3 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  "default": Cudi_hums_copy_3,
  metadata: metadata$l
});
var metadata$k = {
  "layout": "project",
  "name": "How Much Does Kid Cudi Hum?",
  "imageUrl": "cudi-hums",
  "description": "Lorem"
};
var Cudi_hums_copy = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Layout$1, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign($$props, metadata$k), {}, {})}`;
});
var cudiHumsCopy = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  "default": Cudi_hums_copy,
  metadata: metadata$k
});
var metadata$j = {
  "layout": "project",
  "name": "How Much Does Kid Cudi Hum?",
  "imageUrl": "cudi-hums",
  "featured": true,
  "description": "Lorem"
};
var Cudi_hums = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Layout$1, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign($$props, metadata$j), {}, {
    default: () => `<p>Lorem ipsum lorem</p>
<p>Hey</p>
<p>lol</p>`
  })}`;
});
var cudiHums = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  "default": Cudi_hums,
  metadata: metadata$j
});
function ascending(a, b) {
  return a == null || b == null ? NaN : a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
}
function bisector(f) {
  let delta = f;
  let compare1 = f;
  let compare2 = f;
  if (f.length === 1) {
    delta = (d, x) => f(d) - x;
    compare1 = ascending;
    compare2 = (d, x) => ascending(f(d), x);
  }
  function left(a, x, lo = 0, hi = a.length) {
    if (lo < hi) {
      if (compare1(x, x) !== 0)
        return hi;
      do {
        const mid = lo + hi >>> 1;
        if (compare2(a[mid], x) < 0)
          lo = mid + 1;
        else
          hi = mid;
      } while (lo < hi);
    }
    return lo;
  }
  function right(a, x, lo = 0, hi = a.length) {
    if (lo < hi) {
      if (compare1(x, x) !== 0)
        return hi;
      do {
        const mid = lo + hi >>> 1;
        if (compare2(a[mid], x) <= 0)
          lo = mid + 1;
        else
          hi = mid;
      } while (lo < hi);
    }
    return lo;
  }
  function center(a, x, lo = 0, hi = a.length) {
    const i = left(a, x, lo, hi - 1);
    return i > lo && delta(a[i - 1], x) > -delta(a[i], x) ? i - 1 : i;
  }
  return { left, center, right };
}
function number$1(x) {
  return x === null ? NaN : +x;
}
var ascendingBisect = bisector(ascending);
var bisectRight = ascendingBisect.right;
bisector(number$1).center;
var bisect = bisectRight;
var e10 = Math.sqrt(50);
var e5 = Math.sqrt(10);
var e2 = Math.sqrt(2);
function ticks(start, stop, count) {
  var reverse, i = -1, n, ticks2, step;
  stop = +stop, start = +start, count = +count;
  if (start === stop && count > 0)
    return [start];
  if (reverse = stop < start)
    n = start, start = stop, stop = n;
  if ((step = tickIncrement(start, stop, count)) === 0 || !isFinite(step))
    return [];
  if (step > 0) {
    let r0 = Math.round(start / step), r1 = Math.round(stop / step);
    if (r0 * step < start)
      ++r0;
    if (r1 * step > stop)
      --r1;
    ticks2 = new Array(n = r1 - r0 + 1);
    while (++i < n)
      ticks2[i] = (r0 + i) * step;
  } else {
    step = -step;
    let r0 = Math.round(start * step), r1 = Math.round(stop * step);
    if (r0 / step < start)
      ++r0;
    if (r1 / step > stop)
      --r1;
    ticks2 = new Array(n = r1 - r0 + 1);
    while (++i < n)
      ticks2[i] = (r0 + i) / step;
  }
  if (reverse)
    ticks2.reverse();
  return ticks2;
}
function tickIncrement(start, stop, count) {
  var step = (stop - start) / Math.max(0, count), power = Math.floor(Math.log(step) / Math.LN10), error2 = step / Math.pow(10, power);
  return power >= 0 ? (error2 >= e10 ? 10 : error2 >= e5 ? 5 : error2 >= e2 ? 2 : 1) * Math.pow(10, power) : -Math.pow(10, -power) / (error2 >= e10 ? 10 : error2 >= e5 ? 5 : error2 >= e2 ? 2 : 1);
}
function tickStep(start, stop, count) {
  var step0 = Math.abs(stop - start) / Math.max(0, count), step1 = Math.pow(10, Math.floor(Math.log(step0) / Math.LN10)), error2 = step0 / step1;
  if (error2 >= e10)
    step1 *= 10;
  else if (error2 >= e5)
    step1 *= 5;
  else if (error2 >= e2)
    step1 *= 2;
  return stop < start ? -step1 : step1;
}
function initRange(domain, range) {
  switch (arguments.length) {
    case 0:
      break;
    case 1:
      this.range(domain);
      break;
    default:
      this.range(range).domain(domain);
      break;
  }
  return this;
}
function define(constructor, factory, prototype) {
  constructor.prototype = factory.prototype = prototype;
  prototype.constructor = constructor;
}
function extend(parent, definition) {
  var prototype = Object.create(parent.prototype);
  for (var key in definition)
    prototype[key] = definition[key];
  return prototype;
}
function Color() {
}
var darker = 0.7;
var brighter = 1 / darker;
var reI = "\\s*([+-]?\\d+)\\s*";
var reN = "\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*";
var reP = "\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*";
var reHex = /^#([0-9a-f]{3,8})$/;
var reRgbInteger = new RegExp("^rgb\\(" + [reI, reI, reI] + "\\)$");
var reRgbPercent = new RegExp("^rgb\\(" + [reP, reP, reP] + "\\)$");
var reRgbaInteger = new RegExp("^rgba\\(" + [reI, reI, reI, reN] + "\\)$");
var reRgbaPercent = new RegExp("^rgba\\(" + [reP, reP, reP, reN] + "\\)$");
var reHslPercent = new RegExp("^hsl\\(" + [reN, reP, reP] + "\\)$");
var reHslaPercent = new RegExp("^hsla\\(" + [reN, reP, reP, reN] + "\\)$");
var named = {
  aliceblue: 15792383,
  antiquewhite: 16444375,
  aqua: 65535,
  aquamarine: 8388564,
  azure: 15794175,
  beige: 16119260,
  bisque: 16770244,
  black: 0,
  blanchedalmond: 16772045,
  blue: 255,
  blueviolet: 9055202,
  brown: 10824234,
  burlywood: 14596231,
  cadetblue: 6266528,
  chartreuse: 8388352,
  chocolate: 13789470,
  coral: 16744272,
  cornflowerblue: 6591981,
  cornsilk: 16775388,
  crimson: 14423100,
  cyan: 65535,
  darkblue: 139,
  darkcyan: 35723,
  darkgoldenrod: 12092939,
  darkgray: 11119017,
  darkgreen: 25600,
  darkgrey: 11119017,
  darkkhaki: 12433259,
  darkmagenta: 9109643,
  darkolivegreen: 5597999,
  darkorange: 16747520,
  darkorchid: 10040012,
  darkred: 9109504,
  darksalmon: 15308410,
  darkseagreen: 9419919,
  darkslateblue: 4734347,
  darkslategray: 3100495,
  darkslategrey: 3100495,
  darkturquoise: 52945,
  darkviolet: 9699539,
  deeppink: 16716947,
  deepskyblue: 49151,
  dimgray: 6908265,
  dimgrey: 6908265,
  dodgerblue: 2003199,
  firebrick: 11674146,
  floralwhite: 16775920,
  forestgreen: 2263842,
  fuchsia: 16711935,
  gainsboro: 14474460,
  ghostwhite: 16316671,
  gold: 16766720,
  goldenrod: 14329120,
  gray: 8421504,
  green: 32768,
  greenyellow: 11403055,
  grey: 8421504,
  honeydew: 15794160,
  hotpink: 16738740,
  indianred: 13458524,
  indigo: 4915330,
  ivory: 16777200,
  khaki: 15787660,
  lavender: 15132410,
  lavenderblush: 16773365,
  lawngreen: 8190976,
  lemonchiffon: 16775885,
  lightblue: 11393254,
  lightcoral: 15761536,
  lightcyan: 14745599,
  lightgoldenrodyellow: 16448210,
  lightgray: 13882323,
  lightgreen: 9498256,
  lightgrey: 13882323,
  lightpink: 16758465,
  lightsalmon: 16752762,
  lightseagreen: 2142890,
  lightskyblue: 8900346,
  lightslategray: 7833753,
  lightslategrey: 7833753,
  lightsteelblue: 11584734,
  lightyellow: 16777184,
  lime: 65280,
  limegreen: 3329330,
  linen: 16445670,
  magenta: 16711935,
  maroon: 8388608,
  mediumaquamarine: 6737322,
  mediumblue: 205,
  mediumorchid: 12211667,
  mediumpurple: 9662683,
  mediumseagreen: 3978097,
  mediumslateblue: 8087790,
  mediumspringgreen: 64154,
  mediumturquoise: 4772300,
  mediumvioletred: 13047173,
  midnightblue: 1644912,
  mintcream: 16121850,
  mistyrose: 16770273,
  moccasin: 16770229,
  navajowhite: 16768685,
  navy: 128,
  oldlace: 16643558,
  olive: 8421376,
  olivedrab: 7048739,
  orange: 16753920,
  orangered: 16729344,
  orchid: 14315734,
  palegoldenrod: 15657130,
  palegreen: 10025880,
  paleturquoise: 11529966,
  palevioletred: 14381203,
  papayawhip: 16773077,
  peachpuff: 16767673,
  peru: 13468991,
  pink: 16761035,
  plum: 14524637,
  powderblue: 11591910,
  purple: 8388736,
  rebeccapurple: 6697881,
  red: 16711680,
  rosybrown: 12357519,
  royalblue: 4286945,
  saddlebrown: 9127187,
  salmon: 16416882,
  sandybrown: 16032864,
  seagreen: 3050327,
  seashell: 16774638,
  sienna: 10506797,
  silver: 12632256,
  skyblue: 8900331,
  slateblue: 6970061,
  slategray: 7372944,
  slategrey: 7372944,
  snow: 16775930,
  springgreen: 65407,
  steelblue: 4620980,
  tan: 13808780,
  teal: 32896,
  thistle: 14204888,
  tomato: 16737095,
  turquoise: 4251856,
  violet: 15631086,
  wheat: 16113331,
  white: 16777215,
  whitesmoke: 16119285,
  yellow: 16776960,
  yellowgreen: 10145074
};
define(Color, color, {
  copy: function(channels) {
    return Object.assign(new this.constructor(), this, channels);
  },
  displayable: function() {
    return this.rgb().displayable();
  },
  hex: color_formatHex,
  formatHex: color_formatHex,
  formatHsl: color_formatHsl,
  formatRgb: color_formatRgb,
  toString: color_formatRgb
});
function color_formatHex() {
  return this.rgb().formatHex();
}
function color_formatHsl() {
  return hslConvert(this).formatHsl();
}
function color_formatRgb() {
  return this.rgb().formatRgb();
}
function color(format22) {
  var m, l;
  format22 = (format22 + "").trim().toLowerCase();
  return (m = reHex.exec(format22)) ? (l = m[1].length, m = parseInt(m[1], 16), l === 6 ? rgbn(m) : l === 3 ? new Rgb(m >> 8 & 15 | m >> 4 & 240, m >> 4 & 15 | m & 240, (m & 15) << 4 | m & 15, 1) : l === 8 ? rgba(m >> 24 & 255, m >> 16 & 255, m >> 8 & 255, (m & 255) / 255) : l === 4 ? rgba(m >> 12 & 15 | m >> 8 & 240, m >> 8 & 15 | m >> 4 & 240, m >> 4 & 15 | m & 240, ((m & 15) << 4 | m & 15) / 255) : null) : (m = reRgbInteger.exec(format22)) ? new Rgb(m[1], m[2], m[3], 1) : (m = reRgbPercent.exec(format22)) ? new Rgb(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, 1) : (m = reRgbaInteger.exec(format22)) ? rgba(m[1], m[2], m[3], m[4]) : (m = reRgbaPercent.exec(format22)) ? rgba(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, m[4]) : (m = reHslPercent.exec(format22)) ? hsla(m[1], m[2] / 100, m[3] / 100, 1) : (m = reHslaPercent.exec(format22)) ? hsla(m[1], m[2] / 100, m[3] / 100, m[4]) : named.hasOwnProperty(format22) ? rgbn(named[format22]) : format22 === "transparent" ? new Rgb(NaN, NaN, NaN, 0) : null;
}
function rgbn(n) {
  return new Rgb(n >> 16 & 255, n >> 8 & 255, n & 255, 1);
}
function rgba(r, g, b, a) {
  if (a <= 0)
    r = g = b = NaN;
  return new Rgb(r, g, b, a);
}
function rgbConvert(o) {
  if (!(o instanceof Color))
    o = color(o);
  if (!o)
    return new Rgb();
  o = o.rgb();
  return new Rgb(o.r, o.g, o.b, o.opacity);
}
function rgb$1(r, g, b, opacity) {
  return arguments.length === 1 ? rgbConvert(r) : new Rgb(r, g, b, opacity == null ? 1 : opacity);
}
function Rgb(r, g, b, opacity) {
  this.r = +r;
  this.g = +g;
  this.b = +b;
  this.opacity = +opacity;
}
define(Rgb, rgb$1, extend(Color, {
  brighter: function(k) {
    k = k == null ? brighter : Math.pow(brighter, k);
    return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);
  },
  darker: function(k) {
    k = k == null ? darker : Math.pow(darker, k);
    return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);
  },
  rgb: function() {
    return this;
  },
  displayable: function() {
    return -0.5 <= this.r && this.r < 255.5 && (-0.5 <= this.g && this.g < 255.5) && (-0.5 <= this.b && this.b < 255.5) && (0 <= this.opacity && this.opacity <= 1);
  },
  hex: rgb_formatHex,
  formatHex: rgb_formatHex,
  formatRgb: rgb_formatRgb,
  toString: rgb_formatRgb
}));
function rgb_formatHex() {
  return "#" + hex(this.r) + hex(this.g) + hex(this.b);
}
function rgb_formatRgb() {
  var a = this.opacity;
  a = isNaN(a) ? 1 : Math.max(0, Math.min(1, a));
  return (a === 1 ? "rgb(" : "rgba(") + Math.max(0, Math.min(255, Math.round(this.r) || 0)) + ", " + Math.max(0, Math.min(255, Math.round(this.g) || 0)) + ", " + Math.max(0, Math.min(255, Math.round(this.b) || 0)) + (a === 1 ? ")" : ", " + a + ")");
}
function hex(value) {
  value = Math.max(0, Math.min(255, Math.round(value) || 0));
  return (value < 16 ? "0" : "") + value.toString(16);
}
function hsla(h, s2, l, a) {
  if (a <= 0)
    h = s2 = l = NaN;
  else if (l <= 0 || l >= 1)
    h = s2 = NaN;
  else if (s2 <= 0)
    h = NaN;
  return new Hsl(h, s2, l, a);
}
function hslConvert(o) {
  if (o instanceof Hsl)
    return new Hsl(o.h, o.s, o.l, o.opacity);
  if (!(o instanceof Color))
    o = color(o);
  if (!o)
    return new Hsl();
  if (o instanceof Hsl)
    return o;
  o = o.rgb();
  var r = o.r / 255, g = o.g / 255, b = o.b / 255, min = Math.min(r, g, b), max = Math.max(r, g, b), h = NaN, s2 = max - min, l = (max + min) / 2;
  if (s2) {
    if (r === max)
      h = (g - b) / s2 + (g < b) * 6;
    else if (g === max)
      h = (b - r) / s2 + 2;
    else
      h = (r - g) / s2 + 4;
    s2 /= l < 0.5 ? max + min : 2 - max - min;
    h *= 60;
  } else {
    s2 = l > 0 && l < 1 ? 0 : h;
  }
  return new Hsl(h, s2, l, o.opacity);
}
function hsl(h, s2, l, opacity) {
  return arguments.length === 1 ? hslConvert(h) : new Hsl(h, s2, l, opacity == null ? 1 : opacity);
}
function Hsl(h, s2, l, opacity) {
  this.h = +h;
  this.s = +s2;
  this.l = +l;
  this.opacity = +opacity;
}
define(Hsl, hsl, extend(Color, {
  brighter: function(k) {
    k = k == null ? brighter : Math.pow(brighter, k);
    return new Hsl(this.h, this.s, this.l * k, this.opacity);
  },
  darker: function(k) {
    k = k == null ? darker : Math.pow(darker, k);
    return new Hsl(this.h, this.s, this.l * k, this.opacity);
  },
  rgb: function() {
    var h = this.h % 360 + (this.h < 0) * 360, s2 = isNaN(h) || isNaN(this.s) ? 0 : this.s, l = this.l, m2 = l + (l < 0.5 ? l : 1 - l) * s2, m1 = 2 * l - m2;
    return new Rgb(hsl2rgb(h >= 240 ? h - 240 : h + 120, m1, m2), hsl2rgb(h, m1, m2), hsl2rgb(h < 120 ? h + 240 : h - 120, m1, m2), this.opacity);
  },
  displayable: function() {
    return (0 <= this.s && this.s <= 1 || isNaN(this.s)) && (0 <= this.l && this.l <= 1) && (0 <= this.opacity && this.opacity <= 1);
  },
  formatHsl: function() {
    var a = this.opacity;
    a = isNaN(a) ? 1 : Math.max(0, Math.min(1, a));
    return (a === 1 ? "hsl(" : "hsla(") + (this.h || 0) + ", " + (this.s || 0) * 100 + "%, " + (this.l || 0) * 100 + "%" + (a === 1 ? ")" : ", " + a + ")");
  }
}));
function hsl2rgb(h, m1, m2) {
  return (h < 60 ? m1 + (m2 - m1) * h / 60 : h < 180 ? m2 : h < 240 ? m1 + (m2 - m1) * (240 - h) / 60 : m1) * 255;
}
var constant = (x) => () => x;
function linear$1(a, d) {
  return function(t) {
    return a + t * d;
  };
}
function exponential(a, b, y) {
  return a = Math.pow(a, y), b = Math.pow(b, y) - a, y = 1 / y, function(t) {
    return Math.pow(a + t * b, y);
  };
}
function gamma(y) {
  return (y = +y) === 1 ? nogamma : function(a, b) {
    return b - a ? exponential(a, b, y) : constant(isNaN(a) ? b : a);
  };
}
function nogamma(a, b) {
  var d = b - a;
  return d ? linear$1(a, d) : constant(isNaN(a) ? b : a);
}
var rgb = function rgbGamma(y) {
  var color2 = gamma(y);
  function rgb2(start, end) {
    var r = color2((start = rgb$1(start)).r, (end = rgb$1(end)).r), g = color2(start.g, end.g), b = color2(start.b, end.b), opacity = nogamma(start.opacity, end.opacity);
    return function(t) {
      start.r = r(t);
      start.g = g(t);
      start.b = b(t);
      start.opacity = opacity(t);
      return start + "";
    };
  }
  rgb2.gamma = rgbGamma;
  return rgb2;
}(1);
function numberArray(a, b) {
  if (!b)
    b = [];
  var n = a ? Math.min(b.length, a.length) : 0, c = b.slice(), i;
  return function(t) {
    for (i = 0; i < n; ++i)
      c[i] = a[i] * (1 - t) + b[i] * t;
    return c;
  };
}
function isNumberArray(x) {
  return ArrayBuffer.isView(x) && !(x instanceof DataView);
}
function genericArray(a, b) {
  var nb = b ? b.length : 0, na = a ? Math.min(nb, a.length) : 0, x = new Array(na), c = new Array(nb), i;
  for (i = 0; i < na; ++i)
    x[i] = interpolate(a[i], b[i]);
  for (; i < nb; ++i)
    c[i] = b[i];
  return function(t) {
    for (i = 0; i < na; ++i)
      c[i] = x[i](t);
    return c;
  };
}
function date(a, b) {
  var d = new Date();
  return a = +a, b = +b, function(t) {
    return d.setTime(a * (1 - t) + b * t), d;
  };
}
function interpolateNumber(a, b) {
  return a = +a, b = +b, function(t) {
    return a * (1 - t) + b * t;
  };
}
function object(a, b) {
  var i = {}, c = {}, k;
  if (a === null || typeof a !== "object")
    a = {};
  if (b === null || typeof b !== "object")
    b = {};
  for (k in b) {
    if (k in a) {
      i[k] = interpolate(a[k], b[k]);
    } else {
      c[k] = b[k];
    }
  }
  return function(t) {
    for (k in i)
      c[k] = i[k](t);
    return c;
  };
}
var reA = /[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g;
var reB = new RegExp(reA.source, "g");
function zero(b) {
  return function() {
    return b;
  };
}
function one(b) {
  return function(t) {
    return b(t) + "";
  };
}
function string(a, b) {
  var bi = reA.lastIndex = reB.lastIndex = 0, am, bm, bs, i = -1, s2 = [], q = [];
  a = a + "", b = b + "";
  while ((am = reA.exec(a)) && (bm = reB.exec(b))) {
    if ((bs = bm.index) > bi) {
      bs = b.slice(bi, bs);
      if (s2[i])
        s2[i] += bs;
      else
        s2[++i] = bs;
    }
    if ((am = am[0]) === (bm = bm[0])) {
      if (s2[i])
        s2[i] += bm;
      else
        s2[++i] = bm;
    } else {
      s2[++i] = null;
      q.push({ i, x: interpolateNumber(am, bm) });
    }
    bi = reB.lastIndex;
  }
  if (bi < b.length) {
    bs = b.slice(bi);
    if (s2[i])
      s2[i] += bs;
    else
      s2[++i] = bs;
  }
  return s2.length < 2 ? q[0] ? one(q[0].x) : zero(b) : (b = q.length, function(t) {
    for (var i2 = 0, o; i2 < b; ++i2)
      s2[(o = q[i2]).i] = o.x(t);
    return s2.join("");
  });
}
function interpolate(a, b) {
  var t = typeof b, c;
  return b == null || t === "boolean" ? constant(b) : (t === "number" ? interpolateNumber : t === "string" ? (c = color(b)) ? (b = c, rgb) : string : b instanceof color ? rgb : b instanceof Date ? date : isNumberArray(b) ? numberArray : Array.isArray(b) ? genericArray : typeof b.valueOf !== "function" && typeof b.toString !== "function" || isNaN(b) ? object : interpolateNumber)(a, b);
}
function interpolateRound(a, b) {
  return a = +a, b = +b, function(t) {
    return Math.round(a * (1 - t) + b * t);
  };
}
function constants(x) {
  return function() {
    return x;
  };
}
function number(x) {
  return +x;
}
var unit = [0, 1];
function identity$1(x) {
  return x;
}
function normalize(a, b) {
  return (b -= a = +a) ? function(x) {
    return (x - a) / b;
  } : constants(isNaN(b) ? NaN : 0.5);
}
function clamper(a, b) {
  var t;
  if (a > b)
    t = a, a = b, b = t;
  return function(x) {
    return Math.max(a, Math.min(b, x));
  };
}
function bimap(domain, range, interpolate2) {
  var d0 = domain[0], d1 = domain[1], r0 = range[0], r1 = range[1];
  if (d1 < d0)
    d0 = normalize(d1, d0), r0 = interpolate2(r1, r0);
  else
    d0 = normalize(d0, d1), r0 = interpolate2(r0, r1);
  return function(x) {
    return r0(d0(x));
  };
}
function polymap(domain, range, interpolate2) {
  var j = Math.min(domain.length, range.length) - 1, d = new Array(j), r = new Array(j), i = -1;
  if (domain[j] < domain[0]) {
    domain = domain.slice().reverse();
    range = range.slice().reverse();
  }
  while (++i < j) {
    d[i] = normalize(domain[i], domain[i + 1]);
    r[i] = interpolate2(range[i], range[i + 1]);
  }
  return function(x) {
    var i2 = bisect(domain, x, 1, j) - 1;
    return r[i2](d[i2](x));
  };
}
function copy(source, target) {
  return target.domain(source.domain()).range(source.range()).interpolate(source.interpolate()).clamp(source.clamp()).unknown(source.unknown());
}
function transformer() {
  var domain = unit, range = unit, interpolate$1 = interpolate, transform, untransform, unknown, clamp = identity$1, piecewise, output, input;
  function rescale() {
    var n = Math.min(domain.length, range.length);
    if (clamp !== identity$1)
      clamp = clamper(domain[0], domain[n - 1]);
    piecewise = n > 2 ? polymap : bimap;
    output = input = null;
    return scale;
  }
  function scale(x) {
    return x == null || isNaN(x = +x) ? unknown : (output || (output = piecewise(domain.map(transform), range, interpolate$1)))(transform(clamp(x)));
  }
  scale.invert = function(y) {
    return clamp(untransform((input || (input = piecewise(range, domain.map(transform), interpolateNumber)))(y)));
  };
  scale.domain = function(_) {
    return arguments.length ? (domain = Array.from(_, number), rescale()) : domain.slice();
  };
  scale.range = function(_) {
    return arguments.length ? (range = Array.from(_), rescale()) : range.slice();
  };
  scale.rangeRound = function(_) {
    return range = Array.from(_), interpolate$1 = interpolateRound, rescale();
  };
  scale.clamp = function(_) {
    return arguments.length ? (clamp = _ ? true : identity$1, rescale()) : clamp !== identity$1;
  };
  scale.interpolate = function(_) {
    return arguments.length ? (interpolate$1 = _, rescale()) : interpolate$1;
  };
  scale.unknown = function(_) {
    return arguments.length ? (unknown = _, scale) : unknown;
  };
  return function(t, u) {
    transform = t, untransform = u;
    return rescale();
  };
}
function continuous() {
  return transformer()(identity$1, identity$1);
}
function formatDecimal(x) {
  return Math.abs(x = Math.round(x)) >= 1e21 ? x.toLocaleString("en").replace(/,/g, "") : x.toString(10);
}
function formatDecimalParts(x, p) {
  if ((i = (x = p ? x.toExponential(p - 1) : x.toExponential()).indexOf("e")) < 0)
    return null;
  var i, coefficient = x.slice(0, i);
  return [
    coefficient.length > 1 ? coefficient[0] + coefficient.slice(2) : coefficient,
    +x.slice(i + 1)
  ];
}
function exponent(x) {
  return x = formatDecimalParts(Math.abs(x)), x ? x[1] : NaN;
}
function formatGroup(grouping, thousands) {
  return function(value, width) {
    var i = value.length, t = [], j = 0, g = grouping[0], length = 0;
    while (i > 0 && g > 0) {
      if (length + g + 1 > width)
        g = Math.max(1, width - length);
      t.push(value.substring(i -= g, i + g));
      if ((length += g + 1) > width)
        break;
      g = grouping[j = (j + 1) % grouping.length];
    }
    return t.reverse().join(thousands);
  };
}
function formatNumerals(numerals) {
  return function(value) {
    return value.replace(/[0-9]/g, function(i) {
      return numerals[+i];
    });
  };
}
var re = /^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;
function formatSpecifier(specifier) {
  if (!(match = re.exec(specifier)))
    throw new Error("invalid format: " + specifier);
  var match;
  return new FormatSpecifier({
    fill: match[1],
    align: match[2],
    sign: match[3],
    symbol: match[4],
    zero: match[5],
    width: match[6],
    comma: match[7],
    precision: match[8] && match[8].slice(1),
    trim: match[9],
    type: match[10]
  });
}
formatSpecifier.prototype = FormatSpecifier.prototype;
function FormatSpecifier(specifier) {
  this.fill = specifier.fill === void 0 ? " " : specifier.fill + "";
  this.align = specifier.align === void 0 ? ">" : specifier.align + "";
  this.sign = specifier.sign === void 0 ? "-" : specifier.sign + "";
  this.symbol = specifier.symbol === void 0 ? "" : specifier.symbol + "";
  this.zero = !!specifier.zero;
  this.width = specifier.width === void 0 ? void 0 : +specifier.width;
  this.comma = !!specifier.comma;
  this.precision = specifier.precision === void 0 ? void 0 : +specifier.precision;
  this.trim = !!specifier.trim;
  this.type = specifier.type === void 0 ? "" : specifier.type + "";
}
FormatSpecifier.prototype.toString = function() {
  return this.fill + this.align + this.sign + this.symbol + (this.zero ? "0" : "") + (this.width === void 0 ? "" : Math.max(1, this.width | 0)) + (this.comma ? "," : "") + (this.precision === void 0 ? "" : "." + Math.max(0, this.precision | 0)) + (this.trim ? "~" : "") + this.type;
};
function formatTrim(s2) {
  out:
    for (var n = s2.length, i = 1, i0 = -1, i1; i < n; ++i) {
      switch (s2[i]) {
        case ".":
          i0 = i1 = i;
          break;
        case "0":
          if (i0 === 0)
            i0 = i;
          i1 = i;
          break;
        default:
          if (!+s2[i])
            break out;
          if (i0 > 0)
            i0 = 0;
          break;
      }
    }
  return i0 > 0 ? s2.slice(0, i0) + s2.slice(i1 + 1) : s2;
}
var prefixExponent;
function formatPrefixAuto(x, p) {
  var d = formatDecimalParts(x, p);
  if (!d)
    return x + "";
  var coefficient = d[0], exponent2 = d[1], i = exponent2 - (prefixExponent = Math.max(-8, Math.min(8, Math.floor(exponent2 / 3))) * 3) + 1, n = coefficient.length;
  return i === n ? coefficient : i > n ? coefficient + new Array(i - n + 1).join("0") : i > 0 ? coefficient.slice(0, i) + "." + coefficient.slice(i) : "0." + new Array(1 - i).join("0") + formatDecimalParts(x, Math.max(0, p + i - 1))[0];
}
function formatRounded(x, p) {
  var d = formatDecimalParts(x, p);
  if (!d)
    return x + "";
  var coefficient = d[0], exponent2 = d[1];
  return exponent2 < 0 ? "0." + new Array(-exponent2).join("0") + coefficient : coefficient.length > exponent2 + 1 ? coefficient.slice(0, exponent2 + 1) + "." + coefficient.slice(exponent2 + 1) : coefficient + new Array(exponent2 - coefficient.length + 2).join("0");
}
var formatTypes = {
  "%": (x, p) => (x * 100).toFixed(p),
  "b": (x) => Math.round(x).toString(2),
  "c": (x) => x + "",
  "d": formatDecimal,
  "e": (x, p) => x.toExponential(p),
  "f": (x, p) => x.toFixed(p),
  "g": (x, p) => x.toPrecision(p),
  "o": (x) => Math.round(x).toString(8),
  "p": (x, p) => formatRounded(x * 100, p),
  "r": formatRounded,
  "s": formatPrefixAuto,
  "X": (x) => Math.round(x).toString(16).toUpperCase(),
  "x": (x) => Math.round(x).toString(16)
};
function identity(x) {
  return x;
}
var map = Array.prototype.map;
var prefixes = ["y", "z", "a", "f", "p", "n", "\xB5", "m", "", "k", "M", "G", "T", "P", "E", "Z", "Y"];
function formatLocale(locale2) {
  var group = locale2.grouping === void 0 || locale2.thousands === void 0 ? identity : formatGroup(map.call(locale2.grouping, Number), locale2.thousands + ""), currencyPrefix = locale2.currency === void 0 ? "" : locale2.currency[0] + "", currencySuffix = locale2.currency === void 0 ? "" : locale2.currency[1] + "", decimal = locale2.decimal === void 0 ? "." : locale2.decimal + "", numerals = locale2.numerals === void 0 ? identity : formatNumerals(map.call(locale2.numerals, String)), percent = locale2.percent === void 0 ? "%" : locale2.percent + "", minus = locale2.minus === void 0 ? "\u2212" : locale2.minus + "", nan = locale2.nan === void 0 ? "NaN" : locale2.nan + "";
  function newFormat(specifier) {
    specifier = formatSpecifier(specifier);
    var fill = specifier.fill, align = specifier.align, sign = specifier.sign, symbol = specifier.symbol, zero2 = specifier.zero, width = specifier.width, comma = specifier.comma, precision = specifier.precision, trim = specifier.trim, type = specifier.type;
    if (type === "n")
      comma = true, type = "g";
    else if (!formatTypes[type])
      precision === void 0 && (precision = 12), trim = true, type = "g";
    if (zero2 || fill === "0" && align === "=")
      zero2 = true, fill = "0", align = "=";
    var prefix = symbol === "$" ? currencyPrefix : symbol === "#" && /[boxX]/.test(type) ? "0" + type.toLowerCase() : "", suffix = symbol === "$" ? currencySuffix : /[%p]/.test(type) ? percent : "";
    var formatType = formatTypes[type], maybeSuffix = /[defgprs%]/.test(type);
    precision = precision === void 0 ? 6 : /[gprs]/.test(type) ? Math.max(1, Math.min(21, precision)) : Math.max(0, Math.min(20, precision));
    function format22(value) {
      var valuePrefix = prefix, valueSuffix = suffix, i, n, c;
      if (type === "c") {
        valueSuffix = formatType(value) + valueSuffix;
        value = "";
      } else {
        value = +value;
        var valueNegative = value < 0 || 1 / value < 0;
        value = isNaN(value) ? nan : formatType(Math.abs(value), precision);
        if (trim)
          value = formatTrim(value);
        if (valueNegative && +value === 0 && sign !== "+")
          valueNegative = false;
        valuePrefix = (valueNegative ? sign === "(" ? sign : minus : sign === "-" || sign === "(" ? "" : sign) + valuePrefix;
        valueSuffix = (type === "s" ? prefixes[8 + prefixExponent / 3] : "") + valueSuffix + (valueNegative && sign === "(" ? ")" : "");
        if (maybeSuffix) {
          i = -1, n = value.length;
          while (++i < n) {
            if (c = value.charCodeAt(i), 48 > c || c > 57) {
              valueSuffix = (c === 46 ? decimal + value.slice(i + 1) : value.slice(i)) + valueSuffix;
              value = value.slice(0, i);
              break;
            }
          }
        }
      }
      if (comma && !zero2)
        value = group(value, Infinity);
      var length = valuePrefix.length + value.length + valueSuffix.length, padding = length < width ? new Array(width - length + 1).join(fill) : "";
      if (comma && zero2)
        value = group(padding + value, padding.length ? width - valueSuffix.length : Infinity), padding = "";
      switch (align) {
        case "<":
          value = valuePrefix + value + valueSuffix + padding;
          break;
        case "=":
          value = valuePrefix + padding + value + valueSuffix;
          break;
        case "^":
          value = padding.slice(0, length = padding.length >> 1) + valuePrefix + value + valueSuffix + padding.slice(length);
          break;
        default:
          value = padding + valuePrefix + value + valueSuffix;
          break;
      }
      return numerals(value);
    }
    format22.toString = function() {
      return specifier + "";
    };
    return format22;
  }
  function formatPrefix2(specifier, value) {
    var f = newFormat((specifier = formatSpecifier(specifier), specifier.type = "f", specifier)), e = Math.max(-8, Math.min(8, Math.floor(exponent(value) / 3))) * 3, k = Math.pow(10, -e), prefix = prefixes[8 + e / 3];
    return function(value2) {
      return f(k * value2) + prefix;
    };
  }
  return {
    format: newFormat,
    formatPrefix: formatPrefix2
  };
}
var locale;
var format2;
var formatPrefix;
defaultLocale({
  thousands: ",",
  grouping: [3],
  currency: ["$", ""]
});
function defaultLocale(definition) {
  locale = formatLocale(definition);
  format2 = locale.format;
  formatPrefix = locale.formatPrefix;
  return locale;
}
function precisionFixed(step) {
  return Math.max(0, -exponent(Math.abs(step)));
}
function precisionPrefix(step, value) {
  return Math.max(0, Math.max(-8, Math.min(8, Math.floor(exponent(value) / 3))) * 3 - exponent(Math.abs(step)));
}
function precisionRound(step, max) {
  step = Math.abs(step), max = Math.abs(max) - step;
  return Math.max(0, exponent(max) - exponent(step)) + 1;
}
function tickFormat(start, stop, count, specifier) {
  var step = tickStep(start, stop, count), precision;
  specifier = formatSpecifier(specifier == null ? ",f" : specifier);
  switch (specifier.type) {
    case "s": {
      var value = Math.max(Math.abs(start), Math.abs(stop));
      if (specifier.precision == null && !isNaN(precision = precisionPrefix(step, value)))
        specifier.precision = precision;
      return formatPrefix(specifier, value);
    }
    case "":
    case "e":
    case "g":
    case "p":
    case "r": {
      if (specifier.precision == null && !isNaN(precision = precisionRound(step, Math.max(Math.abs(start), Math.abs(stop)))))
        specifier.precision = precision - (specifier.type === "e");
      break;
    }
    case "f":
    case "%": {
      if (specifier.precision == null && !isNaN(precision = precisionFixed(step)))
        specifier.precision = precision - (specifier.type === "%") * 2;
      break;
    }
  }
  return format2(specifier);
}
function linearish(scale) {
  var domain = scale.domain;
  scale.ticks = function(count) {
    var d = domain();
    return ticks(d[0], d[d.length - 1], count == null ? 10 : count);
  };
  scale.tickFormat = function(count, specifier) {
    var d = domain();
    return tickFormat(d[0], d[d.length - 1], count == null ? 10 : count, specifier);
  };
  scale.nice = function(count) {
    if (count == null)
      count = 10;
    var d = domain();
    var i0 = 0;
    var i1 = d.length - 1;
    var start = d[i0];
    var stop = d[i1];
    var prestep;
    var step;
    var maxIter = 10;
    if (stop < start) {
      step = start, start = stop, stop = step;
      step = i0, i0 = i1, i1 = step;
    }
    while (maxIter-- > 0) {
      step = tickIncrement(start, stop, count);
      if (step === prestep) {
        d[i0] = start;
        d[i1] = stop;
        return domain(d);
      } else if (step > 0) {
        start = Math.floor(start / step) * step;
        stop = Math.ceil(stop / step) * step;
      } else if (step < 0) {
        start = Math.ceil(start * step) / step;
        stop = Math.floor(stop * step) / step;
      } else {
        break;
      }
      prestep = step;
    }
    return scale;
  };
  return scale;
}
function linear() {
  var scale = continuous();
  scale.copy = function() {
    return copy(scale, linear());
  };
  initRange.apply(scale, arguments);
  return linearish(scale);
}
var Star = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let { width = 24 } = $$props;
  let { height = 24 } = $$props;
  let { fill = "black" } = $$props;
  let { stroke = "transparent" } = $$props;
  if ($$props.width === void 0 && $$bindings.width && width !== void 0)
    $$bindings.width(width);
  if ($$props.height === void 0 && $$bindings.height && height !== void 0)
    $$bindings.height(height);
  if ($$props.fill === void 0 && $$bindings.fill && fill !== void 0)
    $$bindings.fill(fill);
  if ($$props.stroke === void 0 && $$bindings.stroke && stroke !== void 0)
    $$bindings.stroke(stroke);
  return `<svg xmlns="${"http://www.w3.org/2000/svg"}"${add_attribute("width", width, 0)}${add_attribute("height", height, 0)} viewBox="${"0 0 24 24"}"${add_attribute("fill", fill, 0)}${add_attribute("stroke", stroke, 0)}><path d="${"M12 .587l3.668 7.568 8.332 1.151-6.064 5.828 1.48 8.279-7.416-3.967-7.417 3.967 1.481-8.279-6.064-5.828 8.332-1.151z"}"></path></svg>`;
});
var css$6 = {
  code: ".post-container.svelte-1ij1fgx.svelte-1ij1fgx{width:100%;border-radius:10px;background:white;padding:30px 25px;margin:12px;overflow:hidden;border:1px solid white;transition:all 100ms linear, border 300ms ease}.perspective-container.svelte-1ij1fgx.svelte-1ij1fgx{display:flex;position:relative;margin:-4px}.card-highlight.svelte-1ij1fgx.svelte-1ij1fgx{position:absolute;width:100%;height:100%;border-radius:50%;background:rgba(0, 0, 0, 0.01);filter:blur(20px);z-index:1;pointer-events:none}.post-card.svelte-1ij1fgx.svelte-1ij1fgx{display:flex;flex-direction:column;place-content:center;height:100%;pointer-events:none}.post-title.svelte-1ij1fgx.svelte-1ij1fgx{font-size:1.5rem;line-height:1.1;padding-bottom:0.75rem;margin-bottom:0.75rem;border-bottom:1px solid var(--secondary-color);transition:border-bottom 300ms ease}.post-description.svelte-1ij1fgx.svelte-1ij1fgx{font-size:1.1rem;line-height:1.25}.post-container.svelte-1ij1fgx:hover .post-card .post-title.svelte-1ij1fgx{border-bottom:1px solid var(--accent-color)}.post-container.svelte-1ij1fgx.svelte-1ij1fgx:hover{border:1px solid var(--accent-color)}.featured-star.svelte-1ij1fgx.svelte-1ij1fgx{position:absolute;top:0;right:0;padding:6px}",
  map: `{"version":3,"file":"BlogSection.svelte","sources":["BlogSection.svelte"],"sourcesContent":["<script>\\n  export let post;\\n  export let slug;\\n\\n  import { scaleLinear } from \\"d3-scale\\";\\n  import { onMount } from \\"svelte\\";\\n\\n  import Star from \\"$lib/icons/Star.svelte\\";\\n\\n  /* Initialize variables which will bind to our DOM elements */\\n  let card,\\n    cardWidth,\\n    cardHeight,\\n    cardLeft,\\n    cardTop,\\n    xPos,\\n    yPos,\\n    scrollXPosition,\\n    scrollYPosition,\\n    pageWidth,\\n    readyToHover = false;\\n\\n  /* Once we have our \`card\` element, get the leftmost position and top position\\n\\t\\t This will later enable the x- and y-position of our mouse relative to the card dimensions */\\n  $: getCardDimensions = function (card) {\\n    cardLeft = card ? card.getBoundingClientRect().left : 0;\\n    cardTop = card ? card.getBoundingClientRect().top + scrollYPosition : 0;\\n  };\\n\\n  // On page resize, rerun get card dimensions\\n  $: pageWidth, getCardDimensions(card);\\n  $: scrollYPosition, getCardDimensions(card);\\n\\n  /* ! IMPORTANT !\\n    Wait for some time (at least duration of page transition) to get bounding client rect \\n    There is currently a conflict with reading getBoudingClientRect().top when page transitions \\n  */\\n  onMount(() => {\\n    setTimeout(() => {\\n      getCardDimensions(card);\\n      readyToHover = true;\\n    }, 1000);\\n  });\\n\\n  /* Called on hover, this sets our x- and y-position to equal the cursor position *within* the card */\\n  const setCoords = function (event) {\\n    xPos = event.clientX - cardLeft;\\n    yPos = event.pageY - cardTop;\\n  };\\n\\n  /* Resets */\\n  const resetCoords = function () {\\n    xPos = null;\\n    yPos = null;\\n  };\\n\\n  /* Rotation amount */\\n  $: xScale = scaleLinear().domain([0, cardWidth]).range([-4, 4]);\\n  $: yScale = scaleLinear().domain([cardHeight, 0]).range([-4, 4]);\\n\\n  $: rotationX = xPos ? xScale(xPos) : 0;\\n  $: rotationY = yPos ? yScale(yPos) : 0;\\n\\n  /* Highlighted circle */\\n  $: circleXScale = scaleLinear().domain([0, cardWidth]).range([-50, 50]);\\n  $: circleYScale = scaleLinear().domain([0, cardHeight]).range([-50, 50]);\\n\\n  $: circleXPosition = xPos ? circleXScale(xPos) : 0;\\n  $: circleYPosition = yPos ? circleYScale(yPos) : 0;\\n\\n  /* Box shadow */\\n  $: shadowX = xPos ? circleXScale(xPos) / 5 : 0;\\n  $: shadowY = yPos ? circleYScale(yPos) / 5 : 0;\\n\\n  /* 3d scaling */\\n  $: scale3dVal = xPos && yPos ? 1.02 : 1;\\n<\/script>\\n\\n<svelte:window\\n  bind:scrollY={scrollYPosition}\\n  bind:scrollX={scrollXPosition}\\n  bind:innerWidth={pageWidth}\\n/>\\n<div\\n  class=\\"perspective-container\\"\\n  style=\\"perspective: {cardWidth}px\\"\\n  on:mousemove={readyToHover ? setCoords : null}\\n  on:focus={null}\\n  on:mouseout={resetCoords}\\n  on:blur={resetCoords}\\n  bind:this={card}\\n  bind:offsetWidth={cardWidth}\\n  bind:offsetHeight={cardHeight}\\n>\\n  <a\\n    style=\\"transform: rotateY({rotationX}deg) rotateX({rotationY}deg) \\n\\t\\t\\t\\t\\t scale3d({scale3dVal}, {scale3dVal}, {scale3dVal});\\n\\t\\t\\t\\t\\t box-shadow: {shadowX}px {shadowY}px 15px rgba(0, 0, 0, 0.1);\\"\\n    class=\\"post-container no-underline {post.featured ? 'featured' : ''}\\"\\n    sveltekit:prefetch\\n    href={slug}\\n  >\\n    {#if post.featured}\\n      <div class=\\"featured-star\\">\\n        <!-- \u2B50\uFE0F -->\\n        <Star width=\\"20\\" height=\\"20\\" fill=\\"var(--accent-color)\\" stroke=\\"none\\" />\\n      </div>\\n    {/if}\\n    <div\\n      class=\\"card-highlight\\"\\n      style=\\"left: {circleXPosition}%; top: {circleYPosition}%\\"\\n    />\\n    <div class=\\"post-card\\">\\n      <h1 class=\\"post-title\\">{post.title}</h1>\\n      <p class=\\"post-description\\">{post.description}</p>\\n    </div>\\n  </a>\\n</div>\\n\\n<style>\\n  .post-container {\\n    width: 100%;\\n    border-radius: 10px;\\n    background: white;\\n    padding: 30px 25px;\\n    margin: 12px; /* Need this for perspective container overflow */\\n    overflow: hidden;\\n    border: 1px solid white;\\n    transition: all 100ms linear, border 300ms ease;\\n  }\\n\\n  .perspective-container {\\n    display: flex;\\n    position: relative;\\n    margin: -4px; /* Undoes some of the margin above while still allowing for hover events */\\n  }\\n\\n  .card-highlight {\\n    position: absolute;\\n    width: 100%;\\n    height: 100%;\\n    border-radius: 50%;\\n    background: rgba(0, 0, 0, 0.01);\\n    filter: blur(20px);\\n    z-index: 1;\\n    pointer-events: none;\\n  }\\n\\n  .post-card {\\n    display: flex;\\n    flex-direction: column;\\n    place-content: center; /* space-around; */\\n    height: 100%;\\n    pointer-events: none;\\n  }\\n\\n  .post-title {\\n    font-size: 1.5rem;\\n    line-height: 1.1;\\n    padding-bottom: 0.75rem;\\n    margin-bottom: 0.75rem;\\n    border-bottom: 1px solid var(--secondary-color);\\n    transition: border-bottom 300ms ease;\\n  }\\n\\n  .post-description {\\n    font-size: 1.1rem;\\n    line-height: 1.25;\\n  }\\n\\n  .post-container:hover .post-card .post-title {\\n    border-bottom: 1px solid var(--accent-color);\\n  }\\n\\n  .post-container:hover {\\n    border: 1px solid var(--accent-color);\\n  }\\n\\n  /* .featured {\\n    border: 1px solid var(--accent-color);\\n  } */\\n\\n  .featured-star {\\n    position: absolute;\\n    top: 0;\\n    right: 0;\\n    padding: 6px;\\n  }\\n</style>\\n"],"names":[],"mappings":"AAwHE,eAAe,8BAAC,CAAC,AACf,KAAK,CAAE,IAAI,CACX,aAAa,CAAE,IAAI,CACnB,UAAU,CAAE,KAAK,CACjB,OAAO,CAAE,IAAI,CAAC,IAAI,CAClB,MAAM,CAAE,IAAI,CACZ,QAAQ,CAAE,MAAM,CAChB,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,KAAK,CACvB,UAAU,CAAE,GAAG,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,AACjD,CAAC,AAED,sBAAsB,8BAAC,CAAC,AACtB,OAAO,CAAE,IAAI,CACb,QAAQ,CAAE,QAAQ,CAClB,MAAM,CAAE,IAAI,AACd,CAAC,AAED,eAAe,8BAAC,CAAC,AACf,QAAQ,CAAE,QAAQ,CAClB,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,CACZ,aAAa,CAAE,GAAG,CAClB,UAAU,CAAE,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAC/B,MAAM,CAAE,KAAK,IAAI,CAAC,CAClB,OAAO,CAAE,CAAC,CACV,cAAc,CAAE,IAAI,AACtB,CAAC,AAED,UAAU,8BAAC,CAAC,AACV,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,MAAM,CACtB,aAAa,CAAE,MAAM,CACrB,MAAM,CAAE,IAAI,CACZ,cAAc,CAAE,IAAI,AACtB,CAAC,AAED,WAAW,8BAAC,CAAC,AACX,SAAS,CAAE,MAAM,CACjB,WAAW,CAAE,GAAG,CAChB,cAAc,CAAE,OAAO,CACvB,aAAa,CAAE,OAAO,CACtB,aAAa,CAAE,GAAG,CAAC,KAAK,CAAC,IAAI,iBAAiB,CAAC,CAC/C,UAAU,CAAE,aAAa,CAAC,KAAK,CAAC,IAAI,AACtC,CAAC,AAED,iBAAiB,8BAAC,CAAC,AACjB,SAAS,CAAE,MAAM,CACjB,WAAW,CAAE,IAAI,AACnB,CAAC,AAED,8BAAe,MAAM,CAAC,UAAU,CAAC,WAAW,eAAC,CAAC,AAC5C,aAAa,CAAE,GAAG,CAAC,KAAK,CAAC,IAAI,cAAc,CAAC,AAC9C,CAAC,AAED,6CAAe,MAAM,AAAC,CAAC,AACrB,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,IAAI,cAAc,CAAC,AACvC,CAAC,AAMD,cAAc,8BAAC,CAAC,AACd,QAAQ,CAAE,QAAQ,CAClB,GAAG,CAAE,CAAC,CACN,KAAK,CAAE,CAAC,CACR,OAAO,CAAE,GAAG,AACd,CAAC"}`
};
var BlogSection = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let getCardDimensions;
  let rotationX;
  let rotationY;
  let circleXPosition;
  let circleYPosition;
  let shadowX;
  let shadowY;
  let scale3dVal;
  let { post } = $$props;
  let { slug } = $$props;
  let card, cardWidth, cardHeight, scrollYPosition;
  if ($$props.post === void 0 && $$bindings.post && post !== void 0)
    $$bindings.post(post);
  if ($$props.slug === void 0 && $$bindings.slug && slug !== void 0)
    $$bindings.slug(slug);
  $$result.css.add(css$6);
  getCardDimensions = function(card2) {
    card2 ? card2.getBoundingClientRect().left : 0;
    card2 ? card2.getBoundingClientRect().top + scrollYPosition : 0;
  };
  {
    getCardDimensions(card);
  }
  {
    getCardDimensions(card);
  }
  linear().domain([0, cardWidth]).range([-4, 4]);
  linear().domain([cardHeight, 0]).range([-4, 4]);
  rotationX = 0;
  rotationY = 0;
  linear().domain([0, cardWidth]).range([-50, 50]);
  linear().domain([0, cardHeight]).range([-50, 50]);
  circleXPosition = 0;
  circleYPosition = 0;
  shadowX = 0;
  shadowY = 0;
  scale3dVal = 1;
  return `
<div class="${"perspective-container svelte-1ij1fgx"}" style="${"perspective: " + escape(cardWidth) + "px"}"${add_attribute("this", card, 0)}><a style="${"transform: rotateY(" + escape(rotationX) + "deg) rotateX(" + escape(rotationY) + "deg) scale3d(" + escape(scale3dVal) + ", " + escape(scale3dVal) + ", " + escape(scale3dVal) + "); box-shadow: " + escape(shadowX) + "px " + escape(shadowY) + "px 15px rgba(0, 0, 0, 0.1);"}" class="${"post-container no-underline " + escape(post.featured ? "featured" : "") + " svelte-1ij1fgx"}" sveltekit:prefetch${add_attribute("href", slug, 0)}>${post.featured ? `<div class="${"featured-star svelte-1ij1fgx"}">
        ${validate_component(Star, "Star").$$render($$result, {
    width: "20",
    height: "20",
    fill: "var(--accent-color)",
    stroke: "none"
  }, {}, {})}</div>` : ``}
    <div class="${"card-highlight svelte-1ij1fgx"}" style="${"left: " + escape(circleXPosition) + "%; top: " + escape(circleYPosition) + "%"}"></div>
    <div class="${"post-card svelte-1ij1fgx"}"><h1 class="${"post-title svelte-1ij1fgx"}">${escape(post.title)}</h1>
      <p class="${"post-description svelte-1ij1fgx"}">${escape(post.description)}</p></div></a>
</div>`;
});
var css$5 = {
  code: "main.svelte-4rz1ws{max-width:860px;margin:0 auto;padding:1em}.post-grid.svelte-4rz1ws{display:grid;grid-template-columns:repeat(2, 1fr)}@media screen and (max-width: 668px){.post-grid.svelte-4rz1ws{grid-template-columns:1fr}}",
  map: `{"version":3,"file":"index.svelte","sources":["index.svelte"],"sourcesContent":["<script context=\\"module\\">\\n  /**\\n   * @type {import('@sveltejs/kit').Load}\\n   */\\n  export async function load({ fetch }) {\\n    const res = await fetch(\`/posts.json\`);\\n    const posts = await res.json();\\n\\n    return {\\n      props: {\\n        posts,\\n      },\\n    };\\n  }\\n<\/script>\\n\\n<script>\\n  import BlogSection from \\"$lib/BlogSection.svelte\\";\\n  import { paginate, PaginationNav } from \\"svelte-paginate\\";\\n  import { seo } from \\"$lib/store.js\\";\\n  //https://www.npmjs.com/package/svelte-paginate\\n\\n  export let posts;\\n\\n  console.log(posts);\\n  let filteredPosts = posts\\n    .filter((d) => d.metadata.draft != true && d.metadata.archived != true)\\n    .sort((a, b) => Date.parse(b.metadata.date) - Date.parse(a.metadata.date))\\n    .sort((a, b) => b.metadata.featured);\\n\\n  $seo = {\\n    title: \\"Connor Rothschild\\",\\n    description: \\"Description\\",\\n  };\\n<\/script>\\n\\n<main>\\n  <h1 class=\\"page-overline\\">Blog</h1>\\n  <h1 class=\\"page-title\\">\\n    What I've\\n    <span class=\\"accented bolded\\">written</span>\u200B\\n  </h1>\\n  <div class=\\"post-grid\\">\\n    {#each filteredPosts as post}\\n      <BlogSection\\n        post={post.metadata}\\n        slug={post.path.replace(/\\\\.[^/.]+$/, \\"\\")}\\n      />\\n    {/each}\\n    <!-- {#if items.length > pageSize}\\n      <PaginationNav\\n        totalItems={items.length}\\n        {pageSize}\\n        {currentPage}\\n        limit={1}\\n        showStepOptions={true}\\n        on:setPage={(e) => (currentPage = e.detail.page)}\\n      />\\n    {/if} -->\\n  </div>\\n</main>\\n\\n<style>\\n  main {\\n    /* width: 100%; */\\n    max-width: 860px;\\n    margin: 0 auto;\\n    padding: 1em;\\n  }\\n\\n  .post-grid {\\n    display: grid;\\n    grid-template-columns: repeat(2, 1fr);\\n    /* grid-gap: 15px; */\\n  }\\n\\n  @media screen and (max-width: 668px) {\\n    .post-grid {\\n      grid-template-columns: 1fr;\\n    }\\n  }\\n</style>\\n"],"names":[],"mappings":"AA+DE,IAAI,cAAC,CAAC,AAEJ,SAAS,CAAE,KAAK,CAChB,MAAM,CAAE,CAAC,CAAC,IAAI,CACd,OAAO,CAAE,GAAG,AACd,CAAC,AAED,UAAU,cAAC,CAAC,AACV,OAAO,CAAE,IAAI,CACb,qBAAqB,CAAE,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,AAEvC,CAAC,AAED,OAAO,MAAM,CAAC,GAAG,CAAC,YAAY,KAAK,CAAC,AAAC,CAAC,AACpC,UAAU,cAAC,CAAC,AACV,qBAAqB,CAAE,GAAG,AAC5B,CAAC,AACH,CAAC"}`
};
async function load({ fetch: fetch2 }) {
  const res = await fetch2(`/posts.json`);
  const posts = await res.json();
  return { props: { posts } };
}
var Blog = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let $seo, $$unsubscribe_seo;
  $$unsubscribe_seo = subscribe(seo, (value) => $seo = value);
  let { posts } = $$props;
  console.log(posts);
  let filteredPosts = posts.filter((d) => d.metadata.draft != true && d.metadata.archived != true).sort((a, b) => Date.parse(b.metadata.date) - Date.parse(a.metadata.date)).sort((a, b) => b.metadata.featured);
  set_store_value(seo, $seo = {
    title: "Connor Rothschild",
    description: "Description"
  }, $seo);
  if ($$props.posts === void 0 && $$bindings.posts && posts !== void 0)
    $$bindings.posts(posts);
  $$result.css.add(css$5);
  $$unsubscribe_seo();
  return `<main class="${"svelte-4rz1ws"}"><h1 class="${"page-overline"}">Blog</h1>
  <h1 class="${"page-title"}">What I&#39;ve
    <span class="${"accented bolded"}">written</span>\u200B
  </h1>
  <div class="${"post-grid svelte-4rz1ws"}">${each(filteredPosts, (post) => `${validate_component(BlogSection, "BlogSection").$$render($$result, {
    post: post.metadata,
    slug: post.path.replace(/\.[^/.]+$/, "")
  }, {}, {})}`)}
    </div>
</main>`;
});
var index = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  "default": Blog,
  load
});
var css$4 = {
  code: "main.svelte-1gxbduz{background:var(--secondary-color)}.post-container.svelte-1gxbduz{max-width:768px;margin:0 auto;padding:1em;width:90vw}.post.svelte-1gxbduz{margin-bottom:1rem}.date.svelte-1gxbduz{font-weight:200;margin-top:-2rem;font-size:1.5rem;margin-bottom:2rem;letter-spacing:0.64px}.footer.svelte-1gxbduz{padding:1rem 0 2rem 0}",
  map: '{"version":3,"file":"layout.svelte","sources":["layout.svelte"],"sourcesContent":["<script>\\n  import { seo } from \\"$lib/store\\";\\n\\n  export let title;\\n  export let description;\\n  export let date;\\n\\n  $seo = {\\n    title: title,\\n    description: description,\\n  };\\n\\n  const dateFormat = (date) => {\\n    const parsed = new Date(date);\\n    const month = parsed.toLocaleString(\\"default\\", { month: \\"long\\" });\\n    const year = parsed.getUTCFullYear();\\n\\n    return `${month} ${year}`;\\n  };\\n<\/script>\\n\\n<svelte:head>\\n  <title>{title}</title>\\n  <meta name=\\"description\\" content={description} />\\n</svelte:head>\\n\\n<main>\\n  <div class=\\"post-container\\">\\n    <h1 class=\\"page-title no-border\\">{title}</h1>\\n    <div class=\\"date border-bottom\\">\\n      {dateFormat(date)} | 1 minute read (if you\'re fast)\\n    </div>\\n    <div class=\\"post\\">\\n      <slot />\\n    </div>\\n    <a\\n      class=\\"footer border-top no-underline block\\"\\n      sveltekit:prefetch\\n      href=\\"/blog\\">&#8592; Back to all posts</a\\n    >\\n  </div>\\n</main>\\n\\n<style>\\n  main {\\n    background: var(--secondary-color);\\n  }\\n\\n  .post-container {\\n    max-width: 768px;\\n    margin: 0 auto;\\n    padding: 1em;\\n    width: 90vw;\\n  }\\n\\n  .post {\\n    margin-bottom: 1rem;\\n  }\\n\\n  .date {\\n    font-weight: 200;\\n    margin-top: -2rem;\\n    font-size: 1.5rem;\\n    margin-bottom: 2rem;\\n    letter-spacing: 0.64px;\\n  }\\n\\n  .footer {\\n    padding: 1rem 0 2rem 0;\\n  }\\n</style>\\n"],"names":[],"mappings":"AA4CE,IAAI,eAAC,CAAC,AACJ,UAAU,CAAE,IAAI,iBAAiB,CAAC,AACpC,CAAC,AAED,eAAe,eAAC,CAAC,AACf,SAAS,CAAE,KAAK,CAChB,MAAM,CAAE,CAAC,CAAC,IAAI,CACd,OAAO,CAAE,GAAG,CACZ,KAAK,CAAE,IAAI,AACb,CAAC,AAED,KAAK,eAAC,CAAC,AACL,aAAa,CAAE,IAAI,AACrB,CAAC,AAED,KAAK,eAAC,CAAC,AACL,WAAW,CAAE,GAAG,CAChB,UAAU,CAAE,KAAK,CACjB,SAAS,CAAE,MAAM,CACjB,aAAa,CAAE,IAAI,CACnB,cAAc,CAAE,MAAM,AACxB,CAAC,AAED,OAAO,eAAC,CAAC,AACP,OAAO,CAAE,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,AACxB,CAAC"}'
};
var Layout = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let $seo, $$unsubscribe_seo;
  $$unsubscribe_seo = subscribe(seo, (value) => $seo = value);
  let { title } = $$props;
  let { description } = $$props;
  let { date: date2 } = $$props;
  set_store_value(seo, $seo = { title, description }, $seo);
  const dateFormat = (date3) => {
    const parsed = new Date(date3);
    const month = parsed.toLocaleString("default", { month: "long" });
    const year = parsed.getUTCFullYear();
    return `${month} ${year}`;
  };
  if ($$props.title === void 0 && $$bindings.title && title !== void 0)
    $$bindings.title(title);
  if ($$props.description === void 0 && $$bindings.description && description !== void 0)
    $$bindings.description(description);
  if ($$props.date === void 0 && $$bindings.date && date2 !== void 0)
    $$bindings.date(date2);
  $$result.css.add(css$4);
  $$unsubscribe_seo();
  return `${$$result.head += `${$$result.title = `<title>${escape(title)}</title>`, ""}<meta name="${"description"}"${add_attribute("content", description, 0)} data-svelte="svelte-1law5hj">`, ""}

<main class="${"svelte-1gxbduz"}"><div class="${"post-container svelte-1gxbduz"}"><h1 class="${"page-title no-border"}">${escape(title)}</h1>
    <div class="${"date border-bottom svelte-1gxbduz"}">${escape(dateFormat(date2))} | 1 minute read (if you&#39;re fast)
    </div>
    <div class="${"post svelte-1gxbduz"}">${slots.default ? slots.default({}) : ``}</div>
    <a class="${"footer border-top no-underline block svelte-1gxbduz"}" sveltekit:prefetch href="${"/blog"}">\u2190 Back to all posts</a></div>
</main>`;
});
var layout = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  "default": Layout
});
var css$3 = {
  code: ".centered.svelte-3ss6p0{display:block;margin:1rem auto}",
  map: '{"version":3,"file":"Image.svelte","sources":["Image.svelte"],"sourcesContent":["<script>\\n  export let src;\\n  export let alt;\\n  export let width = \\"100%\\";\\n  export let centered = false;\\n  export let style = \\"\\";\\n<\/script>\\n\\n<img {src} {alt} {width} {style} class:centered />\\n\\n<style>\\n  .centered {\\n    display: block;\\n    margin: 1rem auto;\\n  }\\n</style>\\n"],"names":[],"mappings":"AAWE,SAAS,cAAC,CAAC,AACT,OAAO,CAAE,KAAK,CACd,MAAM,CAAE,IAAI,CAAC,IAAI,AACnB,CAAC"}'
};
var Image = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let { src: src2 } = $$props;
  let { alt } = $$props;
  let { width = "100%" } = $$props;
  let { centered = false } = $$props;
  let { style: style2 = "" } = $$props;
  if ($$props.src === void 0 && $$bindings.src && src2 !== void 0)
    $$bindings.src(src2);
  if ($$props.alt === void 0 && $$bindings.alt && alt !== void 0)
    $$bindings.alt(alt);
  if ($$props.width === void 0 && $$bindings.width && width !== void 0)
    $$bindings.width(width);
  if ($$props.centered === void 0 && $$bindings.centered && centered !== void 0)
    $$bindings.centered(centered);
  if ($$props.style === void 0 && $$bindings.style && style2 !== void 0)
    $$bindings.style(style2);
  $$result.css.add(css$3);
  return `<img${add_attribute("src", src2, 0)}${add_attribute("alt", alt, 0)}${add_attribute("width", width, 0)}${add_attribute("style", style2, 0)} class="${["svelte-3ss6p0", centered ? "centered" : ""].join(" ").trim()}">`;
});
var css$2 = {
  code: '.info.svelte-1kch8kc::before{content:"\u2757\uFE0F";font-size:1.5rem;margin-right:1rem}.info.svelte-1kch8kc{display:flex;place-items:center;border-radius:10px;font-weight:normal;background:white;box-shadow:2px 2px 5px 1px #cecece80;padding:1rem;margin:1.75rem 0}.info .text p:not(:last-child){margin-bottom:1rem}.info .text p:last-child{margin-bottom:0}',
  map: '{"version":3,"file":"Info.svelte","sources":["Info.svelte"],"sourcesContent":["<script>\\n<\/script>\\n\\n<div class=\\"info\\">\\n  <div class=\\"text\\"><slot /></div>\\n</div>\\n\\n<style>\\n  .info::before {\\n    content: \\"\u2757\uFE0F\\";\\n    font-size: 1.5rem;\\n    margin-right: 1rem;\\n  }\\n\\n  .info {\\n    display: flex;\\n    place-items: center;\\n    border-radius: 10px;\\n    font-weight: normal;\\n    background: white;\\n    box-shadow: 2px 2px 5px 1px #cecece80;\\n    padding: 1rem;\\n    margin: 1.75rem 0;\\n  }\\n\\n  :global(.info .text p:not(:last-child)) {\\n    margin-bottom: 1rem;\\n  }\\n\\n  :global(.info .text p:last-child) {\\n    margin-bottom: 0;\\n  }\\n</style>\\n"],"names":[],"mappings":"AAQE,oBAAK,QAAQ,AAAC,CAAC,AACb,OAAO,CAAE,IAAI,CACb,SAAS,CAAE,MAAM,CACjB,YAAY,CAAE,IAAI,AACpB,CAAC,AAED,KAAK,eAAC,CAAC,AACL,OAAO,CAAE,IAAI,CACb,WAAW,CAAE,MAAM,CACnB,aAAa,CAAE,IAAI,CACnB,WAAW,CAAE,MAAM,CACnB,UAAU,CAAE,KAAK,CACjB,UAAU,CAAE,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,SAAS,CACrC,OAAO,CAAE,IAAI,CACb,MAAM,CAAE,OAAO,CAAC,CAAC,AACnB,CAAC,AAEO,8BAA8B,AAAE,CAAC,AACvC,aAAa,CAAE,IAAI,AACrB,CAAC,AAEO,wBAAwB,AAAE,CAAC,AACjC,aAAa,CAAE,CAAC,AAClB,CAAC"}'
};
var Info = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  $$result.css.add(css$2);
  return `<div class="${"info svelte-1kch8kc"}"><div class="${"text"}">${slots.default ? slots.default({}) : ``}</div>
</div>`;
});
var metadata$i = {
  "layout": "blog",
  "title": "Recreating a Table by The Economist Using Reactable",
  "description": "Recreating a table by The Economist entirely in R, using {reactable}",
  "date": "2020-05-02",
  "image": "economist-table-replication-using-reactable/header.png",
  "archived": true
};
var Economist_table_replication_using_reactable = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign($$props, metadata$i), {}, {
    default: () => `<p>Thanks for visiting this blog post, but it has moved! It can be found in its fully interactive form <a href="${"https://connorrothschild.github.io/v2/post/economist-table-replication-using-reactable/"}" rel="${"nofollow"}">here</a>.</p>
<p><a href="${"https://connorrothschild.github.io/v2/post/economist-table-replication-using-reactable/"}" rel="${"nofollow"}">${validate_component(Image, "Image").$$render($$result, {
      alt: "A table depicting excess deaths by country during 2020.",
      src: "../images/blog/economist-table-replication-using-reactable/featured.png",
      ":clickable": "false"
    }, {}, {})}</a></p>`
  })}`;
});
var economistTableReplicationUsingReactable = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  "default": Economist_table_replication_using_reactable,
  metadata: metadata$i
});
var metadata$h = {
  "layout": "blog",
  "title": "How (and Why) to Add a Chart to Your D3.js Tooltip",
  "description": "A few lines of code can make your D3 tooltips significantly more informative",
  "date": "2020-06-02",
  "image": "images/jobs/moksha.svg"
};
var Adding_a_chart_to_your_d3_tooltip = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign($$props, metadata$h), {}, {
    default: () => `<p>I think tooltips are one of the most underrated parts of a visualization. When users are initially confused by a visualization, they often hover over a data point of interest to get more information.</p>
<p>Unfortunately, many tooltips fail to really illuminate much about our data. They often recapitulate what is already being presented without clarifying any of the confusing parts of the data. Most frequently, I see (and even create \u{1F626}) tooltips which present the most basic information (in a map, a tooltip would present the state name and the value of interest), and nothing else!</p>
<p>Of course, there\u2019s nothing <em>wrong</em> with these kinds of tooltips. But they are truly doing the bare minimum, and, as a result, they\u2019re missing out on the full potential of tooltips. <strong>If users are actively seeking more information by hovering over data, we ought to reward them with the most helpful and interesting information we can.</strong></p>
<p>That\u2019s why I recently updated one of my tooltips from a static presentation of textual information to a line chart depicting change over time. In other words, I went from this:</p>
${validate_component(Image, "Image").$$render($$result, {
      src: "../images/blog/adding-a-chart-to-your-d3-tooltip/old-tooltip.gif",
      alt: "A GIF depicting the old tooltip, which contained static values in textual form"
    }, {}, {})}
<p>to this:</p>
${validate_component(Image, "Image").$$render($$result, {
      src: "../images/blog/adding-a-chart-to-your-d3-tooltip/new-tooltip.gif",
      alt: "A GIF depicting the old tooltip, which contained dynamic, temporal data over time for a given state upon hover"
    }, {}, {})}
<h2 id="${"why-did-i-make-that-change"}"><a href="${"#why-did-i-make-that-change"}">Why did I make that change?</a></h2>
<p>The former tooltip provided information which was rather uninteresting. Although it clarified the exact <em>rate</em> of overdose deaths in a given state at a given time, it didn\u2019t do much else. It did provide the year currently in view, but this was also visible in the bottom right corner of the visualization! It also provided the state name, but most of my viewers have likely taken US geography in middle school.</p>
<p>Thus, this tooltip was rather redundant. At best, it provided the <em>exact</em> rate, so that a viewer could compare two states, or learn more information about a given state without solely relying on color encoding (<a href="${"https://courses.cs.washington.edu/courses/cse442/17au/lectures/CSE442-VisualEncoding.pdf"}" rel="${"nofollow"}">which can be somewhat unreliable when it comes to quantitative encoding</a>, as is the case in a choropleth map).</p>
<p>The new tooltip shows a trend over time. It also shows the state name (just in case you skipped that day in US geography!), and also the most recent data on overdose deaths. Because this map is meant to show how the opioid crisis <em>has evolved</em>, showing a line chart for each state in my tooltip allows the user to explore state-by-state trends on hover! This is much easier than hovering on each state during each year and trying to keep track of the trends.</p>
<p>For example, hovering on West Virginia, which in 2017 seemed to have the highest opioid-involved overdose death rate (as indicated by it having the darkest shade of red), reveals that its also experienced one of the largest over-time increase in this rate since 1999:</p>
${validate_component(Image, "Image").$$render($$result, {
      src: "../images/blog/adding-a-chart-to-your-d3-tooltip/west-virginia.jpg",
      alt: "A static image focusing on West Virginia, showcasing the tooltip which shows a line chart increasing over time."
    }, {}, {})}
<h2 id="${"so-how-do-you-do-it"}"><a href="${"#so-how-do-you-do-it"}">So, how do you do it?</a></h2>
<p>Great question! It\u2019s thankfully not that hard, but the payoff is huge. The shift from my old, boring tooltip to my new, sexy one took only a couple of hours, thanks to a few <a href="${"https://stackoverflow.com/questions/43904643/add-chart-to-tooltip-in-d3"}" rel="${"nofollow"}">Stack Overflow answers</a> and <a href="${"https://bl.ocks.org/maelafifi/ee7fecf90bb5060d5f9a7551271f4397"}" rel="${"nofollow"}">online examples</a>.</p>
<h3 id="${"step-1-load-d3-tip"}"><a href="${"#step-1-load-d3-tip"}">Step 1: Load <code>d3-tip</code></a></h3>
<p>The process mostly relies on <code>d3-tip</code>, which you can learn more about <a href="${"http://labratrevenge.com/d3-tip/"}" rel="${"nofollow"}">here</a>.</p>
<p>You can load <code>d3-tip</code> with the following code:</p>
<pre class="${"language-js"}"><!-- HTML_TAG_START -->${`<code class="language-js"><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"https://cdnjs.cloudflare.com/ajax/libs/d3-tip/0.7.1/d3-tip.min.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code>`}<!-- HTML_TAG_END --></pre>
<h3 id="${"step-2-create-a-tooltip-object"}"><a href="${"#step-2-create-a-tooltip-object"}">Step 2: Create a tooltip object</a></h3>
<p>Next, you initialize your tooltip, give it a class (for CSS styling), and provide the specified <code>offset</code>. In my example, I define my offset according to the <a href="${"https://stackoverflow.com/questions/28536367/in-d3-js-how-to-adjust-tooltip-up-and-down-based-on-the-screen-position"}" rel="${"nofollow"}">user\u2019s mouse position</a>. That way, if a user hovers over an eastern state, the tooltip doesn\u2019t disappear off the screen!</p>
<pre class="${"language-js"}"><!-- HTML_TAG_START -->${`<code class="language-js"><span class="token comment">// Define the tooltip</span>
<span class="token keyword">var</span> tool_tip <span class="token operator">=</span> d3
  <span class="token punctuation">.</span><span class="token function">tip</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"class"</span><span class="token punctuation">,</span> <span class="token string">"d3-tip"</span><span class="token punctuation">)</span>
  <span class="token comment">// If the mouse position is greater beyond ~ Kentucky/Missouri,</span>
  <span class="token comment">// Offset tooltip left instead of right</span>
  <span class="token punctuation">.</span><span class="token function">offset</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>current_position<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">650</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">120</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">120</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  <span class="token comment">// Input the title, and include the div with an id of #tipDiv</span>
  <span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token string">"&lt;p>Opioid-involved deaths over time in&lt;/p>&lt;div id='tipDiv'>&lt;/div>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Call it as a function to our app-wide SVG</span>
<span class="token function">svg</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>tool_tip<span class="token punctuation">)</span><span class="token punctuation">;</span></code>`}<!-- HTML_TAG_END --></pre>
<p>The most important part here is</p>
<pre class="${"language-js"}"><!-- HTML_TAG_START -->${`<code class="language-js"><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span>
  <span class="token string">"&lt;p>Opioid-involved deaths over time in&lt;/p>&lt;div id='tipDiv'>&lt;/div>"</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span></code>`}<!-- HTML_TAG_END --></pre>
<p>where we define the html that creates the tooltip itself. In our case, we provide a title, \u201COpioid-involved deaths over time\u201D, and also specify the div that the tooltip should include.</p>
<h3 id="${"step-3-create-the-tipdiv-object"}"><a href="${"#step-3-create-the-tipdiv-object"}">Step 3: Create the <code>tipDiv</code> object</a></h3>
<p>Finally, we can create the <code>tipDiv</code> object we referenced in the above code. The object will be created on mouseover of the group of interest (in my case, states). Our code will look something like this (don\u2019t worry too much about it, I\u2019ll explain step by step below):</p>
<pre class="${"language-js"}"><!-- HTML_TAG_START -->${`<code class="language-js">states <span class="token operator">=</span> svg<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"g"</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"class"</span><span class="token punctuation">,</span> <span class="token string">"states"</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">selectAll</span><span class="token punctuation">(</span><span class="token string">"path"</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span>topojson<span class="token punctuation">.</span><span class="token function">feature</span><span class="token punctuation">(</span>us<span class="token punctuation">,</span> us<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>states<span class="token punctuation">)</span><span class="token punctuation">.</span>features<span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">enter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"path"</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"d"</span><span class="token punctuation">,</span> path<span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'mouseout'</span><span class="token punctuation">,</span> tool_tip<span class="token punctuation">.</span>hide<span class="token punctuation">)</span> <span class="token comment">// On mouseout, hide the tooltip</span>
  <span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'mouseover'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">d</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// Define and store the mouse position;</span>
    <span class="token comment">// This is used to define tooltip offset, seen above</span>
    current_position <span class="token operator">=</span> d3<span class="token punctuation">.</span><span class="token function">mouse</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Record current state</span>
    current_state <span class="token operator">=</span> nameById<span class="token punctuation">[</span>d<span class="token punctuation">.</span>id<span class="token punctuation">]</span>

    <span class="token comment">// Show the tooltip</span>
    tool_tip<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// ... Continued below</span></code>`}<!-- HTML_TAG_END --></pre>
<p>After that initialization and <code>show</code> function, we can define the <code>tipDiv</code> object:</p>
<pre class="${"language-js"}"><!-- HTML_TAG_START -->${`<code class="language-js"><span class="token comment">/* ... Continued from above 
       Select the #tipDiv element, and append an SVG (this is the tooltip) */</span>
<span class="token keyword">var</span> tipSVG <span class="token operator">=</span> d3<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">"#tipDiv"</span><span class="token punctuation">)</span>
     <span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"svg"</span><span class="token punctuation">)</span>
     <span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"width"</span><span class="token punctuation">,</span> <span class="token number">220</span><span class="token punctuation">)</span>
     <span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"height"</span><span class="token punctuation">,</span> <span class="token number">55</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/* Apply the same logic you would to a regular chart, 
   but append it to our tipSVG */</span>
tipSVG<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"path"</span><span class="token punctuation">)</span>
     <span class="token punctuation">.</span><span class="token function">datum</span><span class="token punctuation">(</span>overdoses<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">d</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> nameById<span class="token punctuation">[</span>d<span class="token punctuation">.</span>id<span class="token punctuation">]</span> <span class="token operator">==</span> current_state<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
     <span class="token punctuation">.</span><span class="token function">style</span><span class="token punctuation">(</span><span class="token string">"stroke"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
     	<span class="token keyword">if</span> <span class="token punctuation">(</span>rateById<span class="token punctuation">[</span>d<span class="token punctuation">.</span>id<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
     		<span class="token keyword">return</span> <span class="token string">"grey"</span>
     	<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
     	<span class="token keyword">return</span> <span class="token function">color</span><span class="token punctuation">(</span>rateById<span class="token punctuation">[</span>d<span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token punctuation">)</span>
     	<span class="token punctuation">&#125;</span>
 	  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
     <span class="token punctuation">.</span><span class="token function">style</span><span class="token punctuation">(</span><span class="token string">"stroke-width"</span><span class="token punctuation">,</span> <span class="token number">1.5</span><span class="token punctuation">)</span>
     <span class="token punctuation">.</span><span class="token function">style</span><span class="token punctuation">(</span><span class="token string">"fill"</span><span class="token punctuation">,</span> <span class="token string">"none"</span><span class="token punctuation">)</span>
     <span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"d"</span><span class="token punctuation">,</span> line<span class="token punctuation">)</span>

<span class="token comment">// Same as above (this is the circle at the end of the line)</span>
tipSVG<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"circle"</span><span class="token punctuation">)</span>
     <span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"fill"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
     	<span class="token keyword">if</span> <span class="token punctuation">(</span>rateById<span class="token punctuation">[</span>d<span class="token punctuation">.</span>id<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
     		<span class="token keyword">return</span> <span class="token string">"grey"</span>
     	<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
     	<span class="token keyword">return</span> <span class="token function">color</span><span class="token punctuation">(</span>rateById<span class="token punctuation">[</span>d<span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token punctuation">)</span>
     	<span class="token punctuation">&#125;</span>
 	  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"stroke"</span><span class="token punctuation">,</span> <span class="token string">"black"</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"cx"</span><span class="token punctuation">,</span> <span class="token number">130</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"cy"</span><span class="token punctuation">,</span> <span class="token function">y_tooltip</span><span class="token punctuation">(</span>rateById<span class="token punctuation">[</span>d<span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"r"</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>

<span class="token comment">// Tooltip labelling on last value</span>
tipSVG<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"text"</span><span class="token punctuation">)</span>
     <span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span>rateById<span class="token punctuation">[</span>d<span class="token punctuation">.</span>id<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">" deaths"</span><span class="token punctuation">)</span>
     <span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"x"</span><span class="token punctuation">,</span> <span class="token number">140</span><span class="token punctuation">)</span>
     <span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"y"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
     	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">y_tooltip</span><span class="token punctuation">(</span>rateById<span class="token punctuation">[</span>d<span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">15</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token number">10</span> <span class="token punctuation">&#125;</span>
     		<span class="token keyword">else</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token function">y_tooltip</span><span class="token punctuation">(</span>rateById<span class="token punctuation">[</span>d<span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">7</span> <span class="token punctuation">&#125;</span>
     	<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

<span class="token comment">// Same as above</span>
tipSVG<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"text"</span><span class="token punctuation">)</span>
     <span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token string">"per 100,000"</span><span class="token punctuation">)</span>
     <span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"x"</span><span class="token punctuation">,</span> <span class="token number">140</span><span class="token punctuation">)</span>
     <span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"y"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
     	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">y_tooltip</span><span class="token punctuation">(</span>rateById<span class="token punctuation">[</span>d<span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">15</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token number">24</span> <span class="token punctuation">&#125;</span>
     		<span class="token keyword">else</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token function">y_tooltip</span><span class="token punctuation">(</span>rateById<span class="token punctuation">[</span>d<span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">7</span> <span class="token punctuation">&#125;</span>
     	<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

<span class="token comment">// State name</span>
tipSVG<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"text"</span><span class="token punctuation">)</span>
     <span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span>current_state<span class="token punctuation">)</span>
     <span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"x"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
     <span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"y"</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span>
     <span class="token punctuation">.</span><span class="token function">style</span><span class="token punctuation">(</span><span class="token string">"font-size"</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span>
     <span class="token punctuation">.</span><span class="token function">style</span><span class="token punctuation">(</span><span class="token string">"font-weight"</span><span class="token punctuation">,</span> <span class="token number">400</span><span class="token punctuation">)</span>
 <span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token comment">// &lt;- This is the end of the whole .on('mouseover') function</span></code>`}<!-- HTML_TAG_END --></pre>
<p>What\u2019s happening here? Let\u2019s look at one piece of our mouseover function at a time.</p>
<p><strong>First</strong>, we define the object and name it <code>tipSVG</code>. <code>tipSVG</code> selects <code>#tipDiv</code> (defined in our d3-tip) and appends an SVG. We also define the width and height of the tooltip.</p>
<pre class="${"language-js"}"><!-- HTML_TAG_START -->${`<code class="language-js"><span class="token keyword">var</span> tipSVG <span class="token operator">=</span> d3
  <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">"#tipDiv"</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"svg"</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"width"</span><span class="token punctuation">,</span> <span class="token number">220</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"height"</span><span class="token punctuation">,</span> <span class="token number">55</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>`}<!-- HTML_TAG_END --></pre>
<p><strong>Next</strong>, we append a path to that SVG. This could be a circle, or a rectangle, or any other appendable shape. Because I am drawing a simple line, we use <code>path</code>.</p>
<pre class="${"language-js"}"><!-- HTML_TAG_START -->${`<code class="language-js">tipSVG
  <span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"path"</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">datum</span><span class="token punctuation">(</span>
    overdoses<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">d</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">return</span> nameById<span class="token punctuation">[</span>d<span class="token punctuation">.</span>id<span class="token punctuation">]</span> <span class="token operator">==</span> current_state<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  <span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">style</span><span class="token punctuation">(</span><span class="token string">"stroke"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>rateById<span class="token punctuation">[</span>d<span class="token punctuation">.</span>id<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">return</span> <span class="token string">"grey"</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">return</span> <span class="token function">color</span><span class="token punctuation">(</span>rateById<span class="token punctuation">[</span>d<span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">style</span><span class="token punctuation">(</span><span class="token string">"stroke-width"</span><span class="token punctuation">,</span> <span class="token number">1.5</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">style</span><span class="token punctuation">(</span><span class="token string">"fill"</span><span class="token punctuation">,</span> <span class="token string">"none"</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"d"</span><span class="token punctuation">,</span> line<span class="token punctuation">)</span><span class="token punctuation">;</span></code>`}<!-- HTML_TAG_END --></pre>
<p>In defining the <code>d</code> attribute, you see I reference <code>line</code>. This is a function defined earlier in my code to return the <code>x</code> and <code>y</code> position of each data point, to create the path itself, as you can see below:</p>
<pre class="${"language-js"}"><!-- HTML_TAG_START -->${`<code class="language-js"><span class="token keyword">var</span> x_tooltip <span class="token operator">=</span> d3
  <span class="token punctuation">.</span><span class="token function">scaleLinear</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">domain</span><span class="token punctuation">(</span>
    d3<span class="token punctuation">.</span><span class="token function">extent</span><span class="token punctuation">(</span>overdoses<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">d</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">return</span> d<span class="token punctuation">.</span>year<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  <span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">range</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">130</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> y_tooltip <span class="token operator">=</span> d3<span class="token punctuation">.</span><span class="token function">scaleLinear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">domain</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">range</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> line <span class="token operator">=</span> d3
  <span class="token punctuation">.</span><span class="token function">line</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">x</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">d</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token function">x_tooltip</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>year<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">y</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">d</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token function">y_tooltip</span><span class="token punctuation">(</span><span class="token operator">+</span>d<span class="token punctuation">.</span>rate<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>`}<!-- HTML_TAG_END --></pre>
${validate_component(Info, "Info").$$render($$result, {}, {}, {
      default: () => `<p>Because the tooltip contains its own chart with a predefined with and height, we need to provide scale functions as we would in a normal chart. We name this <code>x_tooltip</code> and <code>y_tooltip</code> so as to avoid confusion with our main scaling functions.</p>`
    })}
<p><strong>Lastly</strong>, we add a circle at the end of the line to signify the final data point. We also add the text label for the year 2017.</p>
<pre class="${"language-js"}"><!-- HTML_TAG_START -->${`<code class="language-js"><span class="token comment">// Final point</span>
tipSVG<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"circle"</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"fill"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  	<span class="token keyword">if</span> <span class="token punctuation">(</span>rateById<span class="token punctuation">[</span>d<span class="token punctuation">.</span>id<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  		<span class="token keyword">return</span> <span class="token string">"grey"</span>
  	<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
  	<span class="token keyword">return</span> <span class="token function">color</span><span class="token punctuation">(</span>rateById<span class="token punctuation">[</span>d<span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token punctuation">)</span>
  	<span class="token punctuation">&#125;</span>
	  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
   <span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"stroke"</span><span class="token punctuation">,</span> <span class="token string">"black"</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"cx"</span><span class="token punctuation">,</span> <span class="token number">130</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"cy"</span><span class="token punctuation">,</span> <span class="token function">y_tooltip</span><span class="token punctuation">(</span>rateById<span class="token punctuation">[</span>d<span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"r"</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>

<span class="token comment">// Text label (##### deaths)</span>
tipSVG<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"text"</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span>rateById<span class="token punctuation">[</span>d<span class="token punctuation">.</span>id<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">" deaths"</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"x"</span><span class="token punctuation">,</span> <span class="token number">140</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"y"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">y_tooltip</span><span class="token punctuation">(</span>rateById<span class="token punctuation">[</span>d<span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">15</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token number">10</span> <span class="token punctuation">&#125;</span>
  		<span class="token keyword">else</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token function">y_tooltip</span><span class="token punctuation">(</span>rateById<span class="token punctuation">[</span>d<span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">7</span> <span class="token punctuation">&#125;</span>
  	<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

<span class="token comment">// Per 100,00</span>
tipSVG<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"text"</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token string">"per 100,000"</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"x"</span><span class="token punctuation">,</span> <span class="token number">140</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"y"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">y_tooltip</span><span class="token punctuation">(</span>rateById<span class="token punctuation">[</span>d<span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">15</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token number">24</span> <span class="token punctuation">&#125;</span>
  		<span class="token keyword">else</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token function">y_tooltip</span><span class="token punctuation">(</span>rateById<span class="token punctuation">[</span>d<span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">7</span> <span class="token punctuation">&#125;</span>
  	<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

<span class="token comment">// State name</span>
tipSVG<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"text"</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span>current_state<span class="token punctuation">)</span> <span class="token comment">// Set in our mouseover function from earlier</span>
  <span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"x"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"y"</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">style</span><span class="token punctuation">(</span><span class="token string">"font-size"</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">style</span><span class="token punctuation">(</span><span class="token string">"font-weight"</span><span class="token punctuation">,</span> <span class="token number">400</span><span class="token punctuation">)</span>
 <span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token comment">// End mouseover function</span></code>`}<!-- HTML_TAG_END --></pre>
<h2 id="${"in-sum"}"><a href="${"#in-sum"}">In sum</a></h2>
<p>The process of appending a chart to your tooltip in a D3.js visualization is as simple as:</p>
<ol><li>Load <code>d3-tip</code> via a <code>&lt;script&gt;</code> tag</li>
<li>Create a tooltip object using <code>d3-tip</code>, which can be done easily upon consulting their documentation</li>
<li>Add an SVG element to the tooltip we created, as we would create a chart normally using D3 syntax</li></ol>
<p>Voila! You can find the code all in one place <a href="${"https://github.com/connorrothschild/D3.js/blob/master/map-overdoses/index.html"}" rel="${"nofollow"}">here</a>. Please note that I made this visualization early in my career, so I\u2019m not particularly proud of the code \u{1F605}</p>
<p>You can play around with the visualization and checkout the tooltip for yourself below (find the fullscreen version <a href="${"https://connorrothschild.github.io/D3.js/map-overdoses/"}" rel="${"nofollow"}">here</a>):</p>
<iframe title="${"Map of opioid-related overdoses, by state, between 1999 and 2017."}" src="${"https://connorrothschild.github.io/D3.js/map-overdoses/"}" width="${"100%"}" height="${"768px"}" style="${"background: white;"}"></iframe>`
  })}`;
});
var addingAChartToYourD3Tooltip = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  "default": Adding_a_chart_to_your_d3_tooltip,
  metadata: metadata$h
});
var metadata$g = {
  "layout": "blog",
  "title": "How to Combine Animated Plots in R",
  "description": "Leveraging the power of {gganimate} and {magick} to combine animated plots for your viewers.",
  "date": "2019-10-09",
  "image": "tidy-tuesday-powerlifting/header.png",
  "archived": true
};
var Tidy_tuesday_powerlifting = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign($$props, metadata$g), {}, {
    default: () => `<p>In this tutorial, I\u2019m going to outline the steps necessary to create an animated, faceted plot in R. Although rare, combining animated plots can be a powerful way to showcase different elements of the same data (as you\u2019ll see below).</p>
<p>In this example, I\u2019m using weightlifting data from the International Powerlifting Federation. For the purposes of this tutorial, we\u2019ll look at <em>differences in top lifts by sex</em>. A faceted, animated plot is a great option because we\u2019d like to observe <strong>the magnitude of these differences</strong> and <strong>how these differences have evolved over time</strong>.</p>
<p>We\u2019ll be creating this GIF:</p>
${validate_component(Image, "Image").$$render($$result, {
      src: "../images/blog/tidy-tuesday-powerlifting/unnamed-chunk-11-1.gif",
      alt: "A combination of the two aforementioned plots. The top plot is the animated dumbbell plot, and the bottom is a line chart. In combination, they allow the user to see the magnitude of differences between men and women, as well as how these differences have evolved over time."
    }, {}, {})}
<h2 id="${"environment-setup"}"><a href="${"#environment-setup"}">Environment setup</a></h2>
<p>These are the packages we\u2019ll need to get started. In my case, I use a <a href="${"https://github.com/connorrothschild/cr"}" rel="${"nofollow"}">custom theme</a> I\u2019ve developed for stylistic purposes. Feel free to instead run <code>theme_set(theme_minimal())</code> rather than use my theme!</p>
<pre class="${"language-r"}"><!-- HTML_TAG_START -->${`<code class="language-r">library<span class="token punctuation">(</span>ggplot2<span class="token punctuation">)</span>
library<span class="token punctuation">(</span>tidyverse<span class="token punctuation">)</span>
library<span class="token punctuation">(</span>ggtext<span class="token punctuation">)</span>
library<span class="token punctuation">(</span>gifski<span class="token punctuation">)</span>
library<span class="token punctuation">(</span>gganimate<span class="token punctuation">)</span>
library<span class="token punctuation">(</span>cr<span class="token punctuation">)</span>

set_cr_theme<span class="token punctuation">(</span>font <span class="token operator">=</span> <span class="token string">"Proxima Nova"</span><span class="token punctuation">)</span>
<span class="token comment"># theme_set(theme_minimal())</span></code>`}<!-- HTML_TAG_END --></pre>
<h2 id="${"load-and-clean-data"}"><a href="${"#load-and-clean-data"}">Load and clean data</a></h2>
<p>I\u2019ve already done a lot of the data cleaning for you. If you\u2019d like to follow along, here\u2019s the process (or, skip ahead!).</p>
<p>Here, we\u2019ll do some minor cleaning and then reshape the three lifts into one column:</p>
<pre class="${"language-r"}"><!-- HTML_TAG_START -->${`<code class="language-r">ipf_lifts <span class="token operator">&lt;-</span> readr<span class="token operator">::</span>read_csv<span class="token punctuation">(</span><span class="token string">"data/ipf_lifts.csv"</span><span class="token punctuation">)</span> <span class="token percent-operator operator">%>%</span>
  mutate<span class="token punctuation">(</span>year <span class="token operator">=</span> lubridate<span class="token operator">::</span>year<span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">)</span>

ipf_lifts_reshape <span class="token operator">&lt;-</span> ipf_lifts <span class="token percent-operator operator">%>%</span>
  tidyr<span class="token operator">::</span>pivot_longer<span class="token punctuation">(</span>cols <span class="token operator">=</span> c<span class="token punctuation">(</span><span class="token string">"best3squat_kg"</span><span class="token punctuation">,</span> <span class="token string">"best3bench_kg"</span><span class="token punctuation">,</span> <span class="token string">"best3deadlift_kg"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> names_to <span class="token operator">=</span> <span class="token string">"lift"</span><span class="token punctuation">)</span> <span class="token percent-operator operator">%>%</span>
  select<span class="token punctuation">(</span>name<span class="token punctuation">,</span> sex<span class="token punctuation">,</span> year<span class="token punctuation">,</span> lift<span class="token punctuation">,</span> value<span class="token punctuation">)</span></code>`}<!-- HTML_TAG_END --></pre>
<p>For my visualization, I\u2019m only concerned with the <em>heaviest</em> lifts from
each year:</p>
<pre class="${"language-r"}"><!-- HTML_TAG_START -->${`<code class="language-r">ipf_lifts_maxes <span class="token operator">&lt;-</span> ipf_lifts_reshape <span class="token percent-operator operator">%>%</span>
  group_by<span class="token punctuation">(</span>year<span class="token punctuation">,</span> sex<span class="token punctuation">,</span> lift<span class="token punctuation">)</span> <span class="token percent-operator operator">%>%</span>
  top_n<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token percent-operator operator">%>%</span>
  ungroup <span class="token percent-operator operator">%>%</span>
  distinct<span class="token punctuation">(</span>year<span class="token punctuation">,</span> lift<span class="token punctuation">,</span> value<span class="token punctuation">,</span> .keep_all <span class="token operator">=</span> <span class="token boolean">TRUE</span><span class="token punctuation">)</span></code>`}<!-- HTML_TAG_END --></pre>
<p>The first visualization we\u2019ll create for the final output is a <strong>dumbbell plot</strong>. Curious what that is, or how to make it in R? <a href="${"https://www.connorrothschild.com/post/dumbbell-plots/"}" rel="${"nofollow"}">Check out my other post on the topic</a>.</p>
<p>In order to construct a dumbbell plot, we need both male and female
observations in the same row. For this, we use the <code>spread</code> function.</p>
<pre class="${"language-r"}"><!-- HTML_TAG_START -->${`<code class="language-r">max_pivot <span class="token operator">&lt;-</span> ipf_lifts_maxes <span class="token percent-operator operator">%>%</span>
  spread<span class="token punctuation">(</span>sex<span class="token punctuation">,</span> value<span class="token punctuation">)</span></code>`}<!-- HTML_TAG_END --></pre>
<p>Now, let\u2019s construct a dataframe for each sex:</p>
<pre class="${"language-r"}"><!-- HTML_TAG_START -->${`<code class="language-r">male_lifts <span class="token operator">&lt;-</span> max_pivot <span class="token percent-operator operator">%>%</span>
  select<span class="token punctuation">(</span><span class="token operator">-</span>name<span class="token punctuation">)</span> <span class="token percent-operator operator">%>%</span>
  filter<span class="token punctuation">(</span><span class="token operator">!</span>is.na<span class="token punctuation">(</span>M<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token percent-operator operator">%>%</span>
  group_by<span class="token punctuation">(</span>year<span class="token punctuation">,</span> lift<span class="token punctuation">)</span> <span class="token percent-operator operator">%>%</span>
  summarise<span class="token punctuation">(</span>male <span class="token operator">=</span> mean<span class="token punctuation">(</span>M<span class="token punctuation">)</span><span class="token punctuation">)</span>

female_lifts <span class="token operator">&lt;-</span> max_pivot <span class="token percent-operator operator">%>%</span>
  select<span class="token punctuation">(</span><span class="token operator">-</span>name<span class="token punctuation">)</span> <span class="token percent-operator operator">%>%</span>
  filter<span class="token punctuation">(</span><span class="token operator">!</span>is.na<span class="token punctuation">(</span>F<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token percent-operator operator">%>%</span>
  group_by<span class="token punctuation">(</span>year<span class="token punctuation">,</span> lift<span class="token punctuation">)</span> <span class="token percent-operator operator">%>%</span>
  summarise<span class="token punctuation">(</span>female <span class="token operator">=</span> mean<span class="token punctuation">(</span>F<span class="token punctuation">)</span><span class="token punctuation">)</span></code>`}<!-- HTML_TAG_END --></pre>
<p>And join them:</p>
<pre class="${"language-r"}"><!-- HTML_TAG_START -->${`<code class="language-r">max_lifts <span class="token operator">&lt;-</span> merge<span class="token punctuation">(</span>male_lifts<span class="token punctuation">,</span> female_lifts<span class="token punctuation">)</span>

max_lifts_final <span class="token operator">&lt;-</span> max_lifts <span class="token percent-operator operator">%>%</span>
  group_by<span class="token punctuation">(</span>year<span class="token punctuation">,</span> lift<span class="token punctuation">)</span> <span class="token percent-operator operator">%>%</span>
  mutate<span class="token punctuation">(</span>diff <span class="token operator">=</span> male <span class="token operator">-</span> female<span class="token punctuation">)</span></code>`}<!-- HTML_TAG_END --></pre>
<p>Not following along, or want to check your progress? Here\u2019s what our data looks like in its final form:</p>
<div class="${"table-container"}"><table><thead><tr><th align="${"left"}">year</th>
<th align="${"left"}">lift</th>
<th align="${"left"}">male</th>
<th align="${"left"}">female</th>
<th align="${"left"}">diff</th></tr></thead>
<tbody><tr><td align="${"left"}">1980</td>
<td align="${"left"}">best3bench_kg</td>
<td align="${"left"}">262.5</td>
<td align="${"left"}">120</td>
<td align="${"left"}">142.5</td></tr>
<tr><td align="${"left"}">1980</td>
<td align="${"left"}">best3deadlift_kg</td>
<td align="${"left"}">395</td>
<td align="${"left"}">205</td>
<td align="${"left"}">190</td></tr>
<tr><td align="${"left"}">1980</td>
<td align="${"left"}">best3squat_kg</td>
<td align="${"left"}">417.5</td>
<td align="${"left"}">230</td>
<td align="${"left"}">187.5</td></tr>
<tr><td align="${"left"}">1981</td>
<td align="${"left"}">best3bench_kg</td>
<td align="${"left"}">245</td>
<td align="${"left"}">150</td>
<td align="${"left"}">95</td></tr>
<tr><td align="${"left"}">1981</td>
<td align="${"left"}">best3deadlift_kg</td>
<td align="${"left"}">367.5</td>
<td align="${"left"}">230</td>
<td align="${"left"}">137.5</td></tr>
<tr><td align="${"left"}">1981</td>
<td align="${"left"}">best3squat_kg</td>
<td align="${"left"}">427.5</td>
<td align="${"left"}">215</td>
<td align="${"left"}">212.5</td></tr></tbody></table></div>
<h2 id="${"visualize"}"><a href="${"#visualize"}">Visualize!</a></h2>
<p>Finally, we can construct the visualization.</p>
<p>First, we can create a static visualization using <code>ggalt</code> (again, my <a href="${"https://www.connorrothschild.com/post/dumbbell-plots/"}" rel="${"nofollow"}">blog post</a> covers the details of this step).</p>
<p>You can fast forward the creation of individual plots if you\u2019re only interested in the <strong>combination</strong> of the two. You\u2019ll find that at the end of this post!</p>
<pre class="${"language-r"}"><!-- HTML_TAG_START -->${`<code class="language-r">max_lifts_final <span class="token percent-operator operator">%>%</span>
  filter<span class="token punctuation">(</span>year <span class="token operator">==</span> <span class="token number">2019</span><span class="token punctuation">)</span> <span class="token percent-operator operator">%>%</span>
  ggplot<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span>
  ggalt<span class="token operator">::</span>geom_dumbbell<span class="token punctuation">(</span>aes<span class="token punctuation">(</span>y <span class="token operator">=</span> lift<span class="token punctuation">,</span>
                    x <span class="token operator">=</span> female<span class="token punctuation">,</span> xend <span class="token operator">=</span> male<span class="token punctuation">)</span><span class="token punctuation">,</span>
                colour <span class="token operator">=</span> <span class="token string">"grey"</span><span class="token punctuation">,</span> size <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">,</span>
                colour_x <span class="token operator">=</span> <span class="token string">"#D6604C"</span><span class="token punctuation">,</span> colour_xend <span class="token operator">=</span> <span class="token string">"#395B74"</span><span class="token punctuation">)</span> <span class="token operator">+</span>
  labs<span class="token punctuation">(</span>y <span class="token operator">=</span> element_blank<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
       x <span class="token operator">=</span> <span class="token string">"Top Lift Recorded (kg)"</span><span class="token punctuation">,</span>
       title <span class="token operator">=</span>  <span class="token string">"How &lt;span style='color:#D6604C'>Women&lt;/span> and &lt;span style='color:#395B74'>Men&lt;/span> Differ in Top Lifts"</span><span class="token punctuation">,</span>
                       subtitle <span class="token operator">=</span> <span class="token string">"In 2019"</span><span class="token punctuation">)</span> <span class="token operator">+</span>
  theme<span class="token punctuation">(</span>plot.title <span class="token operator">=</span> element_markdown<span class="token punctuation">(</span>lineheight <span class="token operator">=</span> <span class="token number">1.1</span><span class="token punctuation">,</span> size <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        plot.subtitle <span class="token operator">=</span> element_text<span class="token punctuation">(</span>size <span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span>
  scale_y_discrete<span class="token punctuation">(</span>labels <span class="token operator">=</span> c<span class="token punctuation">(</span><span class="token string">"Bench"</span><span class="token punctuation">,</span> <span class="token string">"Deadlift"</span><span class="token punctuation">,</span> <span class="token string">"Squat"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span>
  drop_axis<span class="token punctuation">(</span>axis <span class="token operator">=</span> <span class="token string">"y"</span><span class="token punctuation">)</span> <span class="token operator">+</span>
  geom_text<span class="token punctuation">(</span>aes<span class="token punctuation">(</span>x <span class="token operator">=</span> female<span class="token punctuation">,</span> y <span class="token operator">=</span> lift<span class="token punctuation">,</span> label <span class="token operator">=</span> paste<span class="token punctuation">(</span>female<span class="token punctuation">,</span> <span class="token string">"kg"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            color <span class="token operator">=</span> <span class="token string">"#D6604C"</span><span class="token punctuation">,</span> size <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">,</span> vjust <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span>
  geom_text<span class="token punctuation">(</span>aes<span class="token punctuation">(</span>x <span class="token operator">=</span> male<span class="token punctuation">,</span> y <span class="token operator">=</span> lift<span class="token punctuation">,</span> label <span class="token operator">=</span> paste<span class="token punctuation">(</span>male<span class="token punctuation">,</span> <span class="token string">"kg"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            color <span class="token operator">=</span> <span class="token string">"#395B74"</span><span class="token punctuation">,</span> size <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">,</span> vjust <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span>
  geom_rect<span class="token punctuation">(</span>aes<span class="token punctuation">(</span>xmin<span class="token operator">=</span><span class="token number">430</span><span class="token punctuation">,</span> xmax<span class="token operator">=</span><span class="token number">470</span><span class="token punctuation">,</span> ymin<span class="token operator">=</span><span class="token operator">-</span><span class="token number">Inf</span><span class="token punctuation">,</span> ymax<span class="token operator">=</span><span class="token number">Inf</span><span class="token punctuation">)</span><span class="token punctuation">,</span> fill<span class="token operator">=</span><span class="token string">"grey80"</span><span class="token punctuation">)</span> <span class="token operator">+</span>
  geom_text<span class="token punctuation">(</span>aes<span class="token punctuation">(</span>label<span class="token operator">=</span>diff<span class="token punctuation">,</span> y<span class="token operator">=</span>lift<span class="token punctuation">,</span> x<span class="token operator">=</span><span class="token number">450</span><span class="token punctuation">)</span><span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">+</span>
  geom_text<span class="token punctuation">(</span>aes<span class="token punctuation">(</span>x<span class="token operator">=</span><span class="token number">450</span><span class="token punctuation">,</span> y<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">"Difference"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            color<span class="token operator">=</span><span class="token string">"grey20"</span><span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span> vjust<span class="token operator">=</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span></code>`}<!-- HTML_TAG_END --></pre>
${validate_component(Image, "Image").$$render($$result, {
      src: "../images/blog/tidy-tuesday-powerlifting/unnamed-chunk-8-1.png",
      alt: "A static dumbbell plot which represents male and female \u2018top lifts' in 2019."
    }, {}, {})}
<p>Finally, we animate, using Thomas Pedersen\u2019s wonderful <a href="${"https://github.com/thomasp85/gganimate"}" rel="${"nofollow"}">gganimate
package</a>. This is a relatively easy step, because <code>gganimate</code> only requires two extra lines of code: <code>transition_states</code> and <code>ease_aes</code>. Then, we pass it into the <code>animate</code> function!</p>
<pre class="${"language-r"}"><!-- HTML_TAG_START -->${`<code class="language-r">animation <span class="token operator">&lt;-</span> max_lifts_final <span class="token percent-operator operator">%>%</span>
  ggplot<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span>
  ggalt<span class="token operator">::</span>geom_dumbbell<span class="token punctuation">(</span>aes<span class="token punctuation">(</span>y <span class="token operator">=</span> lift<span class="token punctuation">,</span>
                    x <span class="token operator">=</span> female<span class="token punctuation">,</span> xend <span class="token operator">=</span> male<span class="token punctuation">)</span><span class="token punctuation">,</span>
                colour <span class="token operator">=</span> <span class="token string">"grey"</span><span class="token punctuation">,</span> size <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">,</span>
                colour_x <span class="token operator">=</span> <span class="token string">"#D6604C"</span><span class="token punctuation">,</span> colour_xend <span class="token operator">=</span> <span class="token string">"#395B74"</span><span class="token punctuation">)</span> <span class="token operator">+</span>
  labs<span class="token punctuation">(</span>y <span class="token operator">=</span> element_blank<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
       x <span class="token operator">=</span> <span class="token string">"Top Lift Recorded (kg)"</span><span class="token punctuation">,</span>
       title <span class="token operator">=</span>  <span class="token string">"How &lt;span style='color:#D6604C'>Women&lt;/span> and &lt;span style='color:#395B74'>Men&lt;/span> Differ in Top Lifts"</span><span class="token punctuation">,</span>
  subtitle<span class="token operator">=</span><span class="token string">'&#92;nThis plot depicts the difference between the heaviest lifts for each sex at International Powerlifting Federation&#92;nevents over time. &#92;n &#92;n&#123;closest_state&#125;'</span><span class="token punctuation">)</span> <span class="token operator">+</span>
  theme<span class="token punctuation">(</span>plot.title <span class="token operator">=</span> element_markdown<span class="token punctuation">(</span>lineheight <span class="token operator">=</span> <span class="token number">1.1</span><span class="token punctuation">,</span> size <span class="token operator">=</span> <span class="token number">25</span><span class="token punctuation">,</span> margin<span class="token operator">=</span>margin<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        plot.subtitle <span class="token operator">=</span> element_text<span class="token punctuation">(</span>size <span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">,</span> margin<span class="token operator">=</span>margin<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span>
  scale_y_discrete<span class="token punctuation">(</span>labels <span class="token operator">=</span> c<span class="token punctuation">(</span><span class="token string">"Bench"</span><span class="token punctuation">,</span> <span class="token string">"Deadlift"</span><span class="token punctuation">,</span> <span class="token string">"Squat"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span>
  drop_axis<span class="token punctuation">(</span>axis <span class="token operator">=</span> <span class="token string">"y"</span><span class="token punctuation">)</span> <span class="token operator">+</span>
  geom_text<span class="token punctuation">(</span>aes<span class="token punctuation">(</span>x <span class="token operator">=</span> female<span class="token punctuation">,</span> y <span class="token operator">=</span> lift<span class="token punctuation">,</span> label <span class="token operator">=</span> paste<span class="token punctuation">(</span>female<span class="token punctuation">,</span> <span class="token string">"kg"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            color <span class="token operator">=</span> <span class="token string">"#D6604C"</span><span class="token punctuation">,</span> size <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">,</span> vjust <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span>
  geom_text<span class="token punctuation">(</span>aes<span class="token punctuation">(</span>x <span class="token operator">=</span> male<span class="token punctuation">,</span> y <span class="token operator">=</span> lift<span class="token punctuation">,</span> label <span class="token operator">=</span> paste<span class="token punctuation">(</span>male<span class="token punctuation">,</span> <span class="token string">"kg"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            color <span class="token operator">=</span> <span class="token string">"#395B74"</span><span class="token punctuation">,</span> size <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">,</span> vjust <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span>
  transition_states<span class="token punctuation">(</span>year<span class="token punctuation">,</span> transition_length <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">,</span> state_length <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span>
  ease_aes<span class="token punctuation">(</span><span class="token string">'cubic-in-out'</span><span class="token punctuation">)</span>

a_gif <span class="token operator">&lt;-</span> animate<span class="token punctuation">(</span>animation<span class="token punctuation">,</span>
                 fps <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span>
                 duration <span class="token operator">=</span> <span class="token number">25</span><span class="token punctuation">,</span>
                 width <span class="token operator">=</span> <span class="token number">800</span><span class="token punctuation">,</span> height <span class="token operator">=</span> <span class="token number">400</span><span class="token punctuation">,</span>
                 renderer <span class="token operator">=</span> gifski_renderer<span class="token punctuation">(</span><span class="token string">"outputs/animation.gif"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

a_gif</code>`}<!-- HTML_TAG_END --></pre>
${validate_component(Image, "Image").$$render($$result, {
      src: "../images/blog/tidy-tuesday-powerlifting/unnamed-chunk-9-1.gif",
      alt: "An animated dumbbell plot which represents male and female \u2018top lifts' over time. Each tick of the animation represents a new year."
    }, {}, {})}
<p>But in our case, we\u2019d like to include another GIF: a line chart of differences over time.</p>
<pre class="${"language-r"}"><!-- HTML_TAG_START -->${`<code class="language-r">animation2 <span class="token operator">&lt;-</span> max_lifts_final <span class="token percent-operator operator">%>%</span>
  ungroup <span class="token percent-operator operator">%>%</span>
  mutate<span class="token punctuation">(</span>lift <span class="token operator">=</span> case_when<span class="token punctuation">(</span>lift <span class="token operator">==</span> <span class="token string">"best3bench_kg"</span> <span class="token operator">~</span> <span class="token string">"Bench"</span><span class="token punctuation">,</span>
                          lift <span class="token operator">==</span> <span class="token string">"best3squat_kg"</span> <span class="token operator">~</span> <span class="token string">"Squat"</span><span class="token punctuation">,</span>
                          lift <span class="token operator">==</span> <span class="token string">"best3deadlift_kg"</span> <span class="token operator">~</span> <span class="token string">"Deadlift"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token percent-operator operator">%>%</span>
  ggplot<span class="token punctuation">(</span>aes<span class="token punctuation">(</span>year<span class="token punctuation">,</span> diff<span class="token punctuation">,</span> group <span class="token operator">=</span> lift<span class="token punctuation">,</span> color <span class="token operator">=</span> lift<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span>
  geom_line<span class="token punctuation">(</span>show.legend <span class="token operator">=</span> <span class="token boolean">FALSE</span><span class="token punctuation">)</span> <span class="token operator">+</span>
  geom_segment<span class="token punctuation">(</span>aes<span class="token punctuation">(</span>xend <span class="token operator">=</span> <span class="token number">2019.1</span><span class="token punctuation">,</span> yend <span class="token operator">=</span> diff<span class="token punctuation">)</span><span class="token punctuation">,</span> linetype <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> colour <span class="token operator">=</span> <span class="token string">'grey'</span><span class="token punctuation">,</span> show.legend <span class="token operator">=</span> <span class="token boolean">FALSE</span><span class="token punctuation">)</span> <span class="token operator">+</span>
  geom_point<span class="token punctuation">(</span>size <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> show.legend <span class="token operator">=</span> <span class="token boolean">FALSE</span><span class="token punctuation">)</span> <span class="token operator">+</span>
  geom_text<span class="token punctuation">(</span>aes<span class="token punctuation">(</span>x <span class="token operator">=</span> <span class="token number">2019.1</span><span class="token punctuation">,</span> label <span class="token operator">=</span> lift<span class="token punctuation">,</span> color <span class="token operator">=</span> <span class="token string">"#000000"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> hjust <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> show.legend <span class="token operator">=</span> <span class="token boolean">FALSE</span><span class="token punctuation">)</span> <span class="token operator">+</span>
  drop_axis<span class="token punctuation">(</span>axis <span class="token operator">=</span> <span class="token string">"y"</span><span class="token punctuation">)</span> <span class="token operator">+</span>
  transition_reveal<span class="token punctuation">(</span>year<span class="token punctuation">)</span> <span class="token operator">+</span>
  coord_cartesian<span class="token punctuation">(</span>clip <span class="token operator">=</span> <span class="token string">'off'</span><span class="token punctuation">)</span> <span class="token operator">+</span>
  theme<span class="token punctuation">(</span>plot.title <span class="token operator">=</span> element_text<span class="token punctuation">(</span>size <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span>
  labs<span class="token punctuation">(</span>title <span class="token operator">=</span> <span class="token string">'Difference over time'</span><span class="token punctuation">,</span>
       y <span class="token operator">=</span> <span class="token string">'Difference (kg)'</span><span class="token punctuation">,</span>
       x <span class="token operator">=</span> element_blank<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span>
  theme<span class="token punctuation">(</span>plot.margin <span class="token operator">=</span> margin<span class="token punctuation">(</span><span class="token number">5.5</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">5.5</span><span class="token punctuation">,</span> <span class="token number">5.5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

b_gif <span class="token operator">&lt;-</span> animate<span class="token punctuation">(</span>animation2<span class="token punctuation">,</span>
                 fps <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span>
                 duration <span class="token operator">=</span> <span class="token number">25</span><span class="token punctuation">,</span>
        width <span class="token operator">=</span> <span class="token number">800</span><span class="token punctuation">,</span> height <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">,</span>
        renderer <span class="token operator">=</span> gifski_renderer<span class="token punctuation">(</span><span class="token string">"outputs/animation2.gif"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

b_gif</code>`}<!-- HTML_TAG_END --></pre>
${validate_component(Image, "Image").$$render($$result, {
      src: "../images/blog/tidy-tuesday-powerlifting/unnamed-chunk-10-1.gif",
      alt: "An animated line chart that shows, year by year, the difference in male and female top lifts on the Y axis. Each tick of the chart shows a new year."
    }, {}, {})}
<p>Finally, we\u2019ll combine them using <code>magick</code> (thanks to <a href="${"https://github.com/thomasp85/gganimate/wiki/Animation-Composition"}" rel="${"nofollow"}">this
post</a>):</p>
<pre class="${"language-r"}"><!-- HTML_TAG_START -->${`<code class="language-r">library<span class="token punctuation">(</span>magick<span class="token punctuation">)</span>
a_mgif <span class="token operator">&lt;-</span> image_read<span class="token punctuation">(</span>a_gif<span class="token punctuation">)</span>
b_mgif <span class="token operator">&lt;-</span> image_read<span class="token punctuation">(</span>b_gif<span class="token punctuation">)</span>

new_gif <span class="token operator">&lt;-</span> image_append<span class="token punctuation">(</span>c<span class="token punctuation">(</span>a_mgif<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> b_mgif<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> stack <span class="token operator">=</span> <span class="token boolean">TRUE</span><span class="token punctuation">)</span>
<span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token keyword">in</span> <span class="token number">2</span><span class="token operator">:</span><span class="token number">250</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  combined <span class="token operator">&lt;-</span> image_append<span class="token punctuation">(</span>c<span class="token punctuation">(</span>a_mgif<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> b_mgif<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> stack <span class="token operator">=</span> <span class="token boolean">TRUE</span><span class="token punctuation">)</span>
  new_gif <span class="token operator">&lt;-</span> c<span class="token punctuation">(</span>new_gif<span class="token punctuation">,</span> combined<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span></code>`}<!-- HTML_TAG_END --></pre>
<p>What\u2019s happening here? Essentially, we\u2019re using the power of <code>magick</code> to:</p>
<ol><li>Read in all of the <em>individual images</em> (<code>image_read</code>) from each GIF (after all, a GIF is just a series of images!).</li>
<li>For the first frame, stack the two images on top of each other (<code>image_append</code>), so plot 1 is above plot 2.</li>
<li>For the rest of the frames (in my case, the next 249, because my GIF had 250 frames), replicate this and combine it with the first frame (this is the <code>for</code> loop).</li></ol>
<p>Here, we specify <code>stack = TRUE</code> so that one plot is <strong>above</strong> the other. If you\u2019d like to place them side-by-side, specify <code>stack = FALSE</code>.</p>
<p>In combination, the process results in our final output:</p>
${validate_component(Image, "Image").$$render($$result, {
      src: "../images/blog/tidy-tuesday-powerlifting/unnamed-chunk-11-1.gif",
      alt: "A combination of the two aforementioned plots. The top plot is the animated dumbbell plot, and the bottom is a line chart. In combination, they allow the user to see the magnitude of differences between men and women, as well as how these differences have evolved over time."
    }, {}, {})}
<p>In this view, we can see the magnitude of the differences both relatively and absolutely (top chart), <em>and</em> we can see how these differences change over time (bottom chart). The power of an animated, combined chart!</p>`
  })}`;
});
var tidyTuesdayPowerlifting = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  "default": Tidy_tuesday_powerlifting,
  metadata: metadata$g
});
var metadata$f = {
  "layout": "blog",
  "title": "Using Shiny to Replicate a Bloomberg Graphic",
  "description": "Leveraging the power of {shiny} for static graphics",
  "date": "2019-12-10",
  "image": "tidy-tuesday-replication/header.png",
  "archived": true
};
var Tidy_tuesday_replication = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign($$props, metadata$f), {}, {
    default: () => `<p>This weeks\u2019s installment of <a href="${"https://t.co/sElb4fcv3u?amp=1"}" rel="${"nofollow"}">Tidy
Tuesday</a> is all about replicating
professional plots in R. Inspired by Rafael Irizarry\u2019s post <a href="${"https://simplystatistics.org/2019/08/28/you-can-replicate-almost-any-plot-with-ggplot2/"}" rel="${"nofollow"}">\u201CYou can
replicate almost any plot with
R\u201D</a>,
the goal is to take otherwise professional publication-ready plots and
make them in R (usually ggplot2).</p>
<p>I was interested in this Tidy Tuesday because some of my <a href="${"https://connorrothschild.github.io/r/introducing-tpltheme/"}" rel="${"nofollow"}">past
work</a> has
been dedicated to creating publication-ready plots. Because <a href="${"https://connorrothschild.github.io/r/automation/"}" rel="${"nofollow"}">the first
visualization I ever
created</a> was inspired
by (a replication of?) <a href="${"https://www.bloomberg.com/graphics/2017-job-risk/"}" rel="${"nofollow"}">this
visualization</a> from
Bloomberg graphics, I decided to set out on a journey to make that plot
as close as possible to the real thing.</p>
${validate_component(Image, "Image").$$render($$result, {
      alt: "A scatterplot by Bloomberg Graphics, showing automation risk compared to median income.",
      src: "../images/blog/tidy-tuesday-replication/bloomberg.png"
    }, {}, {})}
<p>The real goal of this week\u2019s Tidy Tuesday is using <strong>the data that
Rafael posted</strong> to create other cool visualizations; I took a slightly
different approach to try to recreate another visualization entirely.
What follows is an interactive recreation of the visualization above,
using <a href="${"https://shiny.rstudio.com/"}" rel="${"nofollow"}">Shiny</a> and
<a href="${"https://plot.ly/r/"}" rel="${"nofollow"}">plotly</a>.</p>
<pre class="${"language-r"}"><!-- HTML_TAG_START -->${`<code class="language-r">library<span class="token punctuation">(</span>ggplot2<span class="token punctuation">)</span>
library<span class="token punctuation">(</span>ggthemes<span class="token punctuation">)</span>
library<span class="token punctuation">(</span>dplyr<span class="token punctuation">)</span>
library<span class="token punctuation">(</span>ggrepel<span class="token punctuation">)</span>
library<span class="token punctuation">(</span>tools<span class="token punctuation">)</span>
library<span class="token punctuation">(</span>readxl<span class="token punctuation">)</span>
library<span class="token punctuation">(</span>tidyverse<span class="token punctuation">)</span>
library<span class="token punctuation">(</span>knitr<span class="token punctuation">)</span>
library<span class="token punctuation">(</span>shiny<span class="token punctuation">)</span>
library<span class="token punctuation">(</span>plotly<span class="token punctuation">)</span>

theme_set<span class="token punctuation">(</span>theme_minimal<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code>`}<!-- HTML_TAG_END --></pre>
<h1 id="${"load-and-clean-data"}"><a href="${"#load-and-clean-data"}">Load and clean data</a></h1>
<p>First, we read in the data. This process was a bit complicated as I kind
of had to guess where Bloomberg pulled their data from.</p>
<p>I relied on three datasets:</p>
<ol><li>Educational attainment broke down by occupation, provided by BLS
<a href="${"https://www.bls.gov/emp/ep_education_training_system.htm"}" rel="${"nofollow"}">here</a></li>
<li>Salaries, median hourly/annual wages broke down by occupation,
provided by BLS
<a href="${"https://www.bls.gov/oes/current/oes_nat.htm#11-0000"}" rel="${"nofollow"}">here</a></li>
<li>Risk of automation broken down by occupation, provided by Carl
Benedikt Frey and Michael A. Osborne (but compiled
<a href="${"https://data.world/wnedds/occupations-by-state-and-likelihood-of-automation"}" rel="${"nofollow"}">here</a>)</li></ol>
<pre class="${"language-r"}"><!-- HTML_TAG_START -->${`<code class="language-r">education <span class="token operator">&lt;-</span> read_excel<span class="token punctuation">(</span><span class="token string">"data/education.xlsx"</span><span class="token punctuation">,</span> skip<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>
salary <span class="token operator">&lt;-</span> read_excel<span class="token punctuation">(</span><span class="token string">"data/national_M2017_dl.xlsx"</span><span class="token punctuation">)</span>
automation <span class="token operator">&lt;-</span> read_excel<span class="token punctuation">(</span><span class="token string">"data/raw_state_automation_data.xlsx"</span><span class="token punctuation">)</span></code>`}<!-- HTML_TAG_END --></pre>
<p>In <a href="${"https://connorrothschild.github.io/r/automation/"}" rel="${"nofollow"}">another post</a>, I
detail the data cleaning process. I\u2019ll spare you the details here.</p>
<h1 id="${"create-the-ui"}"><a href="${"#create-the-ui"}">Create the UI</a></h1>
<p>Now we create the UI, as is the case for any Shiny app. This is pretty
simple: first, we add the title panel and beautify it with some CSS.</p>
<pre class="${"language-r"}"><!-- HTML_TAG_START -->${`<code class="language-r">ui <span class="token operator">&lt;-</span> fluidPage<span class="token punctuation">(</span>

    titlePanel<span class="token punctuation">(</span>
      h1<span class="token punctuation">(</span><span class="token string">"A College Degree Lowers Job Automation Risk"</span><span class="token punctuation">,</span>
        style <span class="token operator">=</span> "font<span class="token operator">-</span>family<span class="token operator">:</span> <span class="token string">'Helvetica Neue'</span><span class="token punctuation">;</span>
        font<span class="token operator">-</span>size<span class="token operator">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span> font<span class="token operator">-</span>weight<span class="token operator">:</span> <span class="token number">400</span><span class="token punctuation">;</span> line<span class="token operator">-</span>height<span class="token operator">:</span> <span class="token number">1.1</span><span class="token punctuation">;</span>"<span class="token punctuation">)</span><span class="token punctuation">,</span>
      windowTitle <span class="token operator">=</span> <span class="token string">"Find Out If Your Job Will Be Automated"</span>
      <span class="token punctuation">)</span><span class="token punctuation">,</span></code>`}<!-- HTML_TAG_END --></pre>
<p>Next, we add the main panel, which includes a) the plot object, b) the
footnote, and c) some CSS.</p>
<pre class="${"language-r"}"><!-- HTML_TAG_START -->${`<code class="language-r">mainPanel<span class="token punctuation">(</span>
      fluidRow<span class="token punctuation">(</span>
        div<span class="token punctuation">(</span>
           plotlyOutput<span class="token punctuation">(</span><span class="token string">"plot"</span><span class="token punctuation">,</span> height <span class="token operator">=</span> <span class="token string">'600px'</span><span class="token punctuation">,</span> width <span class="token operator">=</span> <span class="token string">'850px'</span><span class="token punctuation">)</span>
           <span class="token punctuation">)</span><span class="token punctuation">,</span>align<span class="token operator">=</span><span class="token string">"left"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
           p<span class="token punctuation">(</span><span class="token string">"DATA: FREY &amp; OSBORNE, BUREAU OF LABOR STATISTICS"</span><span class="token punctuation">,</span>
           style <span class="token operator">=</span> "font<span class="token operator">-</span>family<span class="token operator">:</span> <span class="token string">'Helvetica Neue'</span><span class="token punctuation">;</span>
        font<span class="token operator">-</span>size<span class="token operator">:</span> <span class="token number">8</span>px<span class="token punctuation">;</span> font<span class="token operator">-</span>weight<span class="token operator">:</span> <span class="token number">500</span><span class="token punctuation">;</span> line<span class="token operator">-</span>height<span class="token operator">:</span> <span class="token number">1.1</span><span class="token punctuation">;</span>"<span class="token punctuation">)</span>
           <span class="token punctuation">)</span>

<span class="token punctuation">)</span></code>`}<!-- HTML_TAG_END --></pre>
<p>That\u2019s it!</p>
<h1 id="${"server"}"><a href="${"#server"}">Server</a></h1>
<p>Now we can define the <code>server()</code> function, where the real magic of this
visualization happens.</p>
<p>All of the following takes place in the
<code>server &lt;- function(input, output, session) {}</code> function.</p>
<h2 id="${"create-a-ggplot-object"}"><a href="${"#create-a-ggplot-object"}">Create a <code>ggplot</code> object</a></h2>
<p>We know we\u2019re going to need a ggplot object. In my case, we\u2019ll need a
plot object which relies on <em>probability, median income,</em> and <em>risk of
automation</em>.</p>
<pre class="${"language-r"}"><!-- HTML_TAG_START -->${`<code class="language-r">ggplot<span class="token punctuation">(</span>aes<span class="token punctuation">(</span>x<span class="token operator">=</span>probability<span class="token punctuation">,</span> y<span class="token operator">=</span>A_MEDIAN<span class="token punctuation">,</span> size<span class="token operator">=</span>TOT_EMP<span class="token punctuation">,</span> fill<span class="token operator">=</span>typicaled<span class="token punctuation">,</span> text <span class="token operator">=</span> text<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span>
    geom_point<span class="token punctuation">(</span>color <span class="token operator">=</span> <span class="token string">"black"</span><span class="token punctuation">,</span> alpha <span class="token operator">=</span> <span class="token number">.97</span><span class="token punctuation">,</span> stroke <span class="token operator">=</span> <span class="token number">.1</span><span class="token punctuation">)</span> <span class="token operator">+</span>
    scale_size<span class="token punctuation">(</span>range <span class="token operator">=</span> c<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span> guide <span class="token operator">=</span> <span class="token string">'legend'</span><span class="token punctuation">)</span></code>`}<!-- HTML_TAG_END --></pre>
<p>This creates the base of the object.</p>
<h3 id="${"add-a-tooltip"}"><a href="${"#add-a-tooltip"}">Add a tooltip</a></h3>
<p>We also know that, like the Bloomberg visualization we\u2019re replicating,
we\u2019re going to want a tooltip.</p>
<p>That\u2019s why we included <code>text</code> in the above code, which we define here:</p>
<pre class="${"language-r"}"><!-- HTML_TAG_START -->${`<code class="language-r">data <span class="token percent-operator operator">%>%</span>
    mutate<span class="token punctuation">(</span>text <span class="token operator">=</span> glue<span class="token operator">::</span>glue<span class="token punctuation">(</span><span class="token string">'&lt;span style="font-size:16px;font-weight:bold">&#123;data$occupation&#125;&lt;/span>'</span><span class="token punctuation">,</span>
                             <span class="token string">'&#92;n&lt;b>Number employed:&lt;/b> &#123;scales::comma(data$TOT_EMP)&#125;'</span><span class="token punctuation">,</span>
                             <span class="token string">'&#92;n&lt;b>Computerization prob:&lt;/b> &#123;data$probability&#125;%'</span><span class="token punctuation">,</span>
                             <span class="token string">'&#92;n&lt;b>Education:&lt;/b> &#123;data$typicaled&#125;'</span><span class="token punctuation">,</span>
                             sep <span class="token operator">=</span> <span class="token string">"&#92;n"</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code>`}<!-- HTML_TAG_END --></pre>
<p>This tooltip takes in some CSS, some HTML, and creates a pretty tooltip!
The <code>glue</code> function is lovely.</p>
<h3 id="${"axes-and-labels"}"><a href="${"#axes-and-labels"}">Axes and labels</a></h3>
<p>The Bloomberg visualization is unique in that it has no axis lines. We
can replicate that in <code>ggplot2</code> via the following code:</p>
<pre class="${"language-r"}"><!-- HTML_TAG_START -->${`<code class="language-r">theme<span class="token punctuation">(</span>axis.line.x <span class="token operator">=</span> ggplot2<span class="token operator">::</span>element_blank<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      axis.line.y <span class="token operator">=</span> ggplot2<span class="token operator">::</span>element_blank<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      axis.text <span class="token operator">=</span> element_text<span class="token punctuation">(</span>colour <span class="token operator">=</span> <span class="token string">"black"</span><span class="token punctuation">,</span> size <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code>`}<!-- HTML_TAG_END --></pre>
<p>But that\u2019s not all!</p>
<p>The Bloomberg visualization is also unique in that it doesn\u2019t have axis
titles. Moreover, the axis labels are a bit unique; the x axis increases
sequentially by 10 until 90 where it transitions into \u201890%\u2019 (the % is
not present in the earlier numbers).</p>
<p>We can mimic that kind of styling with this code:</p>
<pre class="${"language-r"}"><!-- HTML_TAG_START -->${`<code class="language-r">xlab<span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span> <span class="token operator">+</span>
ylab<span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span> <span class="token operator">+</span>
labs<span class="token punctuation">(</span>size<span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">,</span> alpha <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">,</span> fill <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">)</span> <span class="token operator">+</span>
scale_y_continuous<span class="token punctuation">(</span>limits <span class="token operator">=</span> c<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1000</span><span class="token punctuation">,</span><span class="token number">240000</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                   breaks <span class="token operator">=</span> c<span class="token punctuation">(</span><span class="token number">20000</span><span class="token punctuation">,</span> <span class="token number">40000</span><span class="token punctuation">,</span> <span class="token number">60000</span><span class="token punctuation">,</span> <span class="token number">80000</span><span class="token punctuation">,</span> <span class="token number">100000</span><span class="token punctuation">,</span> <span class="token number">120000</span><span class="token punctuation">,</span> <span class="token number">140000</span><span class="token punctuation">,</span> <span class="token number">160000</span><span class="token punctuation">,</span> <span class="token number">180000</span><span class="token punctuation">,</span> <span class="token number">200000</span><span class="token punctuation">,</span> <span class="token number">220000</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                   labels <span class="token operator">=</span> c<span class="token punctuation">(</span><span class="token string">"20K"</span><span class="token punctuation">,</span> <span class="token string">"40K"</span><span class="token punctuation">,</span> <span class="token string">"60K"</span><span class="token punctuation">,</span> <span class="token string">"80K"</span><span class="token punctuation">,</span> <span class="token string">"100K"</span><span class="token punctuation">,</span> <span class="token string">"120K"</span><span class="token punctuation">,</span> <span class="token string">"140K"</span><span class="token punctuation">,</span> <span class="token string">"160K"</span><span class="token punctuation">,</span> <span class="token string">"180K"</span><span class="token punctuation">,</span> <span class="token string">"200K"</span><span class="token punctuation">,</span> <span class="token string">"220K"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span>
scale_x_continuous<span class="token punctuation">(</span>limits <span class="token operator">=</span> c<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                   breaks <span class="token operator">=</span> c<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token number">70</span><span class="token punctuation">,</span><span class="token number">80</span><span class="token punctuation">,</span><span class="token number">90</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                   labels <span class="token operator">=</span> c<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token number">70</span><span class="token punctuation">,</span><span class="token number">80</span><span class="token punctuation">,</span><span class="token string">"90%"</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code>`}<!-- HTML_TAG_END --></pre>
<p>We create a bit of a buffer on the <code>limits</code> argument so that we can add
annotations. We\u2019ll get to that later!</p>
<h3 id="${"colors"}"><a href="${"#colors"}">Colors</a></h3>
<p>To get as close as possible to Bloomberg\u2019s plot, I\u2019d also like to mimic
their color scheme. I pulled the colors from their dotplot with this
awesome <a href="${"https://chrome.google.com/webstore/detail/color-picker/ohcpnigalekghcmgcdcenkpelffpdolg"}" rel="${"nofollow"}">Chrome
plugin</a>;
then, I added them to R with the following:</p>
<pre class="${"language-r"}"><!-- HTML_TAG_START -->${`<code class="language-r">colors <span class="token operator">&lt;-</span> c<span class="token punctuation">(</span><span class="token string">'No formal educational credential'</span> <span class="token operator">=</span> <span class="token string">'#FA1A48'</span><span class="token punctuation">,</span>
            <span class="token string">'High school diploma or equivalent'</span> <span class="token operator">=</span> <span class="token string">'#F79734'</span><span class="token punctuation">,</span>
            <span class="token string">'Postsecondary nondegree award'</span> <span class="token operator">=</span> <span class="token string">'#FDFF1C'</span><span class="token punctuation">,</span> 
            <span class="token string">"Associate's degree"</span> <span class="token operator">=</span> <span class="token string">'#1DDF50'</span><span class="token punctuation">,</span>
            <span class="token string">"Bachelor's degree"</span> <span class="token operator">=</span> <span class="token string">'#34D19D'</span><span class="token punctuation">,</span> 
            <span class="token string">"Master's degree"</span> <span class="token operator">=</span> <span class="token string">'#1BC0E9'</span><span class="token punctuation">,</span>
            <span class="token string">"Doctoral or professional degree"</span> <span class="token operator">=</span> <span class="token string">'#1B91FF'</span><span class="token punctuation">)</span></code>`}<!-- HTML_TAG_END --></pre>
<p>In the plot object, we reference this with the following:</p>
<pre class="${"language-r"}"><!-- HTML_TAG_START -->${`<code class="language-r">scale_fill_manual<span class="token punctuation">(</span>values <span class="token operator">=</span> colors<span class="token punctuation">,</span> labels <span class="token operator">=</span> 
  c<span class="token punctuation">(</span><span class="token string">'No formal educational credential'</span><span class="token punctuation">,</span> 
    <span class="token string">'High school diploma or equivalent'</span><span class="token punctuation">,</span> 
    <span class="token string">"Some college, no degree"</span><span class="token punctuation">,</span>
    <span class="token string">"Associate's degree"</span><span class="token punctuation">,</span> 
    <span class="token string">"Postsecondary nondegree award"</span><span class="token punctuation">,</span>
    <span class="token string">"Bachelor's degree"</span><span class="token punctuation">,</span>
    <span class="token string">"Master's degree"</span><span class="token punctuation">,</span>
    <span class="token string">"Doctoral or professional degree"</span><span class="token punctuation">)</span>
    <span class="token punctuation">)</span></code>`}<!-- HTML_TAG_END --></pre>
<p>This essentially creates a fill scale (manually) with specified hex
codes for colors. I also tried to manipulate the order of the legend but
that didn\u2019t translate to plotly (a documented problem, I believe).</p>
<h3 id="${"final-touches-for-the-ggplot"}"><a href="${"#final-touches-for-the-ggplot"}">Final touches for the <code>ggplot</code></a></h3>
<p>Finally, we do something really hacky: add a regression line with
<code>geom_segment</code>. (I\u2019m so sorry)</p>
<pre class="${"language-r"}"><!-- HTML_TAG_START -->${`<code class="language-r">geom_segment<span class="token punctuation">(</span>aes<span class="token punctuation">(</span>x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token number">54000</span><span class="token punctuation">,</span> xend <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">,</span> yend <span class="token operator">=</span> <span class="token number">58000</span><span class="token punctuation">)</span><span class="token punctuation">,</span> size <span class="token operator">=</span> <span class="token number">.1</span><span class="token punctuation">)</span></code>`}<!-- HTML_TAG_END --></pre>
<p>We now have the ggplot object created; let\u2019s convert it to a plotly
object.</p>
<h2 id="${"create-a-plotly-object"}"><a href="${"#create-a-plotly-object"}">Create a <code>plotly</code> object</a></h2>
<p>This process relies on the <code>ggplotly</code> function, which reads in a
previously defined <code>ggplot</code> object and converts into an interactive
plotly one.</p>
<pre class="${"language-r"}"><!-- HTML_TAG_START -->${`<code class="language-r">introPlot <span class="token operator">&lt;-</span> ggplotly<span class="token punctuation">(</span>introggPlot<span class="token punctuation">,</span> tooltip <span class="token operator">=</span> <span class="token string">'text'</span><span class="token punctuation">,</span> sort <span class="token operator">=</span> <span class="token boolean">FALSE</span><span class="token punctuation">)</span></code>`}<!-- HTML_TAG_END --></pre>
<p>After creating the base plotly object, we move to some more complicated
steps:</p>
<h3 id="${"legend-orientation"}"><a href="${"#legend-orientation"}">Legend orientation</a></h3>
<p>We\u2019d like the legend to orient horizontally, right above the plot. We do
that with the following (inside the <code>layout</code> function):</p>
<pre class="${"language-r"}"><!-- HTML_TAG_START -->${`<code class="language-r">introPlot <span class="token operator">&lt;-</span> ggplotly<span class="token punctuation">(</span>introggPlot<span class="token punctuation">,</span> tooltip <span class="token operator">=</span> <span class="token string">'text'</span><span class="token punctuation">,</span> sort <span class="token operator">=</span> <span class="token boolean">FALSE</span><span class="token punctuation">)</span> <span class="token percent-operator operator">%>%</span>
layout<span class="token punctuation">(</span>
  legend <span class="token operator">=</span> list<span class="token punctuation">(</span>orientation <span class="token operator">=</span> <span class="token string">"h"</span><span class="token punctuation">,</span>
              xanchor <span class="token operator">=</span> <span class="token string">"left"</span><span class="token punctuation">,</span>
              x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">,</span>
              traceorder <span class="token operator">=</span> <span class="token string">"normal"</span><span class="token punctuation">,</span>
              itemsizing <span class="token operator">=</span> <span class="token string">"constant"</span><span class="token punctuation">,</span>
              tracegroupgap <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
              font <span class="token operator">=</span> list<span class="token punctuation">(</span>size <span class="token operator">=</span> <span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
              <span class="token comment"># ...</span></code>`}<!-- HTML_TAG_END --></pre>
<p>This does a few things. First, it orients the legend horizontally.
Second, it anchors the legend to the left. Third, it defines the
location (using x-y pairs) of the legend. <code>traceorder</code> is meant to
maintain the previous order from <code>ggplot</code>, but that didn\u2019t work in my
version. <code>itemsizing</code> is meant to keep the legend items with a constant
size, as opposed to dynamic relative to the plot objects themselves.
This also didn\u2019t work. The last two arguments define the spacing between
points and the font size of the legend text!</p>
<h3 id="${"axes-revisited"}"><a href="${"#axes-revisited"}">Axes Revisited</a></h3>
<p>We also see the Bloomberg viz has a right-aligned Y-axis. We can add
that to plotly via the following code:</p>
<pre class="${"language-r"}"><!-- HTML_TAG_START -->${`<code class="language-r"> <span class="token comment"># ... Layout continued</span>
yaxis <span class="token operator">=</span> list<span class="token punctuation">(</span>
          tickfont <span class="token operator">=</span> element_blank<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
          overlaying <span class="token operator">=</span> <span class="token string">"y"</span><span class="token punctuation">,</span>
          side <span class="token operator">=</span> <span class="token string">"right"</span><span class="token punctuation">,</span>
          title <span class="token operator">=</span> <span class="token string">""</span>
        <span class="token punctuation">)</span></code>`}<!-- HTML_TAG_END --></pre>
<h3 id="${"some-aesthetic-changes"}"><a href="${"#some-aesthetic-changes"}">Some aesthetic changes</a></h3>
<p>Finally, we add three commands to the <code>layout</code> function.</p>
<pre class="${"language-r"}"><!-- HTML_TAG_START -->${`<code class="language-r"> <span class="token comment"># ... Layout continued</span>
  font <span class="token operator">=</span> list<span class="token punctuation">(</span>family <span class="token operator">=</span> <span class="token string">'Helvetica Neue'</span><span class="token punctuation">,</span> color <span class="token operator">=</span> <span class="token string">"black"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  margin <span class="token operator">=</span> list<span class="token punctuation">(</span>r<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> l<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>t<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>b<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>pad <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  hoverlabel <span class="token operator">=</span> list<span class="token punctuation">(</span>bgcolor <span class="token operator">=</span> <span class="token string">'white'</span><span class="token punctuation">,</span> color <span class="token operator">=</span> <span class="token string">'black'</span><span class="token punctuation">)</span></code>`}<!-- HTML_TAG_END --></pre>
<p>This a) changes the font of the plot, b) adds a small margin, and c)
stylizes the tooltip on hover.</p>
<h3 id="${"annotations"}"><a href="${"#annotations"}">Annotations</a></h3>
<p>The last step is to mimic Bloomberg\u2019s annotations. This is a little
tough, specifically because it requires pretty specific x- and y-values.</p>
<p>First, we\u2019ll add their guiding annotations (that replace axis labels)
that you can find in each corner:</p>
<pre class="${"language-r"}"><!-- HTML_TAG_START -->${`<code class="language-r"><span class="token percent-operator operator">%>%</span> <span class="token comment"># After layout() closes</span>
add_annotations<span class="token punctuation">(</span>
      x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token number">7500</span><span class="token punctuation">,</span>
      xref <span class="token operator">=</span> <span class="token string">"x"</span><span class="token punctuation">,</span>
      yref <span class="token operator">=</span> <span class="token string">"y"</span><span class="token punctuation">,</span>
      text <span class="token operator">=</span> <span class="token string">"&lt;b>Low paid,&#92;nleast vulnerable&lt;/b>"</span><span class="token punctuation">,</span>
      xanchor <span class="token operator">=</span> <span class="token string">'center'</span><span class="token punctuation">,</span>
      align <span class="token operator">=</span> <span class="token string">'left'</span><span class="token punctuation">,</span>
      font <span class="token operator">=</span> list<span class="token punctuation">(</span>size <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      showarrow <span class="token operator">=</span> F
    <span class="token punctuation">)</span> <span class="token percent-operator operator">%>%</span>
    add_annotations<span class="token punctuation">(</span>
      x <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token number">7500</span><span class="token punctuation">,</span>
      xref <span class="token operator">=</span> <span class="token string">"x"</span><span class="token punctuation">,</span>
      yref <span class="token operator">=</span> <span class="token string">"y"</span><span class="token punctuation">,</span>
      text <span class="token operator">=</span> <span class="token string">"&lt;b>Low paid,&#92;nmost vulnerable&lt;/b>"</span><span class="token punctuation">,</span>
      xanchor <span class="token operator">=</span> <span class="token string">'center'</span><span class="token punctuation">,</span>
      align <span class="token operator">=</span> <span class="token string">'right'</span><span class="token punctuation">,</span>
      font <span class="token operator">=</span> list<span class="token punctuation">(</span>size <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      showarrow <span class="token operator">=</span> F
    <span class="token punctuation">)</span> <span class="token percent-operator operator">%>%</span>
    add_annotations<span class="token punctuation">(</span>
      x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token number">230000</span><span class="token punctuation">,</span>
      xref <span class="token operator">=</span> <span class="token string">"x"</span><span class="token punctuation">,</span>
      yref <span class="token operator">=</span> <span class="token string">"y"</span><span class="token punctuation">,</span>
      text <span class="token operator">=</span> <span class="token string">"&lt;b>Best paid,&#92;nleast vulnerable&lt;/b>"</span><span class="token punctuation">,</span>
      xanchor <span class="token operator">=</span> <span class="token string">'center'</span><span class="token punctuation">,</span>
      align <span class="token operator">=</span> <span class="token string">'left'</span><span class="token punctuation">,</span>
      font <span class="token operator">=</span> list<span class="token punctuation">(</span>size <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      showarrow <span class="token operator">=</span> F
    <span class="token punctuation">)</span> <span class="token percent-operator operator">%>%</span>
    add_annotations<span class="token punctuation">(</span>
      x <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token number">230000</span><span class="token punctuation">,</span>
      xref <span class="token operator">=</span> <span class="token string">"x"</span><span class="token punctuation">,</span>
      yref <span class="token operator">=</span> <span class="token string">"y"</span><span class="token punctuation">,</span>
      text <span class="token operator">=</span> <span class="token string">"&lt;b>Best paid,&#92;nmost vulnerable&lt;/b>"</span><span class="token punctuation">,</span>
      xanchor <span class="token operator">=</span> <span class="token string">'center'</span><span class="token punctuation">,</span>
      align <span class="token operator">=</span> <span class="token string">'right'</span><span class="token punctuation">,</span>
      font <span class="token operator">=</span> list<span class="token punctuation">(</span>size <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      showarrow <span class="token operator">=</span> F
    <span class="token punctuation">)</span></code>`}<!-- HTML_TAG_END --></pre>
<p>Next, we add annotations for \u2018most and least likely to be automated\u2019, as
well as the y axis label.</p>
<pre class="${"language-r"}"><!-- HTML_TAG_START -->${`<code class="language-r">add_annotations<span class="token punctuation">(</span>
      x <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">5000</span><span class="token punctuation">,</span>
      xref <span class="token operator">=</span> <span class="token string">"x"</span><span class="token punctuation">,</span>
      yref <span class="token operator">=</span> <span class="token string">"y"</span><span class="token punctuation">,</span>
      text <span class="token operator">=</span> glue<span class="token operator">::</span>glue<span class="token punctuation">(</span>sprintf<span class="token punctuation">(</span><span class="token string">'\u2190'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"Least likely to be automated"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      xanchor <span class="token operator">=</span> <span class="token string">'left'</span><span class="token punctuation">,</span>
      align <span class="token operator">=</span> <span class="token string">'left'</span><span class="token punctuation">,</span>
      font <span class="token operator">=</span> list<span class="token punctuation">(</span>size <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      showarrow <span class="token operator">=</span> F
    <span class="token punctuation">)</span> <span class="token percent-operator operator">%>%</span>
    add_annotations<span class="token punctuation">(</span>
      x <span class="token operator">=</span> <span class="token number">105</span><span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">5000</span><span class="token punctuation">,</span>
      xref <span class="token operator">=</span> <span class="token string">"x"</span><span class="token punctuation">,</span>
      yref <span class="token operator">=</span> <span class="token string">"y"</span><span class="token punctuation">,</span>
      text <span class="token operator">=</span> glue<span class="token operator">::</span>glue<span class="token punctuation">(</span><span class="token string">"Most likely to be automated"</span><span class="token punctuation">,</span> sprintf<span class="token punctuation">(</span><span class="token string">'\u2192'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      xanchor <span class="token operator">=</span> <span class="token string">'right'</span><span class="token punctuation">,</span>
      align <span class="token operator">=</span> <span class="token string">'right'</span><span class="token punctuation">,</span>
      font <span class="token operator">=</span> list<span class="token punctuation">(</span>size <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      showarrow <span class="token operator">=</span> F
    <span class="token punctuation">)</span> <span class="token percent-operator operator">%>%</span>
    add_annotations<span class="token punctuation">(</span>
      x <span class="token operator">=</span> <span class="token number">99</span><span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token number">243000</span><span class="token punctuation">,</span>
      xref <span class="token operator">=</span> <span class="token string">"x"</span><span class="token punctuation">,</span>
      yref <span class="token operator">=</span> <span class="token string">"y"</span><span class="token punctuation">,</span>
      text <span class="token operator">=</span> <span class="token string">"Average annual wage"</span><span class="token punctuation">,</span>
      xanchor <span class="token operator">=</span> <span class="token string">'center'</span><span class="token punctuation">,</span>
      align <span class="token operator">=</span> <span class="token string">'right'</span><span class="token punctuation">,</span>
      font <span class="token operator">=</span> list<span class="token punctuation">(</span>size <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      showarrow <span class="token operator">=</span> F
    <span class="token punctuation">)</span></code>`}<!-- HTML_TAG_END --></pre>
<p>And finally, add a couple of plot annotations which label specific
points. (We are not labelling a hundred occupations like Bloomberg did.)</p>
<pre class="${"language-r"}"><!-- HTML_TAG_START -->${`<code class="language-r">add_annotations<span class="token punctuation">(</span>
      x <span class="token operator">=</span> subset<span class="token punctuation">(</span>data<span class="token operator">$</span>probability<span class="token punctuation">,</span> data<span class="token operator">$</span>occupation <span class="token operator">==</span> <span class="token string">"Chief Executives"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      y <span class="token operator">=</span> subset<span class="token punctuation">(</span>data<span class="token operator">$</span>A_MEDIAN<span class="token punctuation">,</span> data<span class="token operator">$</span>occupation <span class="token operator">==</span> <span class="token string">"Chief Executives"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      text <span class="token operator">=</span> <span class="token string">"Chief Executives"</span><span class="token punctuation">,</span>
      xref <span class="token operator">=</span> <span class="token string">"x"</span><span class="token punctuation">,</span>
      yref <span class="token operator">=</span> <span class="token string">"y"</span><span class="token punctuation">,</span>
      xanchor <span class="token operator">=</span> <span class="token string">'center'</span><span class="token punctuation">,</span>
      align <span class="token operator">=</span> <span class="token string">'right'</span><span class="token punctuation">,</span>
      font <span class="token operator">=</span> list<span class="token punctuation">(</span>size <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      showarrow <span class="token operator">=</span> <span class="token boolean">TRUE</span><span class="token punctuation">,</span>
      arrowhead <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
      ax <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">,</span>
      ay <span class="token operator">=</span> <span class="token number">25</span>
    <span class="token punctuation">)</span> <span class="token percent-operator operator">%>%</span>
    add_annotations<span class="token punctuation">(</span>
      x <span class="token operator">=</span> subset<span class="token punctuation">(</span>data<span class="token operator">$</span>probability<span class="token punctuation">,</span> data<span class="token operator">$</span>occupation <span class="token operator">==</span> <span class="token string">"Cashiers"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      y <span class="token operator">=</span> subset<span class="token punctuation">(</span>data<span class="token operator">$</span>A_MEDIAN<span class="token punctuation">,</span> data<span class="token operator">$</span>occupation <span class="token operator">==</span> <span class="token string">"Cashiers"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      text <span class="token operator">=</span> <span class="token string">"Cashiers"</span><span class="token punctuation">,</span>
      xref <span class="token operator">=</span> <span class="token string">"x"</span><span class="token punctuation">,</span>
      yref <span class="token operator">=</span> <span class="token string">"y"</span><span class="token punctuation">,</span>
      xanchor <span class="token operator">=</span> <span class="token string">'center'</span><span class="token punctuation">,</span>
      align <span class="token operator">=</span> <span class="token string">'right'</span><span class="token punctuation">,</span>
      font <span class="token operator">=</span> list<span class="token punctuation">(</span>size <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      showarrow <span class="token operator">=</span> <span class="token boolean">TRUE</span><span class="token punctuation">,</span>
      arrowhead <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
      ax <span class="token operator">=</span> <span class="token number">40</span><span class="token punctuation">,</span>
      ay <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">50</span>
    <span class="token punctuation">)</span></code>`}<!-- HTML_TAG_END --></pre>
<p>Finalize the plotly object with</p>
<pre class="${"language-r"}"><!-- HTML_TAG_START -->${`<code class="language-r">config<span class="token punctuation">(</span>displaylogo <span class="token operator">=</span> F<span class="token punctuation">,</span> showSendToCloud <span class="token operator">=</span> F<span class="token punctuation">,</span> displayModeBar <span class="token operator">=</span> F<span class="token punctuation">)</span></code>`}<!-- HTML_TAG_END --></pre>
<p>We\u2019re done! Run the application with the following code:</p>
<pre class="${"language-r"}"><!-- HTML_TAG_START -->${`<code class="language-r">shinyApp<span class="token punctuation">(</span>ui <span class="token operator">=</span> ui<span class="token punctuation">,</span> server <span class="token operator">=</span> server<span class="token punctuation">)</span></code>`}<!-- HTML_TAG_END --></pre>
<p>And we\u2019re done! Find my interactive visualization
<a href="${"https://connorrothschild.shinyapps.io/2019-12-10/"}" rel="${"nofollow"}">here</a>. Find the
code, uninterrupted and (hopefully) reproducible,
<em><a href="${"https://github.com/connorrothschild/tidytuesday/blob/master/2019-12-10/app.R"}" rel="${"nofollow"}">here</a></em>.</p>
<p>Here\u2019s the Bloomberg visualization:</p>
${validate_component(Image, "Image").$$render($$result, {
      alt: "A scatterplot by Bloomberg Graphics, showing automation risk compared to median income.",
      src: "../images/blog/tidy-tuesday-replication/bloomberg.png"
    }, {}, {})}
<p>And here\u2019s mine:</p>
${validate_component(Image, "Image").$$render($$result, {
      alt: "A scatterplot recreation, showing automation risk compared to median income.",
      src: "../images/blog/tidy-tuesday-replication/replication.png"
    }, {}, {})}
`
  })}`;
});
var tidyTuesdayReplication = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  "default": Tidy_tuesday_replication,
  metadata: metadata$f
});
var metadata$e = {
  "layout": "blog",
  "title": "How to Scrollytell in R",
  "description": "Because its easier than doing it in D3",
  "image": "automation-scrollytell/header.png",
  "date": "2019-10-02"
};
var Automation_scrollytell = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign($$props, metadata$e), {}, {
    default: () => `<p>I\u2019ve always been interested in data visualization, and my most recent
sub-passion has been <em>scrollytelling</em>. I\u2019ve seen numerous examples of
amazing scrolling articles, from sites such as <a href="${"https://pudding.cool/"}" rel="${"nofollow"}">The
Pudding</a>, the <a href="${"https://www.nytimes.com/"}" rel="${"nofollow"}">New York
Times</a>, and
<a href="${"https://fivethirtyeight.com/"}" rel="${"nofollow"}">FiveThirtyEight</a>.</p>
<p>Although most of these sites rely on the same high-powered visualization
tools (such as <a href="${"https://d3js.org/"}" rel="${"nofollow"}">D3.js</a>) to create their stories, the
learning curve for those are a bit too steep for a full-time college
student to pursue (although <a href="${"https://github.com/connorrothschild/D3.js"}" rel="${"nofollow"}">I am
trying</a>!).</p>
<p>Thankfully, I came across some examples of scrollytelling in my language
of choice, R.</p>
<p>What follows is a scrollytelling recreation of the <a href="${"https://connorrothschild.github.io/r/automation/"}" rel="${"nofollow"}">very first
visualization I ever
made</a>.</p>
<pre class="${"language-r"}"><!-- HTML_TAG_START -->${`<code class="language-r">library<span class="token punctuation">(</span>shiny<span class="token punctuation">)</span>
library<span class="token punctuation">(</span>scrollytell<span class="token punctuation">)</span>
library<span class="token punctuation">(</span>shinyjs<span class="token punctuation">)</span>
library<span class="token punctuation">(</span>ggvis<span class="token punctuation">)</span>
library<span class="token punctuation">(</span>plotly<span class="token punctuation">)</span>

theme_set<span class="token punctuation">(</span>theme_minimal<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code>`}<!-- HTML_TAG_END --></pre>
<h2 id="${"construct-an-updating-plot-object"}"><a href="${"#construct-an-updating-plot-object"}">Construct an updating plot object</a></h2>
<p>Once the data (<a href="${"https://github.com/connorrothschild/shiny-scrollytell/tree/master/data"}" rel="${"nofollow"}">which can be found
here</a>)
is already <a href="${"https://connorrothschild.github.io/r/automation/#load-datasets"}" rel="${"nofollow"}">loaded and
cleaned</a>,
we construct a plot object that will update as the user scrolls. (<a href="${"https://github.com/scottyd22/dream_team"}" rel="${"nofollow"}">Other
R users</a> make multiple plots;
either way is fine.)</p>
<pre class="${"language-r"}"><!-- HTML_TAG_START -->${`<code class="language-r">plot <span class="token operator">&lt;-</span> data <span class="token percent-operator operator">%>%</span>
  filter<span class="token punctuation">(</span><span class="token keyword">if</span> <span class="token punctuation">(</span>add <span class="token operator">!=</span> <span class="token number">8</span><span class="token punctuation">)</span> add <span class="token operator">>=</span> reveal <span class="token keyword">else</span> reveal <span class="token percent-operator operator">%in%</span> c<span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token percent-operator operator">%>%</span>
  ggplot<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span>
  geom_point<span class="token punctuation">(</span>mapping<span class="token operator">=</span>aes<span class="token punctuation">(</span>x<span class="token operator">=</span>A_MEDIAN<span class="token punctuation">,</span> y<span class="token operator">=</span>probability<span class="token punctuation">,</span> size<span class="token operator">=</span>TOT_EMP<span class="token punctuation">,</span>
                         alpha<span class="token operator">=</span>ifelse<span class="token punctuation">(</span>add <span class="token operator">==</span> reveal<span class="token punctuation">,</span> <span class="token number">1</span><span class="token operator">/</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token operator">/</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span> col<span class="token operator">=</span>typicaled<span class="token punctuation">,</span>
                         text <span class="token operator">=</span> glue<span class="token operator">::</span>glue<span class="token punctuation">(</span>'<span class="token operator">&lt;</span>b<span class="token operator">></span>Occupation<span class="token operator">&lt;</span><span class="token operator">/</span>b<span class="token operator">></span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>occupation<span class="token punctuation">&#125;</span>
                                            <span class="token operator">&lt;</span>b<span class="token operator">></span>Probability of Automation<span class="token operator">&lt;</span><span class="token operator">/</span>b<span class="token operator">></span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>probability<span class="token punctuation">&#125;</span>%
                                            <span class="token operator">&lt;</span>b<span class="token operator">></span>Median Income<span class="token operator">&lt;</span><span class="token operator">/</span>b<span class="token operator">></span><span class="token operator">:</span> <span class="token operator">$</span><span class="token punctuation">&#123;</span>A_MEDIAN<span class="token punctuation">&#125;</span>
                                            <span class="token operator">&lt;</span>b<span class="token operator">></span>Number of Workers<span class="token operator">&lt;</span><span class="token operator">/</span>b<span class="token operator">></span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>TOT_EMP<span class="token punctuation">&#125;</span>'<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span>
  scale_size<span class="token punctuation">(</span>range <span class="token operator">=</span> c<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span>
  xlab<span class="token punctuation">(</span><span class="token string">"&#92;nMedian Income"</span><span class="token punctuation">)</span> <span class="token operator">+</span>
  ylab<span class="token punctuation">(</span><span class="token string">"Probability of Automation"</span><span class="token punctuation">)</span> <span class="token operator">+</span>
  labs<span class="token punctuation">(</span>size<span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">,</span> col<span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">,</span> alpha <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">)</span> <span class="token operator">+</span>
  scale_color_manual<span class="token punctuation">(</span>values <span class="token operator">=</span> cols<span class="token punctuation">,</span> breaks <span class="token operator">=</span> legend_ord<span class="token punctuation">)</span> <span class="token operator">+</span>
  scale_x_continuous<span class="token punctuation">(</span>labels<span class="token operator">=</span>scales<span class="token operator">::</span>dollar_format<span class="token punctuation">(</span>prefix<span class="token operator">=</span><span class="token string">"$"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> limits <span class="token operator">=</span> c<span class="token punctuation">(</span><span class="token number">25000</span><span class="token punctuation">,</span><span class="token number">200000</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span>
  scale_y_continuous<span class="token punctuation">(</span>labels<span class="token operator">=</span>scales<span class="token operator">::</span>number_format<span class="token punctuation">(</span>suffix<span class="token operator">=</span><span class="token string">"%"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> limits <span class="token operator">=</span> c<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span>
  <span class="token comment"># cr::drop_axis(axis = "y") +</span>
  theme<span class="token punctuation">(</span>axis.line.x <span class="token operator">=</span> ggplot2<span class="token operator">::</span>element_line<span class="token punctuation">(</span>colour <span class="token operator">=</span> <span class="token keyword">NULL</span><span class="token punctuation">,</span>
                                            size <span class="token operator">=</span> <span class="token keyword">NULL</span><span class="token punctuation">,</span> linetype <span class="token operator">=</span> <span class="token keyword">NULL</span><span class="token punctuation">,</span> lineend <span class="token operator">=</span> <span class="token keyword">NULL</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        axis.line.y <span class="token operator">=</span> ggplot2<span class="token operator">::</span>element_blank<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        panel.grid.major.x <span class="token operator">=</span> element_blank<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code>`}<!-- HTML_TAG_END --></pre>
<p>But wait, what\u2019s that second line of code?</p>
<pre class="${"language-r"}"><!-- HTML_TAG_START -->${`<code class="language-r">filter<span class="token punctuation">(</span><span class="token keyword">if</span> <span class="token punctuation">(</span>add <span class="token operator">!=</span> <span class="token number">8</span><span class="token punctuation">)</span> add <span class="token operator">>=</span> reveal <span class="token keyword">else</span> reveal <span class="token percent-operator operator">%in%</span> c<span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code>`}<!-- HTML_TAG_END --></pre>
<p>This may make <em>0 sense</em> right now, but here\u2019s why we have it.</p>
<p>The important part (and somewhat difficult thing to understand) about
this step is that your plot object has some <strong>data which corresponds to
an updating variable</strong>. For me, I added a variable called <code>reveal</code> for
each step of the visualization. For me, this meant having <code>reveal</code>
correspond to a typical level of education for a given job.</p>
<pre class="${"language-r"}"><!-- HTML_TAG_START -->${`<code class="language-r">data <span class="token operator">&lt;-</span> data <span class="token percent-operator operator">%>%</span>
  mutate<span class="token punctuation">(</span>reveal <span class="token operator">=</span> case_when<span class="token punctuation">(</span>
    typicaled <span class="token operator">==</span> <span class="token string">"No formal educational credential"</span> <span class="token operator">~</span> <span class="token number">1</span><span class="token punctuation">,</span>
    typicaled <span class="token operator">==</span> <span class="token string">"High school diploma or equivalent"</span> <span class="token operator">~</span> <span class="token number">2</span><span class="token punctuation">,</span>
    typicaled <span class="token operator">==</span> <span class="token string">"Postsecondary nondegree award"</span> <span class="token operator">~</span> <span class="token number">3</span><span class="token punctuation">,</span>
    typicaled <span class="token operator">==</span> <span class="token string">"Some college, no degree"</span> <span class="token operator">~</span> <span class="token number">0</span><span class="token punctuation">,</span>
    typicaled <span class="token operator">==</span> <span class="token string">"Associate's degree"</span> <span class="token operator">~</span> <span class="token number">4</span><span class="token punctuation">,</span>
    typicaled <span class="token operator">==</span> <span class="token string">"Bachelor's degree"</span> <span class="token operator">~</span> <span class="token number">5</span><span class="token punctuation">,</span>
    typicaled <span class="token operator">==</span> <span class="token string">"Master's degree"</span> <span class="token operator">~</span> <span class="token number">6</span><span class="token punctuation">,</span>
    typicaled <span class="token operator">==</span> <span class="token string">"Doctoral or professional degree"</span> <span class="token operator">~</span> <span class="token number">7</span><span class="token punctuation">,</span>
  <span class="token punctuation">)</span><span class="token punctuation">)</span></code>`}<!-- HTML_TAG_END --></pre>
<p>What this means is that every time the post observes an event (a
scroll), it will update according to the number in the <code>reveal</code> column.</p>
<p>So, when my plot object has a line of code which says:</p>
<pre class="${"language-r"}"><!-- HTML_TAG_START -->${`<code class="language-r">filter<span class="token punctuation">(</span><span class="token keyword">if</span> <span class="token punctuation">(</span>add <span class="token operator">!=</span> <span class="token number">8</span><span class="token punctuation">)</span> add <span class="token operator">>=</span> reveal <span class="token keyword">else</span> reveal <span class="token percent-operator operator">%in%</span> c<span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code>`}<!-- HTML_TAG_END --></pre>
<p>That can be read as \u201CUpdate the plot object to include all data points
<strong>up until the current point</strong> encoded in <code>reveal</code>.\u201D</p>
<p>But, it also depends on what level of <code>add</code> we are at; if <code>add</code> == 8
(the last data point, e.g.\xA0the concluding plot), then we want to show
<em>all data points</em>.</p>
<p>\u201COkay, okay. But what is <code>add</code>???\u201D</p>
<p>Good question. <code>add</code> is the variable I constructed to correspond to the
user\u2019s input (in this case, the scroll!). When we put it all together,
we\u2019re going to wrap our plot object into a rendering function <em>inside</em>
the server function. Confusing? It looks like this:</p>
<pre class="${"language-r"}"><!-- HTML_TAG_START -->${`<code class="language-r">server <span class="token operator">&lt;-</span> <span class="token keyword">function</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span> output<span class="token punctuation">,</span> session<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

  output<span class="token operator">$</span>plot <span class="token operator">&lt;-</span> renderPlotly<span class="token punctuation">(</span><span class="token punctuation">&#123;</span>

    add <span class="token operator">&lt;-</span> input<span class="token operator">$</span>scr

    plot <span class="token operator">&lt;-</span>
      <span class="token comment"># static ggplot goes here</span>

      ggplotly<span class="token punctuation">(</span>plot<span class="token punctuation">)</span> <span class="token percent-operator operator">%>%</span>
      <span class="token comment"># other ggplotly parameters go here</span>

  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

  <span class="token comment"># render the plot here</span>
  output<span class="token operator">$</span>scr <span class="token operator">&lt;-</span> renderScrollytell<span class="token punctuation">(</span><span class="token punctuation">&#123;</span>scrollytell<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  renderText<span class="token punctuation">(</span>paste0<span class="token punctuation">(</span><span class="token string">"Section: "</span><span class="token punctuation">,</span> input<span class="token operator">$</span>scr<span class="token punctuation">)</span><span class="token punctuation">)</span>
  observe<span class="token punctuation">(</span><span class="token punctuation">&#123;</span>cat<span class="token punctuation">(</span><span class="token string">"section:"</span><span class="token punctuation">,</span> input<span class="token operator">$</span>scr<span class="token punctuation">,</span> <span class="token string">"&#92;n"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

<span class="token punctuation">&#125;</span></code>`}<!-- HTML_TAG_END --></pre>
<p>What\u2019s happening here? Within the server function, we\u2019re doing two
things:</p>
<p>First, we\u2019re creating the plot object. Because we have the command <code>add &lt;- input$scr</code> <strong>inside</strong> the function <code>renderPlotly</code>, our plot object will be dynamically updated along with <code>input$scr</code>.</p>
<p>This makes more sense when you connect it to the ui. In our ui function,
we include a <code>scrolly_container</code> from the scrollytell package. Within
that, we make our <code>outputId</code> correspond to the name of our updating
input (in this case, <em>scr</em>).</p>
<pre class="${"language-r"}"><!-- HTML_TAG_START -->${`<code class="language-r">ui <span class="token operator">&lt;-</span> fluidPage<span class="token punctuation">(</span>

  <span class="token comment"># a bunch of introductory stuff, css stuff</span>

  <span class="token comment"># scrollytelling plot</span>
  scrolly_container<span class="token punctuation">(</span>outputId <span class="token operator">=</span> <span class="token string">"scr"</span><span class="token punctuation">,</span>
                       scrolly_graph<span class="token punctuation">(</span>
                                     <span class="token comment">## this is the plot object that we made earlier:</span>
                                     plotlyOutput<span class="token punctuation">(</span><span class="token string">"plot"</span><span class="token punctuation">,</span> height <span class="token operator">=</span> <span class="token string">'600px'</span><span class="token punctuation">)</span>

                    <span class="token punctuation">)</span><span class="token punctuation">,</span>
                    scrolly_sections<span class="token punctuation">(</span>
                      <span class="token comment">## each of these sections corresponds to an update</span>
                      <span class="token comment">## the number after id = corresponds to the &#96;scr&#96; update</span>
                      <span class="token comment">## the render_text() function will be discussed later</span>
                      scrolly_section<span class="token punctuation">(</span>id <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> render_text<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                      scrolly_section<span class="token punctuation">(</span>id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> render_text<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                      scrolly_section<span class="token punctuation">(</span>id <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> render_text<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                      scrolly_section<span class="token punctuation">(</span>id <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span> render_text<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                      scrolly_section<span class="token punctuation">(</span>id <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">,</span> render_text<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                      scrolly_section<span class="token punctuation">(</span>id <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">,</span> render_text<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                      scrolly_section<span class="token punctuation">(</span>id <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">,</span> render_text<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                      scrolly_section<span class="token punctuation">(</span>id <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">,</span> render_text<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                      scrolly_section<span class="token punctuation">(</span>id <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">,</span> render_text<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                      <span class="token comment"># add a scrolly_section with nothing in it;</span>
                      <span class="token comment"># this buffer prevents the plot from disappearing while reading last section</span>
                      scrolly_section<span class="token punctuation">(</span>id <span class="token operator">=</span> <span class="token string">"buffer"</span><span class="token punctuation">,</span> br<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                    <span class="token punctuation">)</span>

  <span class="token punctuation">)</span><span class="token punctuation">,</span>

  <span class="token comment"># a bunch of concluding stuff, other html</span>

<span class="token punctuation">)</span></code>`}<!-- HTML_TAG_END --></pre>
<p>So, the simplest way to think about this so far is:</p>
<p>Construct a plot object with some updating variable (in my case, <code>reveal</code>).</p>
<pre class="${"language-r"}"><!-- HTML_TAG_START -->${`<code class="language-r">filter<span class="token punctuation">(</span><span class="token keyword">if</span> <span class="token punctuation">(</span>add <span class="token operator">!=</span> <span class="token number">8</span><span class="token punctuation">)</span> add <span class="token operator">>=</span> reveal <span class="token keyword">else</span> reveal <span class="token percent-operator operator">%in%</span> c<span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code>`}<!-- HTML_TAG_END --></pre>
<p>Make that variable correspond with some input variable (in my case <code>add</code>, which is created from the <code>input$scr</code>).</p>
<pre class="${"language-r"}"><!-- HTML_TAG_START -->${`<code class="language-r">server <span class="token operator">&lt;-</span> <span class="token keyword">function</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span> output<span class="token punctuation">,</span> session<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

  output<span class="token operator">$</span>plot <span class="token operator">&lt;-</span> renderPlotly<span class="token punctuation">(</span><span class="token punctuation">&#123;</span>

    add <span class="token operator">&lt;-</span> input<span class="token operator">$</span>scr
    <span class="token comment">#...</span></code>`}<!-- HTML_TAG_END --></pre>
<p>Render your plot object in <code>scrolly_graph</code>, and provide input updates
via each <code>scrolly_section</code>.</p>
<pre class="${"language-r"}"><!-- HTML_TAG_START -->${`<code class="language-r">ui <span class="token operator">&lt;-</span> fluidPage<span class="token punctuation">(</span>

  <span class="token comment"># a bunch of introductory stuff, css stuff</span>

  <span class="token comment"># scrollytelling plot</span>
  scrolly_container<span class="token punctuation">(</span>outputId <span class="token operator">=</span> <span class="token string">"scr"</span><span class="token punctuation">,</span>
                       scrolly_graph<span class="token punctuation">(</span>plotlyOutput<span class="token punctuation">(</span><span class="token string">"plot"</span><span class="token punctuation">,</span> height <span class="token operator">=</span> <span class="token string">'600px'</span><span class="token punctuation">)</span>

                    <span class="token punctuation">)</span><span class="token punctuation">,</span>
                    scrolly_sections<span class="token punctuation">(</span>
                      scrolly_section<span class="token punctuation">(</span>id <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> render_text<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                      scrolly_section<span class="token punctuation">(</span>id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> render_text<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>

                      <span class="token comment"># ...</span></code>`}<!-- HTML_TAG_END --></pre>
<p>Render your plots in your server function.</p>
<pre class="${"language-r"}"><!-- HTML_TAG_START -->${`<code class="language-r">server <span class="token operator">&lt;-</span> <span class="token keyword">function</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span> output<span class="token punctuation">,</span> session<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

  output<span class="token operator">$</span>plot <span class="token operator">&lt;-</span>
    <span class="token comment">#...</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

  output<span class="token operator">$</span>scr <span class="token operator">&lt;-</span> renderScrollytell<span class="token punctuation">(</span><span class="token punctuation">&#123;</span>scrollytell<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  renderText<span class="token punctuation">(</span>paste0<span class="token punctuation">(</span><span class="token string">"Section: "</span><span class="token punctuation">,</span> input<span class="token operator">$</span>scr<span class="token punctuation">)</span><span class="token punctuation">)</span>
  observe<span class="token punctuation">(</span><span class="token punctuation">&#123;</span>cat<span class="token punctuation">(</span><span class="token string">"section:"</span><span class="token punctuation">,</span> input<span class="token operator">$</span>scr<span class="token punctuation">,</span> <span class="token string">"&#92;n"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

<span class="token punctuation">&#125;</span></code>`}<!-- HTML_TAG_END --></pre>
<p>That\u2019s (most of) it for the plot section. You can play around with other
customizations too (for example, the alphas for my circles correspond to
an <code>ifelse</code> around <code>reveal</code>, so old circles are faded out compared to
new ones).</p>
<h3 id="${"create-a-series-of-text-reveals"}"><a href="${"#create-a-series-of-text-reveals"}">Create a series of text reveals</a></h3>
<p>Next, we create text sections using <code>HTML</code> and some helper functions
which beautify them.</p>
<p>First, we create the text boxes for each section following a similar
naming convention:</p>
<pre class="${"language-r"}"><!-- HTML_TAG_START -->${`<code class="language-r">text1 <span class="token operator">&lt;-</span> HTML<span class="token punctuation">(</span>"<span class="token operator">&lt;</span>H2<span class="token operator">></span> No education credentials <span class="token operator">&lt;</span><span class="token operator">/</span>H2<span class="token operator">></span>
              <span class="token operator">&lt;</span>br<span class="token operator">></span> <span class="token operator">&lt;</span>p<span class="token operator">></span> Workers with <span class="token operator">&lt;</span>font color<span class="token operator">=</span><span class="token string">'#A00042'</span><span class="token operator">></span>no formal education credential<span class="token operator">&lt;</span><span class="token operator">/</span>font<span class="token operator">></span> have a median income of <span class="token operator">$</span><span class="token number">25</span><span class="token punctuation">,</span><span class="token number">636.</span>
              <span class="token operator">&lt;</span>br<span class="token operator">></span> On average<span class="token punctuation">,</span> those occupations have a <span class="token operator">&lt;</span>b<span class="token operator">></span><span class="token number">90</span>% chance<span class="token operator">&lt;</span><span class="token operator">/</span>b<span class="token operator">></span> of job automation.
              <span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span> There are <span class="token number">23</span><span class="token punctuation">,</span><span class="token number">765</span><span class="token punctuation">,</span><span class="token number">700</span> workers with <span class="token operator">&lt;</span>font color<span class="token operator">=</span><span class="token string">'#A00042'</span><span class="token operator">></span>no formal education credential<span class="token operator">&lt;</span><span class="token operator">/</span>font<span class="token operator">></span>.<span class="token operator">&lt;</span>p<span class="token operator">></span>"<span class="token punctuation">)</span>

text2 <span class="token operator">&lt;-</span> HTML<span class="token punctuation">(</span>"<span class="token operator">&lt;</span>H2<span class="token operator">></span> High school diplomas <span class="token operator">&lt;</span><span class="token operator">/</span>H2<span class="token operator">></span>
              <span class="token operator">&lt;</span>br<span class="token operator">></span> <span class="token operator">&lt;</span>p<span class="token operator">></span>Workers with <span class="token operator">&lt;</span>font color<span class="token operator">=</span><span class="token string">'#F56C42'</span><span class="token operator">></span>high school diplomas<span class="token operator">&lt;</span><span class="token operator">/</span>font<span class="token operator">></span> have a median income of <span class="token operator">$</span><span class="token number">25</span><span class="token punctuation">,</span><span class="token number">636.</span>
              <span class="token operator">&lt;</span>br<span class="token operator">></span> On average<span class="token punctuation">,</span> those occupations have a <span class="token operator">&lt;</span>b<span class="token operator">></span><span class="token number">60</span>% chance<span class="token operator">&lt;</span><span class="token operator">/</span>b<span class="token operator">></span> of job automation.
              <span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span> There are <span class="token number">33</span><span class="token punctuation">,</span><span class="token number">129</span><span class="token punctuation">,</span><span class="token number">910</span> workers with a <span class="token operator">&lt;</span>font color<span class="token operator">=</span><span class="token string">'#F56C42'</span><span class="token operator">></span>high school diploma<span class="token operator">&lt;</span><span class="token operator">/</span>font<span class="token operator">></span>.<span class="token operator">&lt;</span>p<span class="token operator">></span>"<span class="token punctuation">)</span>

<span class="token comment"># ...</span></code>`}<!-- HTML_TAG_END --></pre>
<p>Then, we create a function <code>render_text</code> which beautifies that HTML with
CSS:</p>
<pre class="${"language-r"}"><!-- HTML_TAG_START -->${`<code class="language-r">text <span class="token operator">&lt;-</span> <span class="token keyword">function</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  p<span class="token punctuation">(</span>
    switch<span class="token punctuation">(</span>num<span class="token punctuation">,</span>
           text1<span class="token punctuation">,</span>
           text2<span class="token punctuation">,</span>
           text3<span class="token punctuation">,</span>
           text4<span class="token punctuation">,</span>
           text5<span class="token punctuation">,</span>
           text6<span class="token punctuation">,</span>
           text7<span class="token punctuation">,</span>
           text8
    <span class="token punctuation">)</span>
  <span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

render_text <span class="token operator">&lt;-</span> <span class="token keyword">function</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>

  div<span class="token punctuation">(</span>
    text<span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">,</span> class <span class="token operator">=</span> <span class="token string">"text"</span>
  <span class="token punctuation">)</span>

<span class="token punctuation">&#125;</span></code>`}<!-- HTML_TAG_END --></pre>
<p>For all 8 of the above <code>text</code>s, we\u2019ve created a switch function which
calls them depending on the number passed to <code>render_text</code>. Then, we
apply paragraph format, put them in their own div, and apply the <em>text</em>
class in our CSS sheet.</p>
<p>How does this work?</p>
<p>Recall that above, in our ui section, we had the following:</p>
<pre class="${"language-r"}"><!-- HTML_TAG_START -->${`<code class="language-r">scrolly_sections<span class="token punctuation">(</span>
                      HTML<span class="token punctuation">(</span><span class="token string">'&lt;center>'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                      scrolly_section<span class="token punctuation">(</span>id <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> render_text<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                      scrolly_section<span class="token punctuation">(</span>id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> render_text<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                      <span class="token comment"># ...</span>

<span class="token punctuation">)</span></code>`}<!-- HTML_TAG_END --></pre>
<p>Here, our <code>scrolly_section</code>s take two inputs: our ID and our
corresponding text. Rather than write out lengthy text boxes in each
<code>scrolly_section</code>, we can construct them in a single file and then knit
them all into the same format using <code>render_text</code>. This makes life a lot
easier.</p>
<p>So, on each scroll (or observation), the app will update 1) the plot
object, by adding <code>add</code> and updating according to <code>reveal</code>, and 2) the
text, by running <code>render_text</code> which calls <code>text</code> which beautifies our
HTML text.</p>
<h3 id="${"final-touches"}"><a href="${"#final-touches"}">Final touches</a></h3>
<p>The rest of the app is built via
<code>fluidPage</code>, and organizing via rows and columns in your shiny app. Your
app should have a CSS style sheet (in the <a href="${"https://shiny.rstudio.com/articles/css.html"}" rel="${"nofollow"}">www
folder</a>). You may also
include other plots (for my post, I have an introductory plot with a bit
more context), which you will have to separately create and render in
your server function.</p>
<p>All in all, my code looks like this:</p>
<pre class="${"language-r"}"><!-- HTML_TAG_START -->${`<code class="language-r">ui <span class="token operator">&lt;-</span> fluidPage<span class="token punctuation">(</span>

  <span class="token comment"># suppress warning messages while data is loading on-screen</span>
  tags<span class="token operator">$</span>style<span class="token punctuation">(</span>type<span class="token operator">=</span><span class="token string">"text/css"</span><span class="token punctuation">,</span>
             <span class="token string">".shiny-output-error &#123; visibility: hidden; &#125;"</span><span class="token punctuation">,</span>
             <span class="token string">".shiny-output-error:before &#123; visibility: hidden; &#125;"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  tags<span class="token operator">$</span>head<span class="token punctuation">(</span>
    includeCSS<span class="token punctuation">(</span><span class="token string">"www/style.css"</span><span class="token punctuation">)</span>
  <span class="token punctuation">)</span><span class="token punctuation">,</span>

  <span class="token comment"># article title &amp; name</span>
  fluidRow<span class="token punctuation">(</span>HTML<span class="token punctuation">(</span>"<span class="token operator">&lt;</span>center<span class="token operator">></span>
                <span class="token operator">&lt;</span>h1<span class="token operator">></span>Automation and Its Impact on Jobs<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>
                <span class="token operator">&lt;</span>p style<span class="token operator">=</span><span class="token string">'font-size:26px'</span><span class="token operator">></span> by <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">'https://connorrothschild.github.io/'</span> target<span class="token operator">=</span><span class="token string">'_blank'</span><span class="token operator">></span>Connor Rothschild<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>
                <span class="token operator">&lt;</span><span class="token operator">/</span>center<span class="token operator">></span>"<span class="token punctuation">)</span>
  <span class="token punctuation">)</span><span class="token punctuation">,</span>

  br<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>

  fluidRow<span class="token punctuation">(</span>
    column<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>

    column<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span>
           <span class="token comment"># intro text</span>
           fluidRow<span class="token punctuation">(</span>id<span class="token operator">=</span><span class="token string">'text'</span><span class="token punctuation">,</span>
                    column<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                    column<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span>
                           br<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                           text0<span class="token punctuation">,</span>
                           hr<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                           h1<span class="token punctuation">(</span>
                             class <span class="token operator">=</span> <span class="token string">"instructions"</span><span class="token punctuation">,</span>
                             <span class="token string">"How to read this chart:"</span><span class="token punctuation">,</span>
                             br<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                             br<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                             <span class="token string">"The size of each"</span><span class="token punctuation">,</span> icon<span class="token punctuation">(</span><span class="token string">"circle"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"corresponds to the number of workers in that job."</span><span class="token punctuation">,</span>
                             br<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                             <span class="token string">"Hover over each"</span><span class="token punctuation">,</span> icon<span class="token punctuation">(</span><span class="token string">"circle"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"to see details on the occupation's income and probability of automation."</span><span class="token punctuation">,</span>
                             br<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                             <span class="token string">"Double click on a"</span><span class="token punctuation">,</span> icon<span class="token punctuation">(</span><span class="token string">"circle"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"in the legend to focus on a specific level of education."</span>
                           <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                    column<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
           <span class="token comment"># plot object for intro</span>
           plotlyOutput<span class="token punctuation">(</span><span class="token string">"introPlot"</span><span class="token punctuation">,</span> height <span class="token operator">=</span> <span class="token string">'400px'</span><span class="token punctuation">)</span>
           <span class="token punctuation">)</span><span class="token punctuation">,</span>

    column<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>

           <span class="token punctuation">)</span><span class="token punctuation">,</span>

  <span class="token comment"># scrollytelling plot</span>
  scrolly_container<span class="token punctuation">(</span><span class="token string">"scr"</span>
                    <span class="token punctuation">,</span> scrolly_graph<span class="token punctuation">(</span> br<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                                     br<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                                     textOutput<span class="token punctuation">(</span><span class="token string">"section"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                                     br<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                                     HTML<span class="token punctuation">(</span><span class="token string">'&lt;center>'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                                     plotlyOutput<span class="token punctuation">(</span><span class="token string">"plot"</span><span class="token punctuation">,</span> height <span class="token operator">=</span> <span class="token string">'600px'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                                     HTML<span class="token punctuation">(</span><span class="token string">'&lt;/center>'</span><span class="token punctuation">)</span>

                    <span class="token punctuation">)</span>
                    <span class="token punctuation">,</span> scrolly_sections<span class="token punctuation">(</span>
                      HTML<span class="token punctuation">(</span><span class="token string">'&lt;center>'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                      scrolly_section<span class="token punctuation">(</span>id <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> render_text<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                      scrolly_section<span class="token punctuation">(</span>id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> render_text<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                      scrolly_section<span class="token punctuation">(</span>id <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> render_text<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                      scrolly_section<span class="token punctuation">(</span>id <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span> render_text<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                      scrolly_section<span class="token punctuation">(</span>id <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">,</span> render_text<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                      scrolly_section<span class="token punctuation">(</span>id <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">,</span> render_text<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                      scrolly_section<span class="token punctuation">(</span>id <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">,</span> render_text<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                      scrolly_section<span class="token punctuation">(</span>id <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">,</span> render_text<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                      scrolly_section<span class="token punctuation">(</span>id <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">,</span> render_text<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                      <span class="token comment"># add a scrolly_section with nothing in it;</span>
                      <span class="token comment"># this buffer prevents the plot from disappearing while reading last section</span>
                      scrolly_section<span class="token punctuation">(</span>id <span class="token operator">=</span> <span class="token string">"buffer"</span><span class="token punctuation">,</span> br<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                      HTML<span class="token punctuation">(</span><span class="token string">'&lt;/center>'</span><span class="token punctuation">)</span>
                    <span class="token punctuation">)</span>

  <span class="token punctuation">)</span><span class="token punctuation">,</span>

  <span class="token comment"># concluding text</span>
  div<span class="token punctuation">(</span>fluidRow<span class="token punctuation">(</span>id <span class="token operator">=</span> <span class="token string">'text'</span><span class="token punctuation">,</span>
               column<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
               column<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span>
                      concludingtext<span class="token punctuation">,</span>
                      br<span class="token punctuation">(</span><span class="token punctuation">)</span>
               <span class="token punctuation">)</span><span class="token punctuation">,</span>
               column<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
  <span class="token punctuation">)</span><span class="token punctuation">,</span> style <span class="token operator">=</span> <span class="token string">'margin-top: -300px;'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>

  br<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  br<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  br<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  hr<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>

  fluidRow<span class="token punctuation">(</span>
    column<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    column<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span>
           technicalnotes
    <span class="token punctuation">)</span><span class="token punctuation">,</span>
    column<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
  <span class="token punctuation">)</span><span class="token punctuation">,</span>
  br<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  br<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
column<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>

<span class="token punctuation">)</span></code>`}<!-- HTML_TAG_END --></pre>
<p>And the server looks like this:</p>
<pre class="${"language-r"}"><!-- HTML_TAG_START -->${`<code class="language-r">server <span class="token operator">&lt;-</span> <span class="token keyword">function</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span> output<span class="token punctuation">,</span> session<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

  output<span class="token operator">$</span>plot <span class="token operator">&lt;-</span> renderPlotly<span class="token punctuation">(</span><span class="token punctuation">&#123;</span>

    add <span class="token operator">&lt;-</span> input<span class="token operator">$</span>scr

    plot <span class="token operator">&lt;-</span> data <span class="token percent-operator operator">%>%</span>
      filter<span class="token punctuation">(</span>typicaled <span class="token operator">!=</span> <span class="token string">"Some college, no degree"</span><span class="token punctuation">)</span> <span class="token percent-operator operator">%>%</span>
      filter<span class="token punctuation">(</span><span class="token keyword">if</span> <span class="token punctuation">(</span>add <span class="token operator">!=</span> <span class="token number">8</span><span class="token punctuation">)</span> add <span class="token operator">>=</span> reveal <span class="token keyword">else</span> reveal <span class="token percent-operator operator">%in%</span> c<span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token percent-operator operator">%>%</span>
      ggplot<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span>
      geom_point<span class="token punctuation">(</span>mapping<span class="token operator">=</span>aes<span class="token punctuation">(</span>x<span class="token operator">=</span>A_MEDIAN<span class="token punctuation">,</span> y<span class="token operator">=</span>probability<span class="token punctuation">,</span> size<span class="token operator">=</span>TOT_EMP<span class="token punctuation">,</span>
                             alpha<span class="token operator">=</span>ifelse<span class="token punctuation">(</span>add <span class="token operator">==</span> reveal<span class="token punctuation">,</span> <span class="token number">1</span><span class="token operator">/</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token operator">/</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span> col<span class="token operator">=</span>typicaled<span class="token punctuation">,</span>
                             text <span class="token operator">=</span> glue<span class="token operator">::</span>glue<span class="token punctuation">(</span>'<span class="token operator">&lt;</span>b<span class="token operator">></span>Occupation<span class="token operator">&lt;</span><span class="token operator">/</span>b<span class="token operator">></span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>occupation<span class="token punctuation">&#125;</span>
                                                <span class="token operator">&lt;</span>b<span class="token operator">></span>Probability of Automation<span class="token operator">&lt;</span><span class="token operator">/</span>b<span class="token operator">></span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>probability<span class="token punctuation">&#125;</span>%
                                                <span class="token operator">&lt;</span>b<span class="token operator">></span>Median Income<span class="token operator">&lt;</span><span class="token operator">/</span>b<span class="token operator">></span><span class="token operator">:</span> <span class="token operator">$</span><span class="token punctuation">&#123;</span>A_MEDIAN<span class="token punctuation">&#125;</span>
                                                <span class="token operator">&lt;</span>b<span class="token operator">></span>Number of Workers<span class="token operator">&lt;</span><span class="token operator">/</span>b<span class="token operator">></span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>TOT_EMP<span class="token punctuation">&#125;</span>'<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span>
      scale_size<span class="token punctuation">(</span>range <span class="token operator">=</span> c<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span>
      xlab<span class="token punctuation">(</span><span class="token string">"&#92;nMedian Income"</span><span class="token punctuation">)</span> <span class="token operator">+</span>
      ylab<span class="token punctuation">(</span><span class="token string">"Probability of Automation"</span><span class="token punctuation">)</span> <span class="token operator">+</span>
      labs<span class="token punctuation">(</span>size<span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">,</span> col<span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">,</span> alpha <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">)</span> <span class="token operator">+</span>
      scale_color_manual<span class="token punctuation">(</span>values <span class="token operator">=</span> cols<span class="token punctuation">,</span> breaks <span class="token operator">=</span> legend_ord<span class="token punctuation">)</span> <span class="token operator">+</span>
      scale_x_continuous<span class="token punctuation">(</span>labels<span class="token operator">=</span>scales<span class="token operator">::</span>dollar_format<span class="token punctuation">(</span>prefix<span class="token operator">=</span><span class="token string">"$"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> limits <span class="token operator">=</span> c<span class="token punctuation">(</span><span class="token number">25000</span><span class="token punctuation">,</span><span class="token number">200000</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span>
      scale_y_continuous<span class="token punctuation">(</span>labels<span class="token operator">=</span>scales<span class="token operator">::</span>number_format<span class="token punctuation">(</span>suffix<span class="token operator">=</span><span class="token string">"%"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> limits <span class="token operator">=</span> c<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span>
      <span class="token comment"># cr::drop_axis(axis = "y") +</span>
      theme<span class="token punctuation">(</span>axis.line.x <span class="token operator">=</span> ggplot2<span class="token operator">::</span>element_line<span class="token punctuation">(</span>colour <span class="token operator">=</span> <span class="token keyword">NULL</span><span class="token punctuation">,</span>
                                                size <span class="token operator">=</span> <span class="token keyword">NULL</span><span class="token punctuation">,</span> linetype <span class="token operator">=</span> <span class="token keyword">NULL</span><span class="token punctuation">,</span> lineend <span class="token operator">=</span> <span class="token keyword">NULL</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            axis.line.y <span class="token operator">=</span> ggplot2<span class="token operator">::</span>element_blank<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            panel.grid.major.x <span class="token operator">=</span> element_blank<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

    ggplotly<span class="token punctuation">(</span>plot<span class="token punctuation">,</span> tooltip <span class="token operator">=</span> <span class="token string">'text'</span><span class="token punctuation">)</span> <span class="token percent-operator operator">%>%</span>
    layout<span class="token punctuation">(</span>
      title <span class="token operator">=</span> list<span class="token punctuation">(</span>element_blank<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      legend <span class="token operator">=</span> list<span class="token punctuation">(</span>x <span class="token operator">=</span> <span class="token number">0.65</span><span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token number">0.925</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      font <span class="token operator">=</span> list<span class="token punctuation">(</span>family <span class="token operator">=</span> <span class="token string">'Lato'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      margin<span class="token operator">=</span>list<span class="token punctuation">(</span>t<span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      hoverlabel <span class="token operator">=</span> list<span class="token punctuation">(</span>bgcolor <span class="token operator">=</span> <span class="token string">'whitesmoke'</span><span class="token punctuation">,</span> color <span class="token operator">=</span> <span class="token string">'DarkGray'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token percent-operator operator">%>%</span>
    config<span class="token punctuation">(</span>displaylogo <span class="token operator">=</span> F<span class="token punctuation">,</span> showSendToCloud <span class="token operator">=</span> F<span class="token punctuation">,</span> displayModeBar <span class="token operator">=</span> F<span class="token punctuation">)</span>

  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

  output<span class="token operator">$</span>introPlot <span class="token operator">&lt;-</span> renderPlotly<span class="token punctuation">(</span><span class="token punctuation">&#123;</span>introPlot<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  output<span class="token operator">$</span>scr <span class="token operator">&lt;-</span> renderScrollytell<span class="token punctuation">(</span><span class="token punctuation">&#123;</span>scrollytell<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  renderText<span class="token punctuation">(</span>paste0<span class="token punctuation">(</span><span class="token string">"Section: "</span><span class="token punctuation">,</span> input<span class="token operator">$</span>scr<span class="token punctuation">)</span><span class="token punctuation">)</span>
  observe<span class="token punctuation">(</span><span class="token punctuation">&#123;</span>cat<span class="token punctuation">(</span><span class="token string">"section:"</span><span class="token punctuation">,</span> input<span class="token operator">$</span>scr<span class="token punctuation">,</span> <span class="token string">"&#92;n"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

<span class="token punctuation">&#125;</span></code>`}<!-- HTML_TAG_END --></pre>
<h2 id="${"the-output"}"><a href="${"#the-output"}">The output</a></h2>
<p>You can see the final output of my post
<a href="${"https://connorrothschild.shinyapps.io/automation/"}" rel="${"nofollow"}">here</a>.</p>
<p>You can look at the code and all of its context on GitHub
<a href="${"https://github.com/connorrothschild/shiny-scrollytell"}" rel="${"nofollow"}">here</a>.</p>
<iframe src="${"https://connorrothschild.shinyapps.io/automation/"}" width="${"100%"}" height="${"800px"}"></iframe>`
  })}`;
});
var automationScrollytell = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  "default": Automation_scrollytell,
  metadata: metadata$e
});
var metadata$d = {
  "layout": "blog",
  "title": "Animating Your Hugo Academic Site",
  "description": "Make your Hugo Academic homepage more engaging with a few lines of code",
  "date": "2020-07-02",
  "image": "images/jobs/moksha.svg"
};
var Animate_hugo_academic = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign($$props, metadata$d), {}, {
    default: () => `${validate_component(Image, "Image").$$render($$result, {
      src: "../images/blog/animate-hugo-academic/final.gif",
      alt: "A GIF showcasing the final version of my animated homepage."
    }, {}, {})}
<p>The R package <code>blogdown</code> is an incredibly powerful tool\u2014it allows R users with little to no familiarity in web development to build a fully functional, content-oriented, beautiful website using a language they\u2019re already familiar with. It\u2019s built on top of <a href="${"https://gohugo.io/"}" rel="${"nofollow"}">Hugo</a>, the world\u2019s (self-proclaimed) \u2018fastest framework for building websites,\u2019 which comes with a <a href="${"https://themes.gohugo.io/"}" rel="${"nofollow"}">variety of themes</a> suitable for a variety of different uses.</p>
<p>Within the R community, perhaps one of the most popular themes is <a href="${"https://themes.gohugo.io/academic/"}" rel="${"nofollow"}">Hugo Academic</a>. As the name implies, the theme is geared toward those working academia\u2014more generally, it provides a great starter kit for those interested in showcasing blog posts, projects, and other media on a minimalist site.</p>
<p>Given its popularity, the Hugo Academic landing page is far-too-familiar. Although not unattractive, no one is particularly surprised or engaged by the standard Academic homepage.</p>
<p>One way to spice up Hugo Academic is to use animations on our home pages. In this post, I outline three simple steps and a few lines of code to create a fully functional, beautifully-animated landing page. By leveraging the flexibility of Hugo\u2019s framework, and introducing a little bit of HTML and CSS, we can take our Hugo Academic home pages from zero to hero (at least, in terms of animation!).</p>
${validate_component(Info, "Info").$$render($$result, {}, {}, {
      default: () => `<p>This tutorial assumes you are starting a Hugo Academic site from scratch. If you already have a Hugo Academic website up and running, you should be able to <a href="${"#step-1-create-abouthtml"}">skip step 0</a> and modify the remaining steps slightly.</p>
<p>It also assumes that you have little to no knowledge about HTML and CSS (which is fine!). If that\u2019s <em>not</em> the case, you can likely go ahead and skip to <a href="${"#step-3-add-css"}">step 3</a>.</p>
<p>If you\u2019d like to skip this tutorial and just start a Hugo Academic site that\u2019s animated, feel free to <a href="${"https://github.com/connorrothschild/animate-hugo-academic"}" rel="${"nofollow"}">fork my repository</a> which includes all the code you need for an animated homepage. The repo includes my <a href="${"https://github.com/connorrothschild/animate-hugo-academic/blob/master/layouts/partials/widgets/about.html"}" rel="${"nofollow"}"><code>about.html</code> page</a> and a <a href="${"https://github.com/connorrothschild/animate-hugo-academic/blob/master/assets/scss/custom.scss"}" rel="${"nofollow"}">custom SCSS file</a>!</p>`
    })}
<h2 id="${"step-0-make-your-about-page-your-actual-homepage"}"><a href="${"#step-0-make-your-about-page-your-actual-homepage"}">Step 0) Make your \u2018about\u2019 page your actual homepage</a></h2>
<p>By default, the Hugo Academic theme\u2019s first section is a grandiose self-introduction (I guess the creators of the theme do deserve such credit). Before we incorporate any of our animations, lets go ahead and make our \u2018about\u2019 page the landing page users first see when they visit our site. This requires us to find the files <code>hero.md</code> and <code>demo.md</code>, and in each of those files, set <code>active</code> equal to <code>false</code>. That takes our home page from this:</p>
${validate_component(Image, "Image").$$render($$result, {
      src: "../images/blog/animate-hugo-academic/before-demo-hero-remove.png",
      alt: "A GIF showcasing the initial version of my homepage, before any edits."
    }, {}, {})}
<p>to this:</p>
${validate_component(Image, "Image").$$render($$result, {
      src: "../images/blog/animate-hugo-academic/after-demo-hero-remove.png",
      alt: "A GIF showcasing a version of my homepage where I replace \u2018hero' with \u2018about\u2019."
    }, {}, {})}
<p>(As you progress, you might have to make additional small changes, such as removing \u2018Demo\u2019 from the navbar menu.)</p>
<h2 id="${"step-1-create-abouthtml"}"><a href="${"#step-1-create-abouthtml"}">Step 1) Create about.html</a></h2>
<p>The first <em>real</em> step in our process is modifying the default layout of our about page. More specifically, our animations will rely on CSS selectors which our about page currently doesn\u2019t have. In order to animate certain elements, we will need unique identifiers, such as CSS classes and IDs, to target.</p>
<p>To play around with our about page, we take advantage of Hugo\u2019s flexibility toward structural changes. As they <a href="${"https://bwaycer.github.io/hugo_tutorial.hugo/themes/customizing/"}" rel="${"nofollow"}">say</a> on their website:</p>
<blockquote><p>Hugo permits you to <strong>supplement or override</strong> any theme template or static file, with files in your working directory.</p></blockquote>
<p>In order to override Hugo Academic\u2019s about page, we need to copy their existing structure into our own folder and modify it there. To do so, navigate to <code>themes/hugo-academic/layouts/partials/widgets/</code> and copy the file titled <code>about.html</code>.</p>
<p>Now, create <em>a new file path</em> in your root directory titled <code>layouts/partials/widgets/</code>. Copy your <code>about.html</code> file here. (Look familiar? All we\u2019re doing is recreating <code>about.html</code> in a <em>personal</em> version of our project, thus overriding the <code>about.html</code> that Hugo Academic provides.)</p>
${validate_component(Info, "Info").$$render($$result, {}, {}, {
      default: () => `<p>Alternatively, you can copy the about.html file that I used for this project and paste it into <code>layouts/partials/widgets/</code>. <a href="${"https://github.com/connorrothschild/animate-hugo-academic/blob/master/layouts/partials/widgets/about.html"}" rel="${"nofollow"}">You can find my file here</a>. This will also allow you to skip step 2 and move on to <a href="${"#step-3-add-css"}">step 3</a>!</p>`
    })}
<h2 id="${"step-2-customize-your-file"}"><a href="${"#step-2-customize-your-file"}">Step 2) Customize your file</a></h2>
<p>With that newly created <code>about.html</code> living in <code>layouts/partials/widgets/</code>, you may notice that your homepage looks the exact same. This is correct! In this step, we\u2019ll customize that html file so that it can be animated.</p>
<p>Within <code>about.html</code>, you\u2019ll notice all of your page\u2019s elements in order of appearance, despite a lot of extra characters that don\u2019t make much sense. It should look like this:</p>
${validate_component(Image, "Image").$$render($$result, {
      src: "../images/blog/animate-hugo-academic/about.png",
      alt: "A screenshot of complicated code that is initially used to render the homepage."
    }, {}, {})}
<p>Throughout step 3, we\u2019ll use each element\u2019s \u2018class\u2019 to target it for animations. In the above screenshot (and in your <code>about.html</code> page!), you\u2019ll see classes scattered throughout. Although learning everything about CSS and CSS selectors is beyond the scope of this tutorial, I would recommend reading a brief primer on classes and selectors in CSS, which can be found <a href="${"https://www.w3schools.com/cssref/sel_class.asp"}" rel="${"nofollow"}">here</a>.</p>
<p>In this step, we\u2019ll add classes to the elements we want to animate. (Again, if this seems to be overwhelming, feel free to copy <a href="${"https://github.com/connorrothschild/animate-hugo-academic/blob/master/layouts/partials/widgets/about.html"}" rel="${"nofollow"}">my HTML file.</a>) Specifically, we\u2019ll make three changes.</p>
<p>First, we\u2019ll add a class of <code>biography-title</code> to our h1 (header 1) element. Here, we will change</p>
<pre class="${"language-html"}"><!-- HTML_TAG_START -->${`<code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>&#123;&#123; $page.Title | markdownify | emojify &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>
&#123;&#123; end &#125;&#125;</code>`}<!-- HTML_TAG_END --></pre>
<p>to</p>
<pre class="${"language-html"}"><!-- HTML_TAG_START -->${`<code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>biography-title<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>&#123;&#123; $page.Title | markdownify | emojify &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>
&#123;&#123; end &#125;&#125;</code>`}<!-- HTML_TAG_END --></pre>
<p>Next, we need to wrap the main content, aka the big text blocks in the middle of the page, in their own class too. Here, we take</p>
<pre class="${"language-html"}"><!-- HTML_TAG_START -->${`<code class="language-html">&#123;&#123; $person_page.Content &#125;&#125;</code>`}<!-- HTML_TAG_END --></pre>
<p>and wrap it in a <code>div</code>, so it looks like this:</p>
<pre class="${"language-html"}"><!-- HTML_TAG_START -->${`<code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>main-content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>&#123;&#123; $person_page.Content &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code>`}<!-- HTML_TAG_END --></pre>
<p>Finally, we\u2019ll add a class to our interests and and education blocks. We can take this row:</p>
<pre class="${"language-html"}"><!-- HTML_TAG_START -->${`<code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>row<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  &#123;&#123; with $person.interests &#125;&#125;
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>col-md-5<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>&#123;&#123; i18n "interests" | markdownify &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ul-interests<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
      &#123;&#123; range . &#125;&#125;
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>&#123;&#123; . | markdownify | emojify &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
      &#123;&#123; end &#125;&#125;
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
  &#123;&#123; end &#125;&#125; &#123;&#123; with $person.education &#125;&#125;
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>col-md-7<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>&#123;&#123; i18n "education" | markdownify &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ul-edu fa-ul<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
      &#123;&#123; range .courses &#125;&#125;
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fa-li fas fa-graduation-cap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>description<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>course<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>&#123;&#123; .course &#125;&#125;&#123;&#123; with .year &#125;&#125;, &#123;&#123; . &#125;&#125;&#123;&#123; end &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>institution<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>&#123;&#123; .institution &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
      &#123;&#123; end &#125;&#125;
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
  &#123;&#123; end &#125;&#125;
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code>`}<!-- HTML_TAG_END --></pre>
<p>and replace it with this:</p>
<pre class="${"language-html"}"><!-- HTML_TAG_START -->${`<code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>row<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  &#123;&#123; with $person.interests &#125;&#125;
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>interests-div col-md-5<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>&#123;&#123; i18n "interests" | markdownify &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ul-interests<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
      &#123;&#123; range . &#125;&#125;
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>&#123;&#123; . | markdownify | emojify &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
      &#123;&#123; end &#125;&#125;
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
  &#123;&#123; end &#125;&#125; &#123;&#123; with $person.education &#125;&#125;
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>education-div col-md-7<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>&#123;&#123; i18n "education" | markdownify &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ul-edu fa-ul<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
      &#123;&#123; range .courses &#125;&#125;
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fa-li fas fa-graduation-cap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>description<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>course<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>&#123;&#123; .course &#125;&#125;&#123;&#123; with .year &#125;&#125;, &#123;&#123; . &#125;&#125;&#123;&#123; end &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>institution<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>&#123;&#123; .institution &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
      &#123;&#123; end &#125;&#125;
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
  &#123;&#123; end &#125;&#125;
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code>`}<!-- HTML_TAG_END --></pre>
${validate_component(Info, "Info").$$render($$result, {}, {}, {
      default: () => `<p>A quick tip to identify the classes and IDs of individual elements is to use the browser\u2019s <strong>inspect element</strong> tool. To do so, right click on the element you\u2019re interested in and click inspect element; what you\u2019ll see is a highlighted box that tells you that object\u2019s class and/or ID. For more on inspect element and your browser, <a href="${"https://blog.devmountain.com/how-to-use-inspect-element-jump-into-what-makes-a-web-page-tick/"}" rel="${"nofollow"}">see this page</a>.</p>`
    })}
<p>Now, we can reference the existing CSS classes, and our new ones, in our pretty animation in Step 3!</p>
<h2 id="${"step-3-add-css"}"><a href="${"#step-3-add-css"}">Step 3) Add CSS</a></h2>
<p>Now that we\u2019ve created our classes, we can target them in a CSS file and tell them exactly <em>how</em> to animate.</p>
<p>But first, you\u2019ll need to create a custom CSS file in your root directly. In your <code>assets/</code> folder, create a <em>new</em> folder called <code>scss/</code> and within this folder, create a <em>new</em> file called <code>custom.scss</code>.</p>
${validate_component(Info, "Info").$$render($$result, {}, {}, {
      default: () => `<p>An SCSS file is essentially a CSS file but extended with Sass, which describes <a href="${"https://sass-lang.com/"}" rel="${"nofollow"}">itself</a> as \u2018CSS with superpowers.\u2019 For an overview of the intricacies of Sass, like nesting selectors, visit <a href="${"https://sass-lang.com/guide"}" rel="${"nofollow"}">their guide</a>.</p>`
    })}
<p>Within <code>custom.scss</code>, we\u2019re going to target everything <em>within our about section</em>. In order to do so, we create a selector that targets everything within the ID of <code>about</code>.</p>
<pre class="${"language-scss"}"><!-- HTML_TAG_START -->${`<code class="language-scss"><span class="token selector">#about </span><span class="token punctuation">&#123;</span>
  <span class="token comment">/* Some CSS will go here soon! :) */</span>
  <span class="token comment">/* This is a comment, by the way. */</span>
<span class="token punctuation">&#125;</span></code>`}<!-- HTML_TAG_END --></pre>
<p>To ensure that we\u2019ve targeted the right section, we can go ahead and add the property <code>background-color: red</code> to that element. As the name implies, this will make the section \u2728 red. \u2728</p>
<pre class="${"language-scss"}"><!-- HTML_TAG_START -->${`<code class="language-scss"><span class="token selector">#about </span><span class="token punctuation">&#123;</span>
  <span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`}<!-- HTML_TAG_END --></pre>
<p>As we expected, our section background is now an (unbelievably ugly shade of) red.</p>
${validate_component(Image, "Image").$$render($$result, {
      src: "../images/blog/animate-hugo-academic/bg-red.png",
      alt: "An example of turning the background color of the page red."
    }, {}, {})}
<p>(Now remove that property immediately! This is not quite the welcome we want for our visitors.) We can also target elements <em>within</em> the section by nesting new selectors inside of <code>#about</code>. For example, if we wanted to change the color of our \u2018biography\u2019 title text, we could do so with the following code. (This is because we created a class named <code>biography-title</code> in step 1):</p>
<pre class="${"language-scss"}"><!-- HTML_TAG_START -->${`<code class="language-scss"><span class="token selector">#about </span><span class="token punctuation">&#123;</span>
  <span class="token selector">.biography-title </span><span class="token punctuation">&#123;</span>
    <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`}<!-- HTML_TAG_END --></pre>
${validate_component(Image, "Image").$$render($$result, {
      src: "../images/blog/animate-hugo-academic/font-red.png",
      alt: "An example of turning the font color  red."
    }, {}, {})}
${validate_component(Info, "Info").$$render($$result, {}, {}, {
      default: () => `<p>You may notice that <code>about</code> is targeted with a pound (#) and <code>biography-title</code> is targeted with a period (.). This is the difference between CSS <em>IDs</em> and <em>classes</em>. If you\u2019re curious about the distinction, here\u2019s a <a href="${"https://www.htmldog.com/guides/css/intermediate/classid/"}" rel="${"nofollow"}">helpful guide</a>.</p>`
    })}
<p>Now that we know how to target specific objects within our <code>about</code> section, we can animate our first element!</p>
<h3 id="${"step-3a-your-first-animation"}"><a href="${"#step-3a-your-first-animation"}">Step 3A) Your first animation!</a></h3>
<p>Creating your first animation is as simple as a few lines of code. To illustrate, we\u2019ll test out an animation which changes our text from red and invisible to black and visible. In the code, we\u2019ll have to do two things:</p>
<ol><li>Create an animation with <code>@keyframes</code></li></ol>
<pre class="${"language-scss"}"><!-- HTML_TAG_START -->${`<code class="language-scss"><span class="token atrule"><span class="token rule">@keyframes</span> yourfirstanimation</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">from</span> <span class="token punctuation">&#123;</span>
    <span class="token property">opacity</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
    <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token selector">to </span><span class="token punctuation">&#123;</span>
    <span class="token property">opacity</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>
    <span class="token property">color</span><span class="token punctuation">:</span> black<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`}<!-- HTML_TAG_END --></pre>
<ol start="${"2"}"><li>Bind the animation to an element</li></ol>
<pre class="${"language-scss"}"><!-- HTML_TAG_START -->${`<code class="language-scss"><span class="token selector">.biography-title </span><span class="token punctuation">&#123;</span>
  <span class="token property">animation</span><span class="token punctuation">:</span> yourfirstanimation 5s forwards<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`}<!-- HTML_TAG_END --></pre>
<p>To break down the above code, we create an animation that has a <em>start point</em> (<code>0%</code>) and an <em>end point</em> (<code>100%</code>). At both of these points, we define CSS properties, such as color and opacity, seen above. When we bind the animation to an element, which is as simple as <code>animation: &lt;animation_name&gt; &lt;duration&gt; &lt;fill_mode&gt;</code>, CSS deals with all the inbetween and automatically creates a smooth transition! (Fill mode is the most complicated of these three properties, but for our purposes we will always be using <code>forwards</code>. For more information, visit <a href="${"https://developer.mozilla.org/en-US/docs/Web/CSS/animation-fill-mode"}" rel="${"nofollow"}">this page</a>.)</p>
<p>Altogether, this code creates this output:</p>
<pre class="${"language-scss"}"><!-- HTML_TAG_START -->${`<code class="language-scss"><span class="token selector">#about </span><span class="token punctuation">&#123;</span>
  <span class="token atrule"><span class="token rule">@keyframes</span> yourfirstanimation</span> <span class="token punctuation">&#123;</span>
    <span class="token selector">0% </span><span class="token punctuation">&#123;</span>
      <span class="token property">opacity</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
      <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token selector">100% </span><span class="token punctuation">&#123;</span>
      <span class="token property">opacity</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>
      <span class="token property">color</span><span class="token punctuation">:</span> black<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token selector">.biography-title </span><span class="token punctuation">&#123;</span>
    <span class="token property">animation</span><span class="token punctuation">:</span> yourfirstanimation 5s forwards<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`}<!-- HTML_TAG_END --></pre>
${validate_component(Image, "Image").$$render($$result, {
      src: "../images/blog/animate-hugo-academic/red.gif",
      alt: "An example transition, turning the font color to red over a 5 second duration."
    }, {}, {})}
<p>Of course, we don\u2019t want a 5 second animation, nor do we want our text to start off as red. A cleaner animation might leverage the power of CSS to modify an element\u2019s <em>position</em>. In our case, we want an element to <strong>slide in from the right side of the screen</strong>, and so we make a few tweaks to the code above. Let\u2019s make a new animation called <code>slide-from-right</code> which starts (at keyframe 0%) with our element 150% to the right of its original position (therefore off the screen) and ends (at keyframe 100%) with it at its original position. This involves the use of <code>translateX</code>, which you can read about <a href="${"https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function/translateX"}" rel="${"nofollow"}">here</a>.</p>
<pre class="${"language-scss"}"><!-- HTML_TAG_START -->${`<code class="language-scss"><span class="token atrule"><span class="token rule">@keyframes</span> slide-from-right</span> <span class="token punctuation">&#123;</span>
  <span class="token selector">0% </span><span class="token punctuation">&#123;</span>
    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateX</span><span class="token punctuation">(</span>150%<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token selector">100% </span><span class="token punctuation">&#123;</span>
    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateX</span><span class="token punctuation">(</span>0%<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token selector">.biography-title </span><span class="token punctuation">&#123;</span>
  <span class="token property">animation</span><span class="token punctuation">:</span> slide-from-right 1s forwards<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`}<!-- HTML_TAG_END --></pre>
${validate_component(Image, "Image").$$render($$result, {
      src: "../images/blog/animate-hugo-academic/slide-from-right.gif",
      alt: "A gif of the content sliding in from the right side of the page"
    }, {}, {})}
<p>There is one slight improvement we can make on the above transition. Specifically, we can call an <em>easing function</em> on our animation. <a href="${"https://developer.mozilla.org/en-US/docs/Web/CSS/easing-function"}" rel="${"nofollow"}">Easing functions</a> give a more natural feel to a transition\u2019s flow\u2014rather than our object flying in at a perfectly linear rate, we can add some personality by specifying its speed at different points in the transition. To find an easing function, visit <a href="${"https://easings.net/en#"}" rel="${"nofollow"}">easings.net</a>, which allows you to visualize all of the different ways to modify your transition\u2019s ease. (For this tutorial, I chose a clean-looking \u201C<em>easeInOutQuint</em>\u201C function, which looks like this: <code>cubic-bezier(0.83, 0, 0.17, 1)</code>.)</p>
<hr>
<h3 id="${"step-3b-dont-wait-to-delay"}"><a href="${"#step-3b-dont-wait-to-delay"}">Step 3B) Don\u2019t Wait to Delay</a></h3>
<p>We want our homepage to have more than just one title animation. We might also want to <strong>animate the paragraphs below it</strong>, with the same \u2019slide from right\u2019 transition we defined earlier. While doing this, we can add one property to our element to make the overall transition seem more fluid: <code>animation-delay</code>. As the name suggests, this property defines how long the browser should wait before it <em>begins</em> the transition you\u2019ve specified. Animating our <code>main-content</code> div is as simple as copying the above code and adding a 100 millisecond animation delay.</p>
<pre class="${"language-scss"}"><!-- HTML_TAG_START -->${`<code class="language-scss"><span class="token selector">.main-content </span><span class="token punctuation">&#123;</span>
  <span class="token property">animation</span><span class="token punctuation">:</span> slide-from-right 1s <span class="token function">cubic-bezier</span><span class="token punctuation">(</span>0.87<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0.13<span class="token punctuation">,</span> 1<span class="token punctuation">)</span> forwards<span class="token punctuation">;</span>
  <span class="token property">animation-delay</span><span class="token punctuation">:</span> 100ms<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`}<!-- HTML_TAG_END --></pre>
<p>In combination with above, this creates a transition that looks like this:</p>
${validate_component(Image, "Image").$$render($$result, {
      src: "../images/blog/animate-hugo-academic/double-slide.gif",
      alt: "A gif of two pieces of content sliding in, one after another (with a 100ms delay)"
    }, {}, {})}
<p>Nice! That looks clean. It looks like those two text blocks are racing to greet your new site visitor :)</p>
<hr>
<h3 id="${"step-3c-to-the-left"}"><a href="${"#step-3c-to-the-left"}">Step 3C) To the Left!</a></h3>
<p>Let\u2019s go ahead and replicate that \u2019slide in\u2019 transition for our profile on the left side of our webpage. As you could probably gather, this is as simple as copying the above code and changing the value in <code>translateX</code> from 150% to -150% (from just outside the right side of our webpage <a href="${"https://www.youtube.com/watch?v=2EwViQxSJJQ&feature=youtu.be&t=25"}" rel="${"nofollow"}">to the left!</a>). As above, we\u2019ll define this transition in a <code>@keyframes</code> rule and apply it to our CSS transition afterward.</p>
<pre class="${"language-scss"}"><!-- HTML_TAG_START -->${`<code class="language-scss"><span class="token atrule"><span class="token rule">@keyframes</span> slide-from-left</span> <span class="token punctuation">&#123;</span>
  <span class="token selector">0% </span><span class="token punctuation">&#123;</span>
    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateX</span><span class="token punctuation">(</span>-150%<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token selector">100% </span><span class="token punctuation">&#123;</span>
    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateX</span><span class="token punctuation">(</span>0%<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token selector">#profile </span><span class="token punctuation">&#123;</span>
  <span class="token property">animation</span><span class="token punctuation">:</span> slide-from-left 1s <span class="token function">cubic-bezier</span><span class="token punctuation">(</span>0.87<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0.13<span class="token punctuation">,</span> 1<span class="token punctuation">)</span> forwards<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`}<!-- HTML_TAG_END --></pre>
${validate_component(Image, "Image").$$render($$result, {
      src: "../images/blog/animate-hugo-academic/left-and-right.gif",
      alt: "Two paragraphs of content sliding in from opposite directions."
    }, {}, {})}
<h3 id="${"step-3d-finally-the-fade"}"><a href="${"#step-3d-finally-the-fade"}">Step 3D) Finally, the Fade</a></h3>
<p>The only thing not yet animated on our page are the \u2018interests\u2019 and \u2018education\u2019 content blocks. Of course, you might not want these on your homepage (my educational journey isn\u2019t yet formidable enough to warrant its own section on my homepage!). But for the sake of animating the homepage <em>as its configured by default</em>, let\u2019s go ahead and have those content blocks fade in <em>once the sliding transitions complete</em>.</p>
<p>If you\u2019ve been paying attention to the prior <code>@keyframes</code> rules, you might have guessed that the code would look like this:</p>
<pre class="${"language-scss"}"><!-- HTML_TAG_START -->${`<code class="language-scss"><span class="token atrule"><span class="token rule">@keyframes</span> fade-in</span> <span class="token punctuation">&#123;</span>
  <span class="token selector">0% </span><span class="token punctuation">&#123;</span>
    <span class="token property">opacity</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token selector">100% </span><span class="token punctuation">&#123;</span>
    <span class="token property">opacity</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`}<!-- HTML_TAG_END --></pre>
<p>\u2026 and you would be correct!</p>
<p>Now, we apply this <code>fade-in</code> rule to both our <code>interests-div</code> and our <code>education-div</code>, which we created in step 1. But notably, we want to wait to fade in each of these divs until <em>after our content has slid in from either side of the webpage.</em> And so, we\u2019ll once again use the <code>animation-delay</code> property. Because our slide-in animations take one second to complete, we can begin our fade-in animations after a one-second delay. To make the transition a little more visually appealling, we can also stagger them, so the <code>education-div</code> fades in half a second <em>after</em> <code>interests-div</code>.</p>
<pre class="${"language-scss"}"><!-- HTML_TAG_START -->${`<code class="language-scss"><span class="token selector">.interests-div </span><span class="token punctuation">&#123;</span>
  <span class="token property">opacity</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
  <span class="token property">animation</span><span class="token punctuation">:</span> fade-in 1s forwards<span class="token punctuation">;</span>
  <span class="token property">animation-delay</span><span class="token punctuation">:</span> 1s<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token selector">.education-div </span><span class="token punctuation">&#123;</span>
  <span class="token property">opacity</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
  <span class="token property">animation</span><span class="token punctuation">:</span> fade-in 1s forwards<span class="token punctuation">;</span>
  <span class="token property">animation-delay</span><span class="token punctuation">:</span> 1.5s<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`}<!-- HTML_TAG_END --></pre>
<p>Now, we have a final homepage that looks like this:</p>
${validate_component(Image, "Image").$$render($$result, {
      src: "../images/blog/animate-hugo-academic/final.gif",
      alt: "A GIF showing the final iteration of a homepage, with animations."
    }, {}, {})}
<p>To make our SCSS file more robust across different browsers, we can take our completed file and put it into the <a href="${"https://autoprefixer.github.io/"}" rel="${"nofollow"}">CSS Autoprefixer</a>. This adds additional lines of code to our CSS file so that all browsers render the same animations upon page load. Your completed SCSS file should look like <a href="${"https://github.com/connorrothschild/animate-hugo-academic/blob/master/assets/scss/custom.scss"}" rel="${"nofollow"}">this</a>.</p>
<h2 id="${"extending-animations"}"><a href="${"#extending-animations"}">Extending Animations</a></h2>
<p>This tutorial is meant to teach you the essentials of <em>how</em> to animate your homepage (for any Hugo site, not just Academic). Specifically, you should be able to 1) create and identify CSS elements via their classes and IDs, 2) target them using CSS, and 3) animate them using <code>@keyframes</code> rules. Although easier said then done, applying these three rules will go a long way in making your homepage much more appealling to new visitors.</p>
<p>The complete power of CSS animations is not covered in this tutorial. Further applications of animations could do <strong>much</strong> more than just animate an object\u2019s position. I leave that to you!</p>
<p>For those that are interested, <a href="${"https://connorrothschild.github.io/v2/"}" rel="${"nofollow"}">my old homepage</a> is chock-full of CSS properties which make it unique from most; some visitors are surprised to hear that my site is Hugo Academic at all!</p>
<p>For those interested, the code for my Hugo Academic personal site (now archived) can be found <a href="${"https://github.com/connorrothschild/v2"}" rel="${"nofollow"}">here</a>. I look forward to seeing your animated homepages!</p>`
  })}`;
});
var animateHugoAcademic = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  "default": Animate_hugo_academic,
  metadata: metadata$d
});
var metadata$c = {
  "layout": "blog",
  "title": "My First Package! Introducing tpltheme",
  "description": "Introducing {tpltheme}, a toolkit to create publication-ready plots in the style of the Texas Policy Lab.",
  "image": "introducing-tpltheme/header.png",
  "date": "2019-07-02",
  "archived": true
};
var Introducing_tpltheme = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign($$props, metadata$c), {}, {
    default: () => `<p>I\u2019ve spent the majority of the summer as an
<a href="${"https://www.texaspolicylab.org/profile/connor-rothschild/"}" rel="${"nofollow"}">intern</a> with
the Texas Policy Lab, working on primarily data science-related matters
such as data cleaning and visualization. Most recently, I sought to
create a custom theme in <code>ggplot2</code> for TPL.</p>
<p>The project was my first experience in developing my own R package.
Prior to this project, the most familiarity I had with packages were
from the <code>install.packages()</code> and <code>library()</code> commands.</p>
<p>Hadley Wickham\u2019s book <strong><a href="${"http://r-pkgs.had.co.nz/"}" rel="${"nofollow"}">R Packages</a></strong> was
enormously helpful in introducing package development to me. I ran into
(a lot of) issues in building the package, specifically encountering
problems related to local file paths and logo placement on plots.</p>
<p>Creating your own package is a great exercise in trial and error, and
taught me a lot about programming in R that I wouldn\u2019t have learned
otherwise. I was also struck by how remarkably easy it was to create
one\u2019s own package (seriously, it requires the same amount of clicks as
starting a new R project), and how thorough online resources were.</p>
<h2 id="${"inspiration"}"><a href="${"#inspiration"}">Inspiration</a></h2>
<p>The catalyst for creating this package was coming across the Urban
Institute\u2019s <a href="${"https://github.com/UrbanInstitute/urbnthemes"}" rel="${"nofollow"}">urbnthemes</a>
package on GitHub. I also gathered a lot of inspiration (and borrowed
some code) from <a href="${"https://github.com/jrnold/ggthemes"}" rel="${"nofollow"}">ggthemes</a> (Jeffrey
Arnold), <a href="${"https://github.com/bbc/bbplot"}" rel="${"nofollow"}">bbplot</a> (BBC News), and
<a href="${"https://github.com/hrbrmstr/hrbrthemes"}" rel="${"nofollow"}">hrbrthemes</a> (Bob Rudis). I was
impressed by the fact that these organizations were able to use R to
create publication-ready plots despite the fact that base ggplot figures
can look rather ugly (if we\u2019re being honest).</p>
<p>Because the organization I intern with is still in its infancy, I
thought it would be a perfect time to create a standardized theme for
figures made in the future. So long as future employees adopt the theme,
this package has the potential to create figures specific to our
publications, lending TPL organizational credibility and creating
cross-report consistency.</p>
<p>I thought a lot about some basic tenets of design, such as font
readability, text size, and color contrast. I learned a lot about visual
and aesthetic design I wouldn\u2019t know otherwise (Kieran Healy\u2019s section
on how graphs can deceive the reader\u2013intentionally or not\u2013opened my eyes
to a lot of important visual concepts.</p>
<h1 id="${"overview"}"><a href="${"#overview"}">Overview</a></h1>
<p>Here\u2019s an overview of some of the packages key features:</p>
<h2 id="${"installation-and-usage"}"><a href="${"#installation-and-usage"}">Installation and Usage</a></h2>
<p>You can install the package via GitHub:</p>
<pre class="${"language-r"}"><!-- HTML_TAG_START -->${`<code class="language-r">library<span class="token punctuation">(</span>ggplot2<span class="token punctuation">)</span>
library<span class="token punctuation">(</span>tidyverse<span class="token punctuation">)</span>

<span class="token comment">#devtools::install_github("connorrothschild/tpltheme")</span>
library<span class="token punctuation">(</span>tpltheme<span class="token punctuation">)</span></code>`}<!-- HTML_TAG_END --></pre>
<p>Always load <code>library(tpltheme)</code> <strong>after</strong> <code>library(ggplot2)</code> and/or
<code>library(tidyverse)</code>.</p>
<p>The package creates a standardized formats for plots to be used in
reports created by the Texas Policy Lab. It primarily relies on
<code>set_tpl_theme()</code>, which allows the user to specify whether the plot
theme should align with a standard plot (<code>style = &quot;print&quot;</code>), or one
specially created for plotting geographical data (<code>style = &quot;Texas&quot;</code>).
Calling <code>set_tpl_theme()</code> after <code>library(tpltheme)</code> does most of the
work for this package!</p>
<pre class="${"language-r"}"><!-- HTML_TAG_START -->${`<code class="language-r">set_tpl_theme<span class="token punctuation">(</span>font <span class="token operator">=</span> <span class="token string">'IBM Plex Sans'</span><span class="token punctuation">)</span>

ggplot<span class="token punctuation">(</span>iris<span class="token punctuation">,</span> aes<span class="token punctuation">(</span>x<span class="token operator">=</span>Species<span class="token punctuation">,</span> y<span class="token operator">=</span>Sepal.Width<span class="token punctuation">,</span> fill<span class="token operator">=</span>Species<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span>
    geom_bar<span class="token punctuation">(</span>stat<span class="token operator">=</span><span class="token string">"summary"</span><span class="token punctuation">,</span> fun.y<span class="token operator">=</span><span class="token string">"mean"</span><span class="token punctuation">,</span> show.legend <span class="token operator">=</span> <span class="token boolean">FALSE</span><span class="token punctuation">)</span> <span class="token operator">+</span>
    scale_y_continuous<span class="token punctuation">(</span>expand <span class="token operator">=</span> expand_scale<span class="token punctuation">(</span>mult <span class="token operator">=</span> c<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0.001</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span>
    labs<span class="token punctuation">(</span>x<span class="token operator">=</span><span class="token string">"Species"</span><span class="token punctuation">,</span> y<span class="token operator">=</span><span class="token string">"Mean Sepal Width (cm)"</span><span class="token punctuation">,</span> fill<span class="token operator">=</span><span class="token string">"Species"</span><span class="token punctuation">,</span> title<span class="token operator">=</span><span class="token string">"Iris Dataset"</span><span class="token punctuation">)</span></code>`}<!-- HTML_TAG_END --></pre>
${validate_component(Image, "Image").$$render($$result, {
      alt: "An example of a plot in the TPL theme.",
      src: "../images/blog/introducing-tpltheme/unnamed-chunk-3-1.png"
    }, {}, {})}
<h3 id="${"fonts"}"><a href="${"#fonts"}">Fonts</a></h3>
<p>The user is able to specify whether they want to use <em>Lato</em> or <em>Adobe
Caslon Pro</em> in their figures.</p>
<p>To ensure that these fonts are installed and registered, use
<code>tpl_font_test()</code>. If fonts are not properly installed, install both
fonts online and then run <code>tpl_font_install()</code>.</p>
<pre class="${"language-r"}"><!-- HTML_TAG_START -->${`<code class="language-r">tpl_font_test<span class="token punctuation">(</span><span class="token punctuation">)</span>
tpl_font_install<span class="token punctuation">(</span><span class="token punctuation">)</span></code>`}<!-- HTML_TAG_END --></pre>
<p>Here are some examples of sample TPL plots with different specifications
for <code>style</code> and <code>font</code>.</p>
<pre class="${"language-r"}"><!-- HTML_TAG_START -->${`<code class="language-r">set_tpl_theme<span class="token punctuation">(</span>style <span class="token operator">=</span> <span class="token string">"print"</span><span class="token punctuation">,</span> font <span class="token operator">=</span> <span class="token string">"lato"</span><span class="token punctuation">)</span>

ggplot<span class="token punctuation">(</span>iris<span class="token punctuation">,</span> aes<span class="token punctuation">(</span>x<span class="token operator">=</span>jitter<span class="token punctuation">(</span>Sepal.Width<span class="token punctuation">)</span><span class="token punctuation">,</span> y<span class="token operator">=</span>jitter<span class="token punctuation">(</span>Sepal.Length<span class="token punctuation">)</span><span class="token punctuation">,</span> col<span class="token operator">=</span>Species<span class="token punctuation">,</span> size <span class="token operator">=</span> Petal.Length<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span>
    geom_point<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span>
    labs<span class="token punctuation">(</span>x<span class="token operator">=</span><span class="token string">"Sepal Width (cm)"</span><span class="token punctuation">,</span> y<span class="token operator">=</span><span class="token string">"Sepal Length (cm)"</span><span class="token punctuation">,</span> col<span class="token operator">=</span><span class="token string">"Species"</span><span class="token punctuation">,</span> size <span class="token operator">=</span> <span class="token string">"Petal Length"</span><span class="token punctuation">,</span> title<span class="token operator">=</span><span class="token string">"Iris Dataset"</span><span class="token punctuation">)</span></code>`}<!-- HTML_TAG_END --></pre>
${validate_component(Image, "Image").$$render($$result, {
      alt: "An example of a plot in the TPL theme.",
      src: "../images/blog/introducing-tpltheme/unnamed-chunk-5-1.png"
    }, {}, {})}
<p>By specifying <code>style = &quot;Texas&quot;</code> within <code>set_tpl_theme</code>, the user may
also create Texas-specific plots.</p>
<pre class="${"language-r"}"><!-- HTML_TAG_START -->${`<code class="language-r">tx_vac <span class="token operator">&lt;-</span> readr<span class="token operator">::</span>read_csv<span class="token punctuation">(</span><span class="token string">"https://raw.githubusercontent.com/connorrothschild/tpltheme/master/data/tx_vac_example.csv"</span><span class="token punctuation">)</span>
set_tpl_theme<span class="token punctuation">(</span>style <span class="token operator">=</span> <span class="token string">"Texas"</span><span class="token punctuation">,</span> font <span class="token operator">=</span> <span class="token string">"adobe"</span><span class="token punctuation">)</span>

ggplot<span class="token punctuation">(</span>data <span class="token operator">=</span> tx_vac<span class="token punctuation">,</span> mapping <span class="token operator">=</span> aes<span class="token punctuation">(</span>x <span class="token operator">=</span> long<span class="token punctuation">,</span> y <span class="token operator">=</span> lat<span class="token punctuation">,</span> group <span class="token operator">=</span> group<span class="token punctuation">,</span> fill <span class="token operator">=</span> avgvac<span class="token operator">*</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span>
  coord_fixed<span class="token punctuation">(</span><span class="token number">1.3</span><span class="token punctuation">)</span> <span class="token operator">+</span>
  scale_fill_continuous<span class="token punctuation">(</span>limits <span class="token operator">=</span> c<span class="token punctuation">(</span><span class="token number">78.3</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span>
  geom_polygon<span class="token punctuation">(</span>color <span class="token operator">=</span> <span class="token string">"black"</span><span class="token punctuation">)</span> <span class="token operator">+</span>
  labs<span class="token punctuation">(</span>title <span class="token operator">=</span> <span class="token string">"Texas Vaccination Rate by County"</span><span class="token punctuation">,</span>
       subtitle <span class="token operator">=</span> <span class="token string">"Among Kindergarteners"</span><span class="token punctuation">,</span>
       fill <span class="token operator">=</span> <span class="token string">"Percent&#92;nVaccinated"</span><span class="token punctuation">,</span>
       caption <span class="token operator">=</span> <span class="token string">"Source: Texas DSHS"</span><span class="token punctuation">)</span></code>`}<!-- HTML_TAG_END --></pre>
${validate_component(Image, "Image").$$render($$result, {
      alt: "An example of a plot in the TPL theme.",
      src: "../images/blog/introducing-tpltheme/unnamed-chunk-6-1.png"
    }, {}, {})}
<p>And it also works for categorical variables:</p>
<pre class="${"language-r"}"><!-- HTML_TAG_START -->${`<code class="language-r">set_tpl_theme<span class="token punctuation">(</span>style <span class="token operator">=</span> <span class="token string">"Texas"</span><span class="token punctuation">,</span> font <span class="token operator">=</span> <span class="token string">"lato"</span><span class="token punctuation">)</span>

tx_vac <span class="token percent-operator operator">%>%</span>
  dplyr<span class="token operator">::</span>mutate<span class="token punctuation">(</span>cat <span class="token operator">=</span> factor<span class="token punctuation">(</span>dplyr<span class="token operator">::</span>case_when<span class="token punctuation">(</span>avgvac<span class="token operator">*</span><span class="token number">100</span> <span class="token operator">></span> <span class="token number">99</span> <span class="token operator">~</span> <span class="token string">"Great"</span><span class="token punctuation">,</span>
                         avgvac<span class="token operator">*</span><span class="token number">100</span> <span class="token operator">></span> <span class="token number">90</span> <span class="token operator">~</span> <span class="token string">"Average"</span><span class="token punctuation">,</span>
                         avgvac<span class="token operator">*</span><span class="token number">100</span> <span class="token operator">&lt;</span> <span class="token number">90</span> <span class="token operator">~</span> <span class="token string">"Bad"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token percent-operator operator">%>%</span>
  ggplot<span class="token punctuation">(</span>mapping <span class="token operator">=</span> aes<span class="token punctuation">(</span>x <span class="token operator">=</span> long<span class="token punctuation">,</span> y <span class="token operator">=</span> lat<span class="token punctuation">,</span> group <span class="token operator">=</span> group<span class="token punctuation">,</span> fill <span class="token operator">=</span> cat<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span>
  coord_fixed<span class="token punctuation">(</span><span class="token number">1.3</span><span class="token punctuation">)</span> <span class="token operator">+</span>
  geom_polygon<span class="token punctuation">(</span>color <span class="token operator">=</span> <span class="token string">"black"</span><span class="token punctuation">)</span> <span class="token operator">+</span>
  labs<span class="token punctuation">(</span>title <span class="token operator">=</span> <span class="token string">"Texas Vaccination Rate by County"</span><span class="token punctuation">,</span>
       subtitle <span class="token operator">=</span> <span class="token string">"Among Kindergarteners"</span><span class="token punctuation">,</span>
       fill <span class="token operator">=</span> <span class="token string">"Vaccination Rating"</span><span class="token punctuation">,</span>
       caption <span class="token operator">=</span> <span class="token string">"Source: Texas DSHS"</span><span class="token punctuation">)</span></code>`}<!-- HTML_TAG_END --></pre>
${validate_component(Image, "Image").$$render($$result, {
      alt: "An example of a plot in the TPL theme.",
      src: "../images/blog/introducing-tpltheme/unnamed-chunk-7-1.png"
    }, {}, {})}
<p>If the number of colors exceeds the number of colors in the TPL palette
(9), the function <code>tpl_color_pal()</code> will drop the TPL color palette and
return the greatest number of unique colors possible within the
RColorBrewer\u2019s \u201CPaired\u201D palette (for more information on the use of
RColorBrewer palettes, see <a href="${"https://bookdown.org/rdpeng/exdata/plotting-and-color-in-r.html#using-the-rcolorbrewer-palettes"}" rel="${"nofollow"}">this
chapter</a>).</p>
<pre class="${"language-r"}"><!-- HTML_TAG_START -->${`<code class="language-r">tx_vac <span class="token percent-operator operator">%>%</span>
  ggplot<span class="token punctuation">(</span>mapping <span class="token operator">=</span> aes<span class="token punctuation">(</span>x <span class="token operator">=</span> long<span class="token punctuation">,</span> y <span class="token operator">=</span> lat<span class="token punctuation">,</span> group <span class="token operator">=</span> group<span class="token punctuation">,</span> fill <span class="token operator">=</span> subregion<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span>
  coord_fixed<span class="token punctuation">(</span><span class="token number">1.3</span><span class="token punctuation">)</span> <span class="token operator">+</span>
  geom_polygon<span class="token punctuation">(</span>color <span class="token operator">=</span> <span class="token string">"black"</span><span class="token punctuation">,</span> show.legend <span class="token operator">=</span> <span class="token boolean">FALSE</span><span class="token punctuation">)</span> <span class="token operator">+</span>
  labs<span class="token punctuation">(</span>title <span class="token operator">=</span> <span class="token string">"Texas Counties"</span><span class="token punctuation">)</span></code>`}<!-- HTML_TAG_END --></pre>
${validate_component(Image, "Image").$$render($$result, {
      alt: "An example of a plot in the TPL theme.",
      src: "../images/blog/introducing-tpltheme/unnamed-chunk-8-1.png"
    }, {}, {})}
<pre class="${"language-r"}"><!-- HTML_TAG_START -->${`<code class="language-r"><span class="token comment"># default to print afterwards</span>
set_tpl_theme<span class="token punctuation">(</span>style <span class="token operator">=</span> <span class="token string">"print"</span><span class="token punctuation">)</span></code>`}<!-- HTML_TAG_END --></pre>
<h3 id="${"tpl-branding"}"><a href="${"#tpl-branding"}">TPL Branding</a></h3>
<h4 id="${"logo"}"><a href="${"#logo"}">Logo</a></h4>
<p>The user also has the option to include the TPL logo in single plots.
This may be preferred for those reports being made especially public, or
to serve as a pseudo-watermark in proprietary plots.</p>
<p>The user can specify the <code>position</code> of the logo as well as its <code>scale</code>.
The scale argument refers to the size of the logo object, with the
specified number corresponding to a multiplication with the normal logo
size. In other words, <code>scale = 2</code> will <em>double</em> the size of the logo.
The logo defaults to 1/7th of the size of the plot.</p>
<pre class="${"language-r"}"><!-- HTML_TAG_START -->${`<code class="language-r">plot <span class="token operator">&lt;-</span> ggplot<span class="token punctuation">(</span>iris<span class="token punctuation">,</span> aes<span class="token punctuation">(</span>x<span class="token operator">=</span>Species<span class="token punctuation">,</span> y<span class="token operator">=</span>Sepal.Width<span class="token punctuation">,</span> fill<span class="token operator">=</span>Species<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span>
    geom_bar<span class="token punctuation">(</span>stat<span class="token operator">=</span><span class="token string">"summary"</span><span class="token punctuation">,</span> fun.y<span class="token operator">=</span><span class="token string">"mean"</span><span class="token punctuation">,</span> show.legend <span class="token operator">=</span> <span class="token boolean">FALSE</span><span class="token punctuation">)</span> <span class="token operator">+</span>
    scale_y_continuous<span class="token punctuation">(</span>expand <span class="token operator">=</span> expand_scale<span class="token punctuation">(</span>mult <span class="token operator">=</span> c<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0.001</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span>
    labs<span class="token punctuation">(</span>x<span class="token operator">=</span><span class="token string">"Species"</span><span class="token punctuation">,</span> y<span class="token operator">=</span><span class="token string">"Mean Sepal Width (cm)"</span><span class="token punctuation">,</span> fill<span class="token operator">=</span><span class="token string">"Species"</span><span class="token punctuation">,</span> title<span class="token operator">=</span><span class="token string">"Iris Dataset"</span><span class="token punctuation">)</span>

add_tpl_logo<span class="token punctuation">(</span>plot<span class="token punctuation">,</span> position <span class="token operator">=</span> <span class="token string">"top right"</span><span class="token punctuation">,</span> scale <span class="token operator">=</span> <span class="token number">1.5</span><span class="token punctuation">)</span></code>`}<!-- HTML_TAG_END --></pre>
${validate_component(Image, "Image").$$render($$result, {
      alt: "An example of a plot in the TPL theme.",
      src: "../images/blog/introducing-tpltheme/unnamed-chunk-9-1.png"
    }, {}, {})}
<h4 id="${"logo-text"}"><a href="${"#logo-text"}">Logo text</a></h4>
<p>There may be some instances when an all-out logo is not warranted or
preferred. If that is the case and the user would still like to
watermark their figures, they can use the function <code>add_tpl_logo_text()</code>
to add text to an existing plot object:</p>
<pre class="${"language-r"}"><!-- HTML_TAG_START -->${`<code class="language-r">plot <span class="token operator">&lt;-</span> ggplot<span class="token punctuation">(</span>iris<span class="token punctuation">,</span> aes<span class="token punctuation">(</span>x<span class="token operator">=</span>jitter<span class="token punctuation">(</span>Sepal.Width<span class="token punctuation">)</span><span class="token punctuation">,</span> y<span class="token operator">=</span>jitter<span class="token punctuation">(</span>Sepal.Length<span class="token punctuation">)</span><span class="token punctuation">,</span> col<span class="token operator">=</span>Species<span class="token punctuation">,</span> size <span class="token operator">=</span> Petal.Length<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span>
    geom_point<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span>
    labs<span class="token punctuation">(</span>x<span class="token operator">=</span><span class="token string">"Sepal Width (cm)"</span><span class="token punctuation">,</span> y<span class="token operator">=</span><span class="token string">"Sepal Length (cm)"</span><span class="token punctuation">,</span> col<span class="token operator">=</span><span class="token string">"Species"</span><span class="token punctuation">,</span> size <span class="token operator">=</span> <span class="token string">"Petal Length"</span><span class="token punctuation">,</span> title<span class="token operator">=</span><span class="token string">"Iris Dataset"</span><span class="token punctuation">)</span>

add_tpl_logo_text<span class="token punctuation">(</span>plot<span class="token punctuation">)</span></code>`}<!-- HTML_TAG_END --></pre>
${validate_component(Image, "Image").$$render($$result, {
      alt: "An example of a plot in the TPL theme.",
      src: "../images/blog/introducing-tpltheme/unnamed-chunk-10-1.png"
    }, {}, {})}
<p>The user may also need to specify <code>align</code>, which moves the plot
horizontally across the bottom of the page.</p>
<pre class="${"language-r"}"><!-- HTML_TAG_START -->${`<code class="language-r">plot <span class="token operator">&lt;-</span> ggplot<span class="token punctuation">(</span>iris<span class="token punctuation">,</span> aes<span class="token punctuation">(</span>x<span class="token operator">=</span>Species<span class="token punctuation">,</span> y<span class="token operator">=</span>Sepal.Width<span class="token punctuation">,</span> fill<span class="token operator">=</span>Species<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span>
    geom_boxplot<span class="token punctuation">(</span>show.legend <span class="token operator">=</span> <span class="token boolean">FALSE</span><span class="token punctuation">)</span> <span class="token operator">+</span>
    labs<span class="token punctuation">(</span>x<span class="token operator">=</span><span class="token string">"Species"</span><span class="token punctuation">,</span> y<span class="token operator">=</span><span class="token string">"Sepal Width (cm)"</span><span class="token punctuation">,</span> fill<span class="token operator">=</span><span class="token string">"Species"</span><span class="token punctuation">,</span> title<span class="token operator">=</span><span class="token string">"Iris Dataset"</span><span class="token punctuation">,</span> subtitle <span class="token operator">=</span><span class="token string">"When specifying align = 1"</span><span class="token punctuation">)</span>

add_tpl_logo_text<span class="token punctuation">(</span>plot<span class="token punctuation">,</span> align <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span></code>`}<!-- HTML_TAG_END --></pre>
${validate_component(Image, "Image").$$render($$result, {
      alt: "An example of a plot in the TPL theme.",
      src: "../images/blog/introducing-tpltheme/unnamed-chunk-11-1.png"
    }, {}, {})}
<h3 id="${"additional-functions"}"><a href="${"#additional-functions"}">Additional functions</a></h3>
<h4 id="${"drop-axes"}"><a href="${"#drop-axes"}">Drop axes</a></h4>
<p>In the event that the user wishes to drop an axis, they may do so with
<code>drop_axis()</code>. The function may drop any combination of axes depending
on the user\u2019s input (<code>drop = &quot;x&quot;</code>, <code>drop = &quot;y&quot;</code>, <code>drop = &quot;both&quot;</code>,
<code>drop = &quot;neither&quot;</code>).</p>
<p>Unlike <code>add_tpl_logo()</code>, <code>drop_axis()</code> should be <em>added</em> to an existing
plot object:</p>
<pre class="${"language-r"}"><!-- HTML_TAG_START -->${`<code class="language-r">ggplot<span class="token punctuation">(</span>iris<span class="token punctuation">,</span> aes<span class="token punctuation">(</span>x<span class="token operator">=</span>jitter<span class="token punctuation">(</span>Sepal.Width<span class="token punctuation">)</span><span class="token punctuation">,</span> y<span class="token operator">=</span>jitter<span class="token punctuation">(</span>Sepal.Length<span class="token punctuation">)</span><span class="token punctuation">,</span> col<span class="token operator">=</span>Species<span class="token punctuation">,</span> size <span class="token operator">=</span> Petal.Length<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span>
    geom_point<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span>
    labs<span class="token punctuation">(</span>x<span class="token operator">=</span><span class="token string">"Sepal Width (cm)"</span><span class="token punctuation">,</span> y<span class="token operator">=</span><span class="token string">"Sepal Length (cm)"</span><span class="token punctuation">,</span> col<span class="token operator">=</span><span class="token string">"Species"</span><span class="token punctuation">,</span> size <span class="token operator">=</span> <span class="token string">"Petal Length"</span><span class="token punctuation">,</span> title<span class="token operator">=</span><span class="token string">"Iris Dataset"</span><span class="token punctuation">)</span> <span class="token operator">+</span>
    drop_axis<span class="token punctuation">(</span>axis <span class="token operator">=</span> <span class="token string">"y"</span><span class="token punctuation">)</span></code>`}<!-- HTML_TAG_END --></pre>
${validate_component(Image, "Image").$$render($$result, {
      alt: "An example of a plot in the TPL theme.",
      src: "../images/blog/introducing-tpltheme/unnamed-chunk-12-1.png"
    }, {}, {})}
<h3 id="${"colors"}"><a href="${"#colors"}">Colors</a></h3>
<p>I also put a lot of time into creating a color palette which was both
aesthetically pleasing and accessible to color-blind viewers. This was
somewhat difficult because there are <a href="${"https://nei.nih.gov/learn-about-eye-health/eye-conditions-and-diseases/color-blindness"}" rel="${"nofollow"}">quite a few types of
colorblindness</a>.
Thankfully, my boss is colorblind, making test cases a lot more
accessible!</p>
<p>The function <code>view_palette</code> plots base color palettes included in
<code>tpltheme</code>. All TPL color palettes are led by the notation
<code>palette_tpl_*</code> and therefore can be easily autocompleted within
RStudio.</p>
<pre class="${"language-r"}"><!-- HTML_TAG_START -->${`<code class="language-r">p1 <span class="token operator">&lt;-</span> view_palette<span class="token punctuation">(</span>palette <span class="token operator">=</span> palette_tpl_main<span class="token punctuation">)</span> <span class="token operator">+</span> ggtitle<span class="token punctuation">(</span><span class="token string">"Categorical"</span><span class="token punctuation">)</span>
p2 <span class="token operator">&lt;-</span> view_palette<span class="token punctuation">(</span>palette <span class="token operator">=</span> palette_tpl_diverging<span class="token punctuation">)</span> <span class="token operator">+</span> ggtitle<span class="token punctuation">(</span><span class="token string">"Diverging"</span><span class="token punctuation">)</span>
p3 <span class="token operator">&lt;-</span> view_palette<span class="token punctuation">(</span>palette <span class="token operator">=</span> palette_tpl_sequential<span class="token punctuation">)</span> <span class="token operator">+</span> ggtitle<span class="token punctuation">(</span><span class="token string">"Sequential"</span><span class="token punctuation">)</span>

gridExtra<span class="token operator">::</span>grid.arrange<span class="token punctuation">(</span>p1<span class="token punctuation">,</span> p2<span class="token punctuation">,</span> p3<span class="token punctuation">,</span> nrow <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span></code>`}<!-- HTML_TAG_END --></pre>
${validate_component(Image, "Image").$$render($$result, {
      alt: "An example of a plot in the TPL theme.",
      src: "../images/blog/introducing-tpltheme/unnamed-chunk-13-1.png"
    }, {}, {})}
<p>These palettes were created using <a href="${"http://colorbrewer2.org"}" rel="${"nofollow"}">http://colorbrewer2.org</a> and
<a href="${"http://coloors.co"}" rel="${"nofollow"}">http://coloors.co</a> and are colorblind friendly.</p>
<p>The diverging and sequential color palettes are from
<a href="${"http://colorbrewer2.org"}" rel="${"nofollow"}">http://colorbrewer2.org</a> and the categorical palette is composed of a
variety of colors from <a href="${"https://coolors.co/"}" rel="${"nofollow"}">https://coolors.co/</a> and the TPL website.</p>
<p>In action, the color palette looks like this:</p>
<pre class="${"language-r"}"><!-- HTML_TAG_START -->${`<code class="language-r">normal <span class="token operator">&lt;-</span> diamonds <span class="token percent-operator operator">%>%</span>
  group_by<span class="token punctuation">(</span>clarity<span class="token punctuation">)</span> <span class="token percent-operator operator">%>%</span>
  summarise<span class="token punctuation">(</span>price <span class="token operator">=</span> mean<span class="token punctuation">(</span>price<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token percent-operator operator">%>%</span>
  mutate<span class="token punctuation">(</span>clarity <span class="token operator">=</span> forcats<span class="token operator">::</span>fct_reorder<span class="token punctuation">(</span>clarity<span class="token punctuation">,</span> price<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token percent-operator operator">%>%</span>
  ggplot<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span>
  geom_col<span class="token punctuation">(</span>aes<span class="token punctuation">(</span>x <span class="token operator">=</span> clarity<span class="token punctuation">,</span> y <span class="token operator">=</span> price<span class="token punctuation">,</span> fill <span class="token operator">=</span> clarity<span class="token punctuation">)</span><span class="token punctuation">,</span> show.legend <span class="token operator">=</span> <span class="token boolean">FALSE</span><span class="token punctuation">)</span> <span class="token operator">+</span>
  labs<span class="token punctuation">(</span>title <span class="token operator">=</span> <span class="token string">"TPL Color Palette"</span><span class="token punctuation">,</span>
       subtitle <span class="token operator">=</span> <span class="token string">"in action"</span><span class="token punctuation">,</span>
       x <span class="token operator">=</span> <span class="token string">"Clarity"</span><span class="token punctuation">,</span>
       y <span class="token operator">=</span> <span class="token string">"Price"</span><span class="token punctuation">,</span>
       fill <span class="token operator">=</span> element_blank<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span>
  theme<span class="token punctuation">(</span>axis.text.x <span class="token operator">=</span> element_text<span class="token punctuation">(</span>angle <span class="token operator">=</span> <span class="token number">45</span><span class="token punctuation">,</span> hjust <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span>
  coord_flip<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span>
  scale_fill_discrete<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span>
  scale_y_continuous<span class="token punctuation">(</span>expand <span class="token operator">=</span> expand_scale<span class="token punctuation">(</span>mult <span class="token operator">=</span> c<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0.001</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span>
  drop_axis<span class="token punctuation">(</span>axis <span class="token operator">=</span> <span class="token string">"x"</span><span class="token punctuation">)</span>

reversed <span class="token operator">&lt;-</span> normal <span class="token operator">+</span>
  labs<span class="token punctuation">(</span>subtitle <span class="token operator">=</span> <span class="token string">"(reversed)"</span><span class="token punctuation">)</span> <span class="token operator">+</span>
  scale_fill_discrete<span class="token punctuation">(</span>reverse <span class="token operator">=</span> <span class="token boolean">TRUE</span><span class="token punctuation">)</span>

gridExtra<span class="token operator">::</span>grid.arrange<span class="token punctuation">(</span>normal<span class="token punctuation">,</span> reversed<span class="token punctuation">)</span></code>`}<!-- HTML_TAG_END --></pre>
${validate_component(Image, "Image").$$render($$result, {
      alt: "An example of a plot in the TPL theme.",
      src: "../images/blog/introducing-tpltheme/unnamed-chunk-14-1.png"
    }, {}, {})}
<p>The user may specify the color palette in the <code>scale_fill_*</code> or
<code>scale_color_*</code> functions in a ggplot call. Specifically, the user can
specify the <code>palette</code> (categorical, diverging, sequential) and whether
the palette should be reversed.</p>
<pre class="${"language-r"}"><!-- HTML_TAG_START -->${`<code class="language-r">set_tpl_theme<span class="token punctuation">(</span>style <span class="token operator">=</span> <span class="token string">"print"</span><span class="token punctuation">,</span> font <span class="token operator">=</span> <span class="token string">"lato"</span><span class="token punctuation">)</span>
normal <span class="token operator">&lt;-</span> ggplot<span class="token punctuation">(</span>diamonds<span class="token punctuation">)</span> <span class="token operator">+</span>
  geom_bar<span class="token punctuation">(</span>aes<span class="token punctuation">(</span>x <span class="token operator">=</span> cut<span class="token punctuation">,</span> fill <span class="token operator">=</span> clarity<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span>
  labs<span class="token punctuation">(</span>title <span class="token operator">=</span> <span class="token string">"TPL Color Palette"</span><span class="token punctuation">,</span>
       subtitle <span class="token operator">=</span> <span class="token string">"On sample data"</span><span class="token punctuation">,</span>
       x <span class="token operator">=</span> <span class="token string">"Cut"</span><span class="token punctuation">,</span>
       y <span class="token operator">=</span> <span class="token string">"Count"</span><span class="token punctuation">,</span>
       fill <span class="token operator">=</span> <span class="token string">"Clarity"</span><span class="token punctuation">)</span> <span class="token operator">+</span>
  scale_y_continuous<span class="token punctuation">(</span>expand <span class="token operator">=</span> expand_scale<span class="token punctuation">(</span>mult <span class="token operator">=</span> c<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0.001</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span>
  theme<span class="token punctuation">(</span>axis.text.x <span class="token operator">=</span> element_text<span class="token punctuation">(</span>angle <span class="token operator">=</span> <span class="token number">45</span><span class="token punctuation">,</span> hjust <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

reversed <span class="token operator">&lt;-</span> normal <span class="token operator">+</span>
  labs<span class="token punctuation">(</span>subtitle <span class="token operator">=</span> <span class="token string">"(reversed)"</span><span class="token punctuation">)</span> <span class="token operator">+</span>
  scale_fill_discrete<span class="token punctuation">(</span>reverse <span class="token operator">=</span> <span class="token boolean">TRUE</span><span class="token punctuation">)</span>

gridExtra<span class="token operator">::</span>grid.arrange<span class="token punctuation">(</span>normal<span class="token punctuation">,</span> reversed<span class="token punctuation">,</span> nrow <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span></code>`}<!-- HTML_TAG_END --></pre>
${validate_component(Image, "Image").$$render($$result, {
      alt: "An example of a plot in the TPL theme.",
      src: "../images/blog/introducing-tpltheme/unnamed-chunk-15-1.png"
    }, {}, {})}
<pre class="${"language-r"}"><!-- HTML_TAG_START -->${`<code class="language-r">data <span class="token operator">&lt;-</span> gapminder<span class="token operator">::</span>gapminder <span class="token percent-operator operator">%>%</span>
  dplyr<span class="token operator">::</span>filter<span class="token punctuation">(</span>gapminder<span class="token operator">::</span>gapminder<span class="token operator">$</span>country <span class="token percent-operator operator">%in%</span> c<span class="token punctuation">(</span><span class="token string">"France"</span><span class="token punctuation">,</span> <span class="token string">"Germany"</span><span class="token punctuation">,</span> <span class="token string">"Ireland"</span><span class="token punctuation">,</span> <span class="token string">"Italy"</span><span class="token punctuation">,</span> <span class="token string">"Japan"</span><span class="token punctuation">,</span> <span class="token string">"Norway"</span><span class="token punctuation">,</span> <span class="token string">"Mexico"</span><span class="token punctuation">,</span> <span class="token string">"United States"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token percent-operator operator">%>%</span>
  dplyr<span class="token operator">::</span>mutate<span class="token punctuation">(</span>year <span class="token operator">=</span> as.Date<span class="token punctuation">(</span>paste<span class="token punctuation">(</span>year<span class="token punctuation">,</span> <span class="token string">"-01-01"</span><span class="token punctuation">,</span> sep <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">,</span> format<span class="token operator">=</span><span class="token string">'%Y-%b-%d'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

ggplot<span class="token punctuation">(</span>data <span class="token operator">=</span> data<span class="token punctuation">,</span> aes<span class="token punctuation">(</span>x <span class="token operator">=</span> year<span class="token punctuation">,</span> y <span class="token operator">=</span> gdpPercap<span class="token punctuation">,</span> fill <span class="token operator">=</span> country<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span>
  geom_area<span class="token punctuation">(</span>alpha <span class="token operator">=</span> <span class="token number">0.8</span><span class="token punctuation">)</span> <span class="token operator">+</span>
  scale_x_date<span class="token punctuation">(</span>expand <span class="token operator">=</span> c<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span>
  scale_y_continuous<span class="token punctuation">(</span>expand <span class="token operator">=</span> c<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> labels <span class="token operator">=</span> scales<span class="token operator">::</span>dollar<span class="token punctuation">)</span> <span class="token operator">+</span>
  labs<span class="token punctuation">(</span>title <span class="token operator">=</span> <span class="token string">"GDP Per Capita Over Time"</span><span class="token punctuation">,</span>
       subtitle <span class="token operator">=</span> <span class="token string">"Using the TPL Color Palette"</span><span class="token punctuation">,</span>
       x <span class="token operator">=</span> element_blank<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
       y <span class="token operator">=</span> <span class="token string">"GDP Per Capita"</span><span class="token punctuation">,</span>
       fill <span class="token operator">=</span> <span class="token string">"Country"</span><span class="token punctuation">)</span> <span class="token operator">+</span>
  theme<span class="token punctuation">(</span>axis.text.x <span class="token operator">=</span> element_text<span class="token punctuation">(</span>angle <span class="token operator">=</span> <span class="token number">45</span><span class="token punctuation">,</span> hjust <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code>`}<!-- HTML_TAG_END --></pre>
${validate_component(Image, "Image").$$render($$result, {
      alt: "An example of a plot in the TPL theme.",
      src: "../images/blog/introducing-tpltheme/unnamed-chunk-16-1.png"
    }, {}, {})}
<h3 id="${"restore-defaults"}"><a href="${"#restore-defaults"}">Restore Defaults</a></h3>
<p>By calling <code>undo_tpl_theme</code>, you are able to remove TPL-specific theme
settings and restores to ggplot defaults (but why would you want to do
that?).</p>
<pre class="${"language-r"}"><!-- HTML_TAG_START -->${`<code class="language-r">undo_tpl_theme<span class="token punctuation">(</span><span class="token punctuation">)</span>

ggplot<span class="token punctuation">(</span>iris<span class="token punctuation">,</span> aes<span class="token punctuation">(</span>x<span class="token operator">=</span>jitter<span class="token punctuation">(</span>Sepal.Width<span class="token punctuation">)</span><span class="token punctuation">,</span> y<span class="token operator">=</span>jitter<span class="token punctuation">(</span>Sepal.Length<span class="token punctuation">)</span><span class="token punctuation">,</span> col<span class="token operator">=</span>Species<span class="token punctuation">,</span> size <span class="token operator">=</span> Petal.Length<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span>
    geom_point<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span>
    labs<span class="token punctuation">(</span>x<span class="token operator">=</span><span class="token string">"Sepal Width (cm)"</span><span class="token punctuation">,</span> y<span class="token operator">=</span><span class="token string">"Sepal Length (cm)"</span><span class="token punctuation">,</span> col<span class="token operator">=</span><span class="token string">"Species"</span><span class="token punctuation">,</span> size <span class="token operator">=</span> <span class="token string">"Petal Length"</span><span class="token punctuation">,</span> title<span class="token operator">=</span><span class="token string">"Iris Dataset"</span><span class="token punctuation">)</span></code>`}<!-- HTML_TAG_END --></pre>
<p>This results in the following plot:</p>
${validate_component(Image, "Image").$$render($$result, {
      alt: "An example of a plot in the TPL theme.",
      src: "../images/blog/introducing-tpltheme/unnamed-chunk-17-1.png"
    }, {}, {})}
<p>To restore the TPL theme, simply call <code>set_tpl_theme()</code>:</p>
<pre class="${"language-r"}"><!-- HTML_TAG_START -->${`<code class="language-r">set_tpl_theme<span class="token punctuation">(</span><span class="token punctuation">)</span>
last_plot<span class="token punctuation">(</span><span class="token punctuation">)</span></code>`}<!-- HTML_TAG_END --></pre>
${validate_component(Image, "Image").$$render($$result, {
      alt: "An example of a plot in the TPL theme.",
      src: "../images/blog/introducing-tpltheme/unnamed-chunk-18-1.png"
    }, {}, {})}`
  })}`;
});
var introducingTpltheme = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  "default": Introducing_tpltheme,
  metadata: metadata$c
});
var metadata$b = {
  "layout": "blog",
  "title": "Color in Data Visualization: Less How, More Why",
  "description": "An overview of the use of color in data visualization",
  "image": "color-in-data-vis/header.png",
  "date": "2020-01-02"
};
var Color_in_data_vis = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign($$props, metadata$b), {}, {
    default: () => `<p>If our use of color in visualizations follows the <a href="${"https://en.wikipedia.org/wiki/Five_Ws"}" rel="${"nofollow"}">Five Ws (and one H)</a>, we\u2019re spending too much time on <em>how</em>, and not enough time on <em>why</em>. Color is too often seen as a tool to make pretty pictures, when it should be used to inform our audiences.</p>
<p>For one example, look at this \u201CColor Emotion Guide\u201D from marketing site <a href="${"https://www.tapclicks.com/resources/blog/the-influence-of-color-in-data-visualization/"}" rel="${"nofollow"}">TapClicks</a> (one of the top results when you Google \u201Ccolor in data visualization\u201D \u{1F9D0}).</p>
${validate_component(Image, "Image").$$render($$result, {
      alt: "Color guide that doesn\u2019t make any sense. Random emotions are assigned to different brand colors, with no apparent pattern.",
      src: "../images/blog/color-in-data-vis/color-emotion-guide-lol.jpg"
    }, {}, {})}
<p>The implicit suggestion here is that we should use color\u2014whenever and however we can\u2014to capture some form of emotion. Not only is this specific categorization rather odd (Monster energy drinks are peaceful, Virgin Mobile embodies \u201Cbold excitement\u201D, and Harley Davidson motorcycles just scream \u201Ccheerful friendliness\u201D \u{1F929}), it leads novice practitioners to believe that color should be used just for the sake of using color.</p>
<p>Examples of gratuitous color use abound.</p>
${validate_component(Image, "Image").$$render($$result, {
      alt: "A pie chart with far too many colors.",
      src: "../images/blog/color-in-data-vis/bad-color-use-1.jpg"
    }, {}, {})}
${validate_component(Image, "Image").$$render($$result, {
      alt: "Multiple pie charts, all with poor color usage.",
      src: "../images/blog/color-in-data-vis/bad-color-use-2.jpg"
    }, {}, {})}
<p>These examples illustrate my thesis: <strong>Too often, we ask <em>how</em> we can use color in our visualizations when we should be asking <em>why</em> we are using it.</strong></p>
<p>Some combination of 1) default software settings, 2) an obsession with pretty color palettes, and 3) a lack of emphasis on careful color consideration has led to a sloppy use of color in some of our most popular data visualizations.</p>
<p>One of the most common errors I see is the <em>overuse</em> of color. In the charts above, for example, it\u2019s evident that there are far too many colors, with no apparent reason for the</p>
<p>Often times, those creating visualizations will argue that they <em>must</em> include a 14 colors in their chart because the dataset has 14 data points of interest! It doesn\u2019t help that the default settings of some of the most popular data viz tools (such as Excel) by default map categorical variables to colors.</p>
<p>The reality is, however, that if you need more than a handful of colors in your chart, you can probably present your data in a different way. Take <a href="${"https://blog.datawrapper.de/colors/"}" rel="${"nofollow"}">this example</a> from Datawrapper:</p>
${validate_component(Image, "Image").$$render($$result, {
      alt: "An example of a poor and better visualization. One has many colors sequentially, while the other breaks up each color into its own bar for clarity's sake.",
      src: "../images/blog/color-in-data-vis/bad-and-better.jpg"
    }, {}, {})}
<p>The takeaway? When you emphasize <em>everything</em>, you end up emphasizing <em>nothing</em>. That\u2019s why its important that we stop uncritically asking <em>how</em> we can use color in our charts.</p>
<p>A data visualization is nothing more than a pretty picture if it does not <em>inform</em> its viewer. And if your chart presents 14 different data points all mapped to different colors, what kind of story is it telling? I really like this from Apple\u2019s data visualization practitioner <a href="${"https://medium.com/@Elijah_Meeks/viz-palette-for-data-visualization-color-8e678d996077?"}" rel="${"nofollow"}">Elijah Meeks</a>:</p>
<blockquote><p>Rather than trying to find that impossible 20-color palette, stop using color when you have so many dimensions. It\u2019s indistinguishable, it\u2019s confusing and you\u2019re just off-loading the complexity and decision-making to your reader.</p></blockquote>
<p>That\u2019s why color should be used <em>more sparingly</em> and <em>more thoughtfully</em>. Color is one of the most important parts of our visualizations, yet their current use is far too often gratuitous and overwhelming.</p>
<h2 id="${"so-how-should-you-use-color"}"><a href="${"#so-how-should-you-use-color"}">So, how <em>should</em> you use color?</a></h2>
<p>Color is not the enemy. Rather, the (far too frequent) abuse and misuse of color is. So, how can you use color correctly? It depends on the purpose of your visualization, and, as a corollary, the purpose of color. You should ask: <strong>why am I using color?</strong></p>
<h3 id="${"1-color-to-differentiate"}"><a href="${"#1-color-to-differentiate"}">1) Color to differentiate</a></h3>
<p>One use of color is to draw attention to a data point of interest. This kind of color use would fall into the category of <a href="${"https://www.oreilly.com/library/view/designing-data-visualizations/9781449314774/ch01.html"}" rel="${"nofollow"}">explanatory visualization</a>, as opposed to its exploratory counterpart. If you\u2019ve already explored, analyzed, and probed your data, you now need to deliver those insights to someone else (a supervisor, a client, or a curious friend). It would be a waste of time to present to them all of the exploratory work you did, which is why your presentation should make use of color to focus on your findings.</p>
<p>As practitioner Andy Kirk <a href="${"https://www.visualisingdata.com/2015/01/make-grey-best-friend/"}" rel="${"nofollow"}">puts it</a>, visualization practitioners in this stage of presentation should <strong>make grey their best friend</strong>. This is because the <em>absence of color</em>, not the excessive use of it, helps paint a picture and tell a story. By using grey as the primary color in a visualization, we automatically draw our viewers\u2019 eyes to <span style="${"background: #FF9B9B; color: black; padding: 3px; border-radius: 3px; box-decoration-break: clone;"}">whatever isn\u2019t grey</span>. That way, if we are interested in telling a story about <em>one data point</em>, we can do so quite easily.</p>
<p>Here\u2019s a quick <a href="${"https://github.com/connorrothschild/bbdata"}" rel="${"nofollow"}">example</a> I made in R a while back:</p>
${validate_component(Image, "Image").$$render($$result, {
      alt: "A barplot showcasing vaccination by county in Texas. All bars are grey except the lowest bar, representing Terry County (78% vaccinated), which is highlighted in a royal blue.",
      src: "../images/blog/color-in-data-vis/color-emphasized.png"
    }, {}, {})}
<p>The point of the visualization is not to show our audience the kindergarten vaccination rate of <em>every county</em> in Texas. It is instead to highlight the lowest rate\u2014Terry County. This visualization leverages the grey fill of every other bar to immediately draw the audiences\u2019 eyes to Terry County. Because we used only two colors, we can also highlight text in the subtitle to make the connection even clearer for our audience. Color\u2014if used prudently\u2014makes our visualizations more digestible and more informative.</p>
<p>Now, imagine if I visualized that same data in the following way:</p>
${validate_component(Image, "Image").$$render($$result, {
      alt: "A barplot showcasing vaccination by county in Texas. All bars are grey.",
      src: "../images/blog/color-in-data-vis/all-grey.jpg"
    }, {}, {})}
<p>Or, even worse:</p>
${validate_component(Image, "Image").$$render($$result, {
      alt: "A barplot showcasing vaccination by county in Texas. All bars are separate colors, with no pattern present.",
      src: "../images/blog/color-in-data-vis/all-color.jpg"
    }, {}, {})}
<p>After seeing those eyesores, aren\u2019t you thankful that we used color sparingly in the initial plot?</p>
<p>Perhaps you\u2019re interested in a county-by-county overview of 2016 election results. Although you might be tempted to code all counties according to their Trump/Clinton split, that\u2019s prettier than it is insightful. What if, instead, we focused on those notable counties which flipped from one party to another between 2012 and 2016? From Kieran Healy\u2019s book <a href="${"https://socviz.co/refineplots.html#use-color-to-your-advantage"}" rel="${"nofollow"}">Data Visualization</a>:</p>
${validate_component(Image, "Image").$$render($$result, {
      alt: "A scatterplot where each point represents a county's voting between 2016 and 2020. Highlighted counties 'flipped' between 2016 and 2020, with Republicans highlighted in red and Democrats in blue.",
      src: "../images/blog/color-in-data-vis/flipping-points-color.jpg"
    }, {}, {})}
<p>As we can see here, more counties flipped from majority-Democratic in 2012 to majority-Republican in 2016 than vice-versa. Because we\u2019re focusing on only a fraction of all of the data points, we can also observe trends: The majority of counties that flipped had a small black population. No county that had over a ~53% black population flipped in either direction (annotation my own):</p>
${validate_component(Image, "Image").$$render($$result, {
      alt: "A scatterplot where each point represents a county's voting between 2016 and 2020. Highlighted counties 'flipped' between 2016 and 2020, with Republicans highlighted in red and Democrats in blue. There is an annotation above 53% black to show that no counties with such a population flipped in either direction.",
      src: "../images/blog/color-in-data-vis/flipping-points-color-annotate1.jpg"
    }, {}, {})}
<p>We also notice that flipping direction might be correlated with population size: nearly all of the flipping counties with a log population under 100,000 flipped to Republicans, while a greater proportion of all switching counties flipped toward the Democratic Party if their log population was greater than 100,000.</p>
${validate_component(Image, "Image").$$render($$result, {
      alt: "A scatterplot where each point represents a county's voting between 2016 and 2020. Highlighted counties 'flipped' between 2016 and 2020, with Republicans highlighted in red and Democrats in blue. There is an annotation past population 100,000 to show that more populous counties were more likely to flip Democratic.",
      src: "../images/blog/color-in-data-vis/flipping-points-color-annotate2.jpg"
    }, {}, {})}
<p>Color can, and should, be used to focus on the key parts of your visualization that you want your audience to see. By using color strategically, we can reduce the cognitive load required to understand <em>what</em> a visualization is depicting. <a href="${"https://journals.plos.org/plosone/article?id=10.1371/journal.pone.0183884#pone.0183884.ref008"}" rel="${"nofollow"}">Kalyuga et al.</a> found that color-coding \u201Cameliorated split-attention effects, resulting in lower perceived difficulty.\u201D <a href="${"https://journals.plos.org/plosone/article?id=10.1371/journal.pone.0183884#pone.0183884.ref024"}" rel="${"nofollow"}">Other researchers</a> have reported reductions in cognitive load when experiment participants were provided color-coding.</p>
<p>The overuse of colors can have the opposite effect. In one <a href="${"https://journals-sagepub-com.ezproxy.rice.edu/doi/full/10.1177/1747021818781425"}" rel="${"nofollow"}">2019 paper</a>, researchers found \u201Ctask-irrelevant digit colour information hampers the learning process only in instances where it triggers a conflict with the semantic properties of the base-code words.\u201D What does this mean? If color encoding conflicts with the objects it represents, it impedes learning and weakens understanding. You don\u2019t have to understand what all this means (I don\u2019t dully understand all of it). This point is simply to illustrate: <em>we should care about color</em>. Color can be confusing and complicated, which is why its use should be intentional and minimal. It should be used to draw attention to the important parts of our charts.</p>
<h3 id="${"2-color-to-explore"}"><a href="${"#2-color-to-explore"}">2) Color to explore</a></h3>
<p>Color does not have to be used in contrast to plain old grey. It can also be used as a tool to showcase a variety of data points all mapped to different colors. The important note is that this usage should be sparing. Given our prior examples, we definitely don\u2019t want a plot like this one (from <a href="${"https://serialmentor.com/dataviz/color-pitfalls.html"}" rel="${"nofollow"}">Chapter 19 of Claus Wilke\u2019s <em>Fundamentals of Data Visualization</em></a>):</p>
${validate_component(Image, "Image").$$render($$result, {
      alt: "A scatterplot where each point represents a state, and the x and y axis position showcase population vs population growth. Each state is shaded to a separate color, with no pattern.",
      src: "../images/blog/color-in-data-vis/bad-chart.jpg"
    }, {}, {})}
<p>A more appropriate alternative may look something like this:</p>
${validate_component(Image, "Image").$$render($$result, {
      alt: "A scatterplot where each point represents a state, and the x and y axis position showcase population vs population growth. Each state is shaded according to its region.",
      src: "../images/blog/color-in-data-vis/betterchart-1.jpg"
    }, {}, {})}
<p>This way, the audience can still see general patterns in the data, but they don\u2019t have to treat the fill legend like a lookup table! Most ideally, this chart would have some interactivity, so that a user could hover over a point to see its respective data.</p>
<p>In examples like this, where we are <em>exploring</em> rather than <em>explaining</em>, we leave the exploration to our users; they can see what they want to see and we give them the information they need to do exactly that.</p>
<p>Another common use of color for exploratory purposes is showing data progression across a gradient (e.g. low to high, bad to good, cold to warm).</p>
<p>These examples are most commonly found in <a href="${"https://en.wikipedia.org/wiki/Choropleth_map"}" rel="${"nofollow"}">choropleth maps</a>, where the shade of color in a given state (or county, or region) corresponds to a value of interest. As an example, here\u2019s a <a href="${"https://connorrothschild.github.io/D3.js/map-overdoses/"}" rel="${"nofollow"}">choropleth map</a> I created using D3.js, which visualizes opioid-involved overdose deaths in the United States:</p>
${validate_component(Image, "Image").$$render($$result, {
      alt: "A choropleth chart wherein each state is shaded according to its opioid overdose rate.",
      src: "../images/blog/color-in-data-vis/choropleth-ex.jpg"
    }, {}, {})}
<p>As we can see from the map, \u201Crust belt\u201D states are suffering from the opioid crisis to a much greater degree than those in western states. Choropleth maps utilize color to show regional variation and illustrate the power of color <em>shading</em> to represent the severity or extent of a given variable.</p>
<p>However, color in this context can also be misused. Data may be mapped according to a categorical color scale, or a rainbow scale which makes it difficult to see progression. This chart from <a href="${"https://serialmentor.com/dataviz/color-pitfalls.html"}" rel="${"nofollow"}">Claus O. Wilke</a> is a good (bad) example:</p>
${validate_component(Image, "Image").$$render($$result, {
      alt: "A map of Texas where each county is shaded according to its proportional white population. The color scale is rainbow, making it difficult to detect relative differences.",
      src: "../images/blog/color-in-data-vis/map-Texas-rainbow-1.jpg"
    }, {}, {})}
<p>This chart is pretty! When rainbow scales are used in the media or elsewhere, it may be because their creator asked \u201CHow can I use color to make a pretty picture?\u201D But this use of a non-monotonic color scale means that the relative size of differences between data points are difficult to detect. As an illustration, see how long it takes you to answer this question: using the legend above, what is the percent difference between <span style="${"color:#FF6701;"}">this color </span>and <span style="${"color:#3736FF;"}">this color</span>? (The answer is ~70%.)</p>
<p>In 2019, <a href="${"https://ieeexplore.ieee.org/document/8494817"}" rel="${"nofollow"}">a group of researchers</a> asked climate scientists to evaluate maps depicting changes in climate, where maps were either rainbow (similar to the Texas map above) or monotonic (such as the opioid map earlier). The researchers found that evaluations of magnitude difference in these maps were significantly more accurate when they were encoded with monotonic luminance scales rather than traditional rainbow scales. Other research consistently finds that rainbow color scales are both <a href="${"http://people.renci.org/~borland/pdfs/RainbowColorMap_VisViewpoints.pdf"}" rel="${"nofollow"}">harmful and popular</a>. All this to say: color matters.</p>
<p>So, color can be used for exploratory purposes. That is to say, color doesn\u2019t have to be used exclusively for focus, and it can be used in charts that have colors other than just grey! But exploratory color usage (as with all use of color) requires caution.</p>
<h2 id="${"conclusion"}"><a href="${"#conclusion"}">Conclusion</a></h2>
<p>Color is tricky. While it can take your plot to the next level, it can also ruin it. The difference? The questions we ask. Are we questioning <em>how</em> we can use color; which of the many palettes to use, and how we can map them across variables? These are <a href="${"https://socviz.co/refineplots.html#use-color-to-your-advantage"}" rel="${"nofollow"}">important questions</a>, but they have to be preceded by the question of <em>why</em> we use color in the first place. If color doesn\u2019t serve the purpose of informing, clarifying, or guiding our audience, what purpose does it serve?</p>`
  })}`;
});
var colorInDataVis = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  "default": Color_in_data_vis,
  metadata: metadata$b
});
var metadata$a = {
  "layout": "blog",
  "title": 'Feel Free to Do "Something Else" After Graduation',
  "description": "Finding meaningful work",
  "image": "adding-a-chart-to-your-d3-tooltip/header.png",
  "date": "2021-05-02",
  "draft": true
};
var Do_something_else = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign($$props, metadata$a), {}, {
    default: () => `<p><a href="${"https://angel.co/blog/over-60-of-employees-are-happy-at-startups-far-outpacing-faang-and-msft"}" rel="${"nofollow"}">https://angel.co/blog/over-60-of-employees-are-happy-at-startups-far-outpacing-faang-and-msft</a>
<a href="${"https://www.bizjournals.com/sanjose/news/2019/10/17/best-faang-companies-to-work-for-vs-startups.html"}" rel="${"nofollow"}">https://www.bizjournals.com/sanjose/news/2019/10/17/best-faang-companies-to-work-for-vs-startups.html</a>
<a href="${"https://ed.stanford.edu/news/stanford-education-study-provides-new-evidence-big-fish-little-pond-effect-students-globally"}" rel="${"nofollow"}">https://ed.stanford.edu/news/stanford-education-study-provides-new-evidence-big-fish-little-pond-effect-students-globally</a></p>
<p>I graduated college last week. I\u2019ve been thinking about what it means for a new graduate to find a career that they find <em>fulfilling</em>. In my view of things, it seems as if new grads\u2019 plans fall into one of a few categories, which you can usually split up by degree focus.</p>
<p><strong>Non-technical graduates</strong>:</p>
<ol><li>Big consulting (McKinsey, BCG, &amp; Bain, etc.)</li>
<li>Something else (fellowship, graduate school, journalism, government, etc.)</li></ol>
<p><strong>Technical graduates</strong>:</p>
<ol><li>Big tech (FAANG, etc.)</li>
<li>Something else (startup, civic tech, etc.)</li></ol>
<p>Is it reductive to categorize <em>all jobs</em> into these four categories? Check my LinkedIn feed, and you\u2019ll realize that enough graduates pursue the first option from each group (big consulting/big tech) that other jobs almost seem like an afterthought. (Apparently, <a href="${"https://medium.com/s/story/a-culture-of-prestige-98c8671ceade"}" rel="${"nofollow"}">~40% of Harvard grads</a> and <a href="${"https://yaledailynews.com/blog/2019/11/01/mckinsey-and-the-fig-tree/"}" rel="${"nofollow"}">~29% of Yale grads</a> go into finance or consulting after college.)</p>
<p>Of course, these sets of options mirror one another. Most students who aren\u2019t set on a JD, PhD, or MD will ask themselves whether they want to pursue the safe, well-paying, \u201Cbig\u201D option after graduating, or something else. </p>
<p>When they do choose, there\u2019s not much enthusiasm\u2014it\u2019s a tradeoff. These bigger companies offer alluring signing bonuses, prestige, and exorbitant salaries. In return, they ask you to put up with longer-than-usual hours and more monotonous work.</p>
<p>I\u2019m writing about <em>taking the risk</em>\u2014doing the \u201Csomething else\u201D that isn\u2019t McKinsey or Microsoft. There\u2019s value in the something else, and I hope I can encourage you it\u2019s more than consolation, it\u2019s a career.</p>
${validate_component(Info, "Info").$$render($$result, {}, {}, {
      default: () => `<p>Please note that I\u2019m not dunking on my friends who take these impressive jobs, but instead writing to people who are doing something else, whether by their own choice or not. Microsoft friends, I love you</p>`
    })}
<h2 id="${"establishing-the-stakes"}"><a href="${"#establishing-the-stakes"}">Establishing the stakes</a></h2>
<p><strong>Work is the most important thing we do.</strong> Not in the late-capitalism/workaholic-father type of way, but in the sense that you spend the majority of your day doing it. Every (week)day, you spend between 8 and 10 hours on work, and so you <em>cannot overstate</em> how important work is. If you dislike your work, you\u2019re unlikely to enjoy your life.  All this to say, make the decisions you make about work <em>intentionally</em> and not because of pressure, prestige, or anything else.</p>
<h2 id="${"fulfillment"}"><a href="${"#fulfillment"}">Fulfillment</a></h2>
<p>In 2019, <a href="${"https://angel.co/"}" rel="${"nofollow"}">AngelList</a> and <a href="${"https://www.teamblind.com/"}" rel="${"nofollow"}">Blind</a> surveyed 11,000 employees across FAANG and various startups, asking about job satisfaction and the factors that influence it. Their findings? <strong>Employees at startups were much happier than their FAANG counterparts.</strong></p>
${validate_component(Image, "Image").$$render($$result, {
      src: "post/do-something-else/startup-faang-satisfaction.png",
      alt: "A bar graph showing higher rates of job satisfaction among startup employees compared to FAANG employees."
    }, {}, {})}
<p>Data on early-career consultants in non-technical fields is harder to come by, but generally employees are <a href="${"https://poetsandquants.com/2017/09/10/job-satisfaction-rates-at-top-consulting-firms/3/"}" rel="${"nofollow"}">relatively satisfied despite the long hours</a>. Many consultants, however, do quit their job and pursue <a href="${"https://hbr.org/2019/07/why-consultants-quit-their-jobs-to-go-independent"}" rel="${"nofollow"}">independent consulting</a>, where they tend to be <a href="${"https://www.consultancy.uk/news/12795/independent-management-consultants-are-happier-and-half-earn-more"}" rel="${"nofollow"}">happier</a>.</p>
<p>And so there might be a tradeoff between prestige and satisfaction within these high-profile organizations. Definitely in tech, and perhaps in other spaces, work can be <em>better paying</em> but <em>less fulfilling</em>.</p>
<p>There could be many reasons for this, but I suspect a large one is <strong>structure</strong>. Taking a job at a big tech or big consulting company means you\u2019re subject to their structure. More often than not, the organizations have narrowly defined roles due to their massive size. As such, you assume whatever role they give you, with perhaps a little wiggle room. Some like this scope of work. For others, it can be stifling. It can come at the expense of your creativity and feel as if you have little room to grow.</p>
<p>The \u201Csomething else\u201D jobs, by contrast, are probably more variegated. To feel fulfilled, I think a job needs two things: 1) work that is <em>in line with your passions</em>, and 2) work that is <em>commensurate with your capacity</em>.</p>
<h4 id="${"passion"}"><a href="${"#passion"}">Passion</a></h4>
<p>If you don\u2019t like the work you do, you won\u2019t feel fulfilled. If your values don\u2019t align with the mission of your organization, you feel tension at work. When graduating seniors talk about post-grad plans, they sometimes mention \u201Cselling their soul\u201D to work for organizations that they disagree with. (E.g. graduates working for McKinsey after news broke of their <a href="${"https://www.nytimes.com/2019/12/03/us/mckinsey-ICE-immigration.html"}" rel="${"nofollow"}">partnerships with ICE</a>, or working for Facebook amidst one of their many controversies.)</p>
<p>It\u2019s totally fine to disagree with some of the values of your employer. Many do it their entire life. But wouldn\u2019t it be nice to be passionate about the work you do on a daily basis? The \u201Csomething else\u201D jobs offer this kind of relief; depending on <em>what</em> you pursue, you can find a job that not only aligns with, but strengthens, your existing passions.</p>
<h4 id="${"capacity"}"><a href="${"#capacity"}">Capacity</a></h4>
<p>But perhaps the bigger component of fulfillment, on a day-to-day basis, is how challenged you are by your work. Material success and external validation make you feel good, but work has to be sufficiently <em>intellectually stimulating</em> to make you feel fulfilled on a daily basis.</p>
<p>The problem is, big consulting and big tech companies <strong>necessarily</strong> constrain the work you do to better meet the needs of their organization. Rarely can you work in such a behemoth of an organization and also do work that lines up well with your skillset, capacity, and interests. </p>
<p>As an incoming entry-level employee at Microsoft, you join 144,000 other employees. The organization is structured hierarchically, and you assume the role that you\u2019re given. Is there some level of matching at play? Definitely. But are you able to apply yourself as you would in a personal project, or as you could in a smaller, less rigid organization? Definitely not. </p>
<p>As an incoming entry-level employee at McKinsey, share a similar experience. Your job infamously requires you to travel often, sit through countless meetings, and work long hours. Peers in these positions joke about how their job responsibilities are 1) sending emails, 2) sitting through meetings, and 3) designing PowerPoints.</p>
<p>In both of these contexts, you have this much capacity and competence:</p>
<progress style="${"width: 80%;"}" value="${"100"}" max="${"100"}"></progress>
<p>But larger companies hire you <em>so that you can exercise this much of it</em>:</p>
<progress style="${"width: 80%;"}" value="${"30"}" max="${"100"}"></progress>
<p>To make matters worse, we start working in these rigid organizations right after we graduate, which (for most people) is the <em>most exhilarating, unique, and stimulting experience of our lives</em>. We\u2019re familiar with challenging work (often too challenging), and so the contrast between college and work becomes even more stark. </p>
<h2 id="${"conclusion"}"><a href="${"#conclusion"}">Conclusion</a></h2>
<p><em>Searching for jobs is stressful.</em> When we\u2019re anxious about where we\u2019ll be after graduation, the prospect of earning six figures with a hefty signing bonus is an appealing one. But how often does this mean exchanging passion, creativity &amp; fulfillment for money &amp; status?</p>
<p><strong>Please don\u2019t be scared to do \u201Csomething else.\u201D</strong> Find the job that makes you tick, even if its risky. Work is the most important thing we do, and if it <em>can be</em> fulfilling, make it so! </p>
<hr>
<h1 id="${"counterarguments"}"><a href="${"#counterarguments"}">Counterarguments</a></h1>
<p>Here are some valid counterarguments to my thinking:</p>
<h3 id="${"consultants-like-their-jobs"}"><a href="${"#consultants-like-their-jobs"}">Consultants like their jobs</a></h3>
<ul><li>A <a href="${"https://www.ft.com/content/2cc98fb4-049d-11e1-ac2a-00144feabdc0"}" rel="${"nofollow"}">2011 survey</a> from the Management Consultancies Association found that two thirds of young consultants ranked their job satisfaction as \u201Cgood\u201D or \u201Cvery good.\u201D</li>
<li>There seems to be great heterogeneity in job satisfaction; <a href="${"https://poetsandquants.com/2017/09/10/job-satisfaction-rates-at-top-consulting-firms/3/"}" rel="${"nofollow"}">Wall Street Oasis data</a> has McKinsey with a remarkable 98.6/100, compared to the lowest at Chatham Financial, with 57.7. (I have no idea what their methodology is.)</li></ul>
<h3 id="${"consultantsbig-tech-employees-are-only-there-for-a-short-period-of-time"}"><a href="${"#consultantsbig-tech-employees-are-only-there-for-a-short-period-of-time"}">Consultants/big tech employees are only there for a short period of time</a></h3>
<ul><li>Many recent graduates </li></ul>
<h3 id="${"something-else-jobs-arent-well-paying-enough"}"><a href="${"#something-else-jobs-arent-well-paying-enough"}">\u201CSomething else\u201D jobs aren\u2019t well-paying enough</a></h3>
<h3 id><a href="${"#"}"></a></h3>
<h1 id="${"appendix"}"><a href="${"#appendix"}">Appendix</a></h1>
<p>Consultants work <em>so much</em>. From <a href="${"https://poetsandquants.com/2017/09/10/job-satisfaction-rates-at-top-consulting-firms/3/"}" rel="${"nofollow"}">Poets and Quants</a>:</p>
<table><thead><tr><th>Firm</th>
<th>Average Weekly Hours Worked</th></tr></thead>
<tbody><tr><td>EVA Dimensions</td>
<td>75.0</td></tr>
<tr><td>Teneo</td>
<td>72.5</td></tr>
<tr><td>Galt and Company</td>
<td>70.0</td></tr>
<tr><td>McKinsey &amp; Co.</td>
<td>68.8</td></tr>
<tr><td>Strategy&amp;</td>
<td>67.2</td></tr>
<tr><td>Keystone Strategy</td>
<td>65.0</td></tr>
<tr><td>Bain &amp; Co.</td>
<td>64.7</td></tr>
<tr><td>Oliver Wyman</td>
<td>64.6</td></tr>
<tr><td>The Parthenon Group</td>
<td>63.9</td></tr>
<tr><td>BCG</td>
<td>63.6</td></tr>
<tr><td>A.T. Kearney</td>
<td>63.0</td></tr>
<tr><td>Mars &amp; Co.</td>
<td>63.0</td></tr>
<tr><td>LEK Consulting</td>
<td>62.6</td></tr>
<tr><td>OCC Strategy Consultants</td>
<td>62.5</td></tr>
<tr><td>Arthur D. Little</td>
<td>62.5</td></tr>
<tr><td>Roland Berger Strategy Consultants</td>
<td>62.0</td></tr>
<tr><td>The Cambridge Group</td>
<td>61.7</td></tr>
<tr><td>IMS Consulting Group</td>
<td>60.7</td></tr>
<tr><td>Public Consulting Group</td>
<td>60.0</td></tr>
<tr><td>Crowe Horwath</td>
<td>60.0</td></tr>
<tr><td>Simon Kucher Partners</td>
<td>60.0</td></tr>
<tr><td>Corporate Value Associates</td>
<td>60.0</td></tr>
<tr><td>Parthenon Group-EY</td>
<td>58.3</td></tr>
<tr><td>The Brattle Group</td>
<td>58.3</td></tr>
<tr><td>Innosight</td>
<td>58.3</td></tr>
<tr><td>Marakon</td>
<td>57.5</td></tr>
<tr><td>Accenture</td>
<td>55.8</td></tr>
<tr><td>ZS Associates</td>
<td>55.6</td></tr>
<tr><td>Deloitte</td>
<td>55.5</td></tr>
<tr><td>PwC</td>
<td>55.5</td></tr></tbody></table>
`
  })}`;
});
var doSomethingElse = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  "default": Do_something_else,
  metadata: metadata$a
});
var metadata$9 = {
  "layout": "blog",
  "title": "Announcing the Nuxt Blog Starter",
  "date": "2021-02-10",
  "description": "A minimal, content-focused blog site built with NuxtJS and Bulma.",
  "image": "nuxt-blog-starter/header.png",
  "featured": true
};
var Nuxt_blog_starter = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign($$props, metadata$9), {}, {
    default: () => `<p>I\u2019m happy to share a <a href="${"https://github.com/connorrothschild/nuxt-blog-starter"}" rel="${"nofollow"}">new starter template</a> for minimal, content-focused blogs using NuxtJS and Bulma for styling. The site is a more simplified version of <a href="${"https://www.connorrothschild.com/"}" rel="${"nofollow"}">my own site</a>.</p>
<h2 id="${"why-nuxt"}"><a href="${"#why-nuxt"}">Why Nuxt?</a></h2>
<p>I\u2019ve went through my fair share of blogs. See <a href="${"https://connorrothschild.github.io/v1/"}" rel="${"nofollow"}">version 1</a> and <a href="${"https://connorrothschild.github.io/v2/"}" rel="${"nofollow"}">version 2</a>. I moved to a site using Nuxt for three reasons:</p>
<h4 id="${"1-speed-and-user-experience"}"><a href="${"#1-speed-and-user-experience"}">1. Speed and user experience</a></h4>
<p>Nuxt is fast by default. It uses server-side rendering, rather than client-side rendering, which means that content is rendered before users visit your site. As explained on the <a href="${"https://nuxtjs.org/blog/going-full-static/"}" rel="${"nofollow"}">Nuxt Blog</a>:</p>
<blockquote><p><code>nuxt generate</code> with <code>target: &#39;static&#39;</code> will pre-render all your pages to HTML and save a payload file in order to mock <code>asyncData</code> and <code>fetch</code> on client-side navigation, this means no more HTTP calls to your API on client-side navigation. By extracting the page payload to a js file, it also reduces the HTML size served as well as preloading it (from the in the header) for optimal performance.</p></blockquote>
<p>You can see the impact of SSR on performance by comparing my <a href="${"https://developers.google.com/speed/pagespeed/insights/?url=https%3A%2F%2Fconnorrothschild.github.io%2Fv2%2F&tab=desktop"}" rel="${"nofollow"}">last blog iteration</a> to <a href="${"https://developers.google.com/speed/pagespeed/insights/?url=https%3A%2F%2Fwww.connorrothschild.com%2F&tab=desktop"}" rel="${"nofollow"}">this one</a>.</p>
<p>The former, built using <a href="${"https://bookdown.org/yihui/blogdown/"}" rel="${"nofollow"}">R <code>blogdown</code></a> and <a href="${"https://themes.gohugo.io/academic/"}" rel="${"nofollow"}">Hugo Academic</a>, scored 72/100 on desktop performance, compared to a 100/100 on this version:</p>
${validate_component(Image, "Image").$$render($$result, {
      src: "../images/blog/nuxt-blog-starter/old-site-perf.png",
      alt: "Old site performance. 72/100",
      width: "48%"
    }, {}, {})}
${validate_component(Image, "Image").$$render($$result, {
      src: "../images/blog/nuxt-blog-starter/new-site-perf.png",
      alt: "New site performance. 100/100",
      width: "48%"
    }, {}, {})}
<h4 id="${"2-flexibility-and-power"}"><a href="${"#2-flexibility-and-power"}">2. Flexibility and power</a></h4>
<p>Too often, making \u2018fast\u2019 websites comes at the cost of flexibility and power. For example, the first version of my website was based on a <a href="${"https://github.com/katmh/point-theme"}" rel="${"nofollow"}">Jekyll theme</a> that was pretty, functional, and fast, but limited in its flexibility. That is, I was locked into the default appearance of the site, unless I wanted to really get into the weeds editing CSS and writing my own HTML markup. (At that point, I might as well had started a new blog or find another theme!)</p>
<p>I built this template because it is as performant as my V1 site (both receive over 95/100 on <a href="${"https://developers.google.com/speed/pagespeed/insights/"}" rel="${"nofollow"}">PageSpeed Insights</a>), but with much more flexibility. In my experience, modifying the appearance of this site\u2014whether thats through its constituent components in the <code>components/</code> folder, or globally in the <code>assets/scss/colors.scss</code> file\u2014is seamless while also allowing greater power than modifying the defaults in other, simpler blog templates.</p>
<p>Moreover, this kind of flexibility scales up with your knowledge of Vue and Nuxt. If you are already familiar with the technologies, this template should be ready for total transformation through whatever modifications you find necessary. Otherwise, all you need to do is follow the simple instructions in the template\u2019s <a href="${"https://github.com/connorrothschild/nuxt-blog-starter"}" rel="${"nofollow"}">README</a>. To test this, I\u2019ve helped a non-technical friend build out his <a href="${"https://dyllonschmehl.netlify.app/"}" rel="${"nofollow"}">own website</a> from this theme, and seen firsthand how intuitive getting started can really be.</p>
<h4 id="${"3-learning-new-tech"}"><a href="${"#3-learning-new-tech"}">3. Learning new tech</a></h4>
<p>A final reason to make this jump is to get familiar with <a href="${"https://www.javascript.com/"}" rel="${"nofollow"}">JavaScript</a>, <a href="${"https://vuejs.org/"}" rel="${"nofollow"}">Vue</a>, <a href="${"https://nuxtjs.org/"}" rel="${"nofollow"}">Nuxt</a>, and <a href="${"https://www.w3schools.com/css/"}" rel="${"nofollow"}">CSS</a>. Many of my readers come from a visualization-centric background, and are most proficient in R. (Awesome!) I learned Vue (and then Nuxt) from scratch, by building a <a href="${"https://connorrothschild.github.io/cudi-hums/"}" rel="${"nofollow"}">few</a> <a href="${"https://connorrothschild.github.io/how-many-people/"}" rel="${"nofollow"}">projects</a> and subsequently, my personal website!</p>
<p><strong>Learning new tech never hurts.</strong> You will almost never regret spending a few hours to have a basic handle of a new language or tool. Get started with this template, see how it feels, and see if you like it! (If not, ditch the site! I won\u2019t be offended.)</p>
<h2 id="${"why-this-template-specifically"}"><a href="${"#why-this-template-specifically"}">Why this template specifically?</a></h2>
<p>I didn\u2019t invent Nuxt, nor the portfolio site. There are a few other options for powerful, pretty starter templates using NuxtJS. In particular, I like <a href="${"https://github.com/marinaaisa/nuxt-markdown-blog-starter"}" rel="${"nofollow"}">Marina Aisa\u2019s</a> and <a href="${"https://templates.netlify.com/template/awake-blog-template-nuxt/"}" rel="${"nofollow"}">Daniel Kelly\u2019s</a>.</p>
<p>That being said, I think my site is pretty cool. In creating the template, I\u2019ve aimed for a mix of <strong>out-of-the-box features that \u201Cjust work\u201D</strong>, with the <strong>ability to customize as necessary.</strong> I want to allow new users, who have little to no experience with web development, to create a blog, and allow advanced users, who probably know this stuff better than me, to get started with a powerful and customizable template.</p>
<p>There are a few features I think make this starter template unique:</p>
<h3 id="${"easy-theming"}"><a href="${"#easy-theming"}">Easy theming</a></h3>
<p>The site relies on three colors: a primary (background), secondary (accent), and a primary-invert (text). These are all defined in Sass variables that live in <code>assets/scss/colors.scss</code>. To change the appearance of your site, simply modify the colors you\u2019d like to see as your background (<code>$primary</code>), your text (<code>$text</code>), and your accent (<code>$secondary</code>). Obviously, make sure your <code>$primary</code> and <code>$text</code> colors have sufficient contrast.</p>
<h4 id="${"dark-modelight-mode"}"><a href="${"#dark-modelight-mode"}">Dark mode/light mode</a></h4>
<p>An example of this can be seen below the Sass defaults that live within <code>assets/scss/colors.scss</code>. Simply uncomment those lines (preceded by the comment \u201CLIGHT MODE\u201D) to see your site with light mode defaults.</p>
${validate_component(Image, "Image").$$render($$result, {
      src: "../images/blog/nuxt-blog-starter/dark.png",
      alt: "Dark mode",
      width: "49%"
    }, {}, {})}
${validate_component(Image, "Image").$$render($$result, {
      src: "../images/blog/nuxt-blog-starter/light.png",
      alt: "Light mode",
      width: "49%"
    }, {}, {})}
<h3 id="${"dope-transitions"}"><a href="${"#dope-transitions"}">Dope transitions</a></h3>
<p>Nuxt makes transitions easy. This template expands upon Nuxt\u2019s powerful page transitions by using <a href="${"https://greensock.com/gsap/"}" rel="${"nofollow"}">Greensock\u2019s GSAP</a>. In particular, I define elements that should fade in nicely for each page, like this:</p>
<pre class="${"language-js"}"><!-- HTML_TAG_START -->${`<code class="language-js">transition<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    mode<span class="token operator">:</span> <span class="token string">'out-in'</span><span class="token punctuation">,</span>
    css<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
    <span class="token function">enter</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        TweenMax<span class="token punctuation">.</span><span class="token function">fromTo</span><span class="token punctuation">(</span><span class="token string">".title"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>x<span class="token operator">:</span> <span class="token string">"10%"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>x<span class="token operator">:</span> <span class="token string">"0%"</span> <span class="token punctuation">,</span> duration<span class="token operator">:</span> <span class="token number">0.1</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        TweenMax<span class="token punctuation">.</span><span class="token function">fromTo</span><span class="token punctuation">(</span><span class="token string">".subtitle, .card, .img"</span><span class="token punctuation">,</span>
                            <span class="token punctuation">&#123;</span>x<span class="token operator">:</span> <span class="token string">"10%"</span><span class="token punctuation">,</span> autoAlpha<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
                            <span class="token punctuation">&#123;</span>x<span class="token operator">:</span> <span class="token string">"0%"</span><span class="token punctuation">,</span> autoAlpha<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> delay<span class="token operator">:</span> <span class="token number">0.25</span><span class="token punctuation">,</span> duration<span class="token operator">:</span> <span class="token number">0.5</span><span class="token punctuation">,</span> ease<span class="token operator">:</span> Power3<span class="token punctuation">.</span>easeOut<span class="token punctuation">&#125;</span>
                        <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">,</span></code>`}<!-- HTML_TAG_END --></pre>
<p>This creates some subtle yet attractive page transitions:</p>
${validate_component(Image, "Image").$$render($$result, {
      src: "../images/blog/nuxt-blog-starter/transitions.gif",
      alt: "GIF showcasing transitions of home page, to blog post pagfe, to a single blog post."
    }, {}, {})}
<p>You can modify these transitions by adding and removing elements in the CSS selector parameters for each page\u2019s <code>enter()</code> property.</p>
<h3 id="${"meta-tagsseo"}"><a href="${"#meta-tagsseo"}">Meta tags/SEO</a></h3>
<p>The function <code>getSiteMeta()</code>, found in the <code>utils/</code> folder, allows for different meta tags for each page and for each blog post. The function allows the Twitter Cards for my home page and for a blog post to look different, like this:</p>
${validate_component(Image, "Image").$$render($$result, {
      src: "../images/blog/nuxt-blog-starter/home-card.png",
      alt: "Twitter card of homepage",
      width: "47.2%"
    }, {}, {})}
${validate_component(Image, "Image").$$render($$result, {
      src: "../images/blog/nuxt-blog-starter/blog-card.png",
      alt: "Twitter card of blog post page",
      width: "50%"
    }, {}, {})}
<p>The site is set up so that your cards will appear this way automatically! All you will have to do is edit <a href="${"https://github.com/connorrothschild/nuxt-blog-starter/blob/master/utils/getSiteMeta.js"}" rel="${"nofollow"}"><code>utils/getSiteMeta.js</code></a> with your specific information. Page-specific meta tags are also helpful for search engine optimization; your site might attract a larger number of visitors if it covers a wider variety of keywords.</p>
<h2 id="${"blog-features"}"><a href="${"#blog-features"}">Blog features</a></h2>
<p>This site comes with all the same blog capabilities as a normal site, such as syntax highlighting, images, HTML support, and Vue components. Read <a href="${"https://nuxtjs.org/blog/creating-blog-with-nuxt-content/"}" rel="${"nofollow"}">this post</a> if you\u2019re curious about features.</p>
<p>You can also include a few custom components I\u2019ve made:</p>
<h3 id="${"info-boxes"}"><a href="${"#info-boxes"}">Info boxes</a></h3>
<p><strong><a href="${"https://github.com/connorrothschild/nuxt-blog-starter/blob/master/components/global/InfoBox.vue"}" rel="${"nofollow"}"><code>InfoBox.vue</code></a></strong> is a component that allows you to put notes/warnings/messages in your blog posts. Feel free to edit the component to adjust its styling.</p>
${validate_component(Info, "Info").$$render($$result, {}, {}, {
      default: () => `<p>Info boxes look like this!</p>`
    })}
<h3 id="${"images"}"><a href="${"#images"}">Images</a></h3>
<p><strong><a href="${"https://github.com/connorrothschild/nuxt-blog-starter/blob/master/components/global/InlineImage.vue"}" rel="${"nofollow"}"><code>InlineImage.vue</code></a></strong> optimizes and handles the messy parts of images.</p>
<p>In specific, it:</p>
<ul><li>Allows for fullscreen, gallery views via <a href="${"https://github.com/crowdbotics/v-img"}" rel="${"nofollow"}"><code>v-img</code></a>.</li>
<li>Optimizes images with <a href="${"https://github.com/juliomrqz/nuxt-optimized-images"}" rel="${"nofollow"}"><code>nuxt-optimized-images</code></a>.</li></ul>
<h3 id="${"videos"}"><a href="${"#videos"}">Videos</a></h3>
<p><strong><a href="${"https://github.com/connorrothschild/nuxt-blog-starter/blob/master/components/global/ResponsiveVideo.vue"}" rel="${"nofollow"}"><code>ResponsiveVideo.vue</code></a></strong> takes a YouTube url (or otherwise embeddable video link) and makes it responsive.</p>
<p>You can see all of these components in action in the <a href="${"https://nuxt-blog-starter.netlify.app/post/welcome"}" rel="${"nofollow"}">sample blog post</a>.</p>
<h2 id="${"get-started"}"><a href="${"#get-started"}">Get started</a></h2>
<p>Get started! <a href="${"https://github.com/connorrothschild/nuxt-blog-starter"}" rel="${"nofollow"}">Fork the repository here</a> and follow instructions in the README to get started. Please reach out with any questions, either through filing an issue or via <a href="${"mailto:connor@connorrothschild.com"}">email</a>.</p>`
  })}`;
});
var nuxtBlogStarter = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  "default": Nuxt_blog_starter,
  metadata: metadata$9
});
var css$1 = {
  code: "div.svelte-4ympzj{margin-bottom:1.35rem}a.svelte-4ympzj{font-weight:300;font-family:var(--font-sans);text-align:right;letter-spacing:0.64px;width:100%}",
  map: '{"version":3,"file":"TableHandler.svelte","sources":["TableHandler.svelte"],"sourcesContent":["<script>\\n  export let src;\\n  export let alt;\\n  export let link;\\n<\/script>\\n\\n<div>\\n  <img {src} {alt} width=\\"100%\\" />\\n  <a href={link} target=\\"_blank\\" class=\\"no-underline\\"\\n    >The original, interactive table can be found here</a\\n  >\\n</div>\\n\\n<style>\\n  div {\\n    margin-bottom: 1.35rem;\\n  }\\n  a {\\n    font-weight: 300;\\n    font-family: var(--font-sans);\\n    text-align: right;\\n    letter-spacing: 0.64px;\\n    width: 100%;\\n  }\\n</style>\\n"],"names":[],"mappings":"AAcE,GAAG,cAAC,CAAC,AACH,aAAa,CAAE,OAAO,AACxB,CAAC,AACD,CAAC,cAAC,CAAC,AACD,WAAW,CAAE,GAAG,CAChB,WAAW,CAAE,IAAI,WAAW,CAAC,CAC7B,UAAU,CAAE,KAAK,CACjB,cAAc,CAAE,MAAM,CACtB,KAAK,CAAE,IAAI,AACb,CAAC"}'
};
var TableHandler = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let { src: src2 } = $$props;
  let { alt } = $$props;
  let { link } = $$props;
  if ($$props.src === void 0 && $$bindings.src && src2 !== void 0)
    $$bindings.src(src2);
  if ($$props.alt === void 0 && $$bindings.alt && alt !== void 0)
    $$bindings.alt(alt);
  if ($$props.link === void 0 && $$bindings.link && link !== void 0)
    $$bindings.link(link);
  $$result.css.add(css$1);
  return `<div class="${"svelte-4ympzj"}"><img${add_attribute("src", src2, 0)}${add_attribute("alt", alt, 0)} width="${"100%"}">
  <a${add_attribute("href", link, 0)} target="${"_blank"}" class="${"no-underline svelte-4ympzj"}">The original, interactive table can be found here</a>
</div>`;
});
var metadata$8 = {
  "layout": "blog",
  "title": "Firearm Background Checks Are Spiking",
  "description": "Visualizing the precipitous rise in gun sales during COVID-19",
  "date": "2020-07-02",
  "image": "covid-gun-spikes/header.png",
  "featured": true
};
var Covid_gun_spikes = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign($$props, metadata$8), {}, {
    default: () => `${validate_component(Image, "Image").$$render($$result, {
      src: "../images/blog/covid-gun-spikes/featured.png",
      alt: "A small multiples map showing spikes in firearm background checks in 2020, compared to 1999-2019"
    }, {}, {})}
<p>So far in 2020, firearm background checks are happening <strong>significantly</strong> more frequently than they did during the first six months of the last 20 years. Some <a href="${"https://www.nytimes.com/interactive/2020/04/01/business/coronavirus-gun-sales.html"}" rel="${"nofollow"}">media reports</a> captured the gun-buying frenzy during its apparent peak in March, but according to data from the <a href="${"https://www.fbi.gov/file-repository/nics_firearm_checks_-_month_year_by_state_type.pdf/view"}" rel="${"nofollow"}">FBI NICS</a>, <em>the month of June saw the largest single month count of firearm background checks in the last 20 years.</em></p>
<p>The data, <a href="${"https://github.com/BuzzFeedNews/nics-firearm-background-checks"}" rel="${"nofollow"}">which is scraped and cleaned by BuzzFeed News</a>, shows a massive spike in firearm background checks in the last 5 months:</p>
<pre class="${"language-r"}"><!-- HTML_TAG_START -->${`<code class="language-r">library<span class="token punctuation">(</span>reactable<span class="token punctuation">)</span>
library<span class="token punctuation">(</span>tidyverse<span class="token punctuation">)</span>
library<span class="token punctuation">(</span>geofacet<span class="token punctuation">)</span>
library<span class="token punctuation">(</span>scales<span class="token punctuation">)</span>
library<span class="token punctuation">(</span>cr<span class="token punctuation">)</span>

set_cr_theme<span class="token punctuation">(</span>font <span class="token operator">=</span> <span class="token string">"IBM Plex Sans"</span><span class="token punctuation">)</span>

data <span class="token operator">&lt;-</span> readr<span class="token operator">::</span>read_csv<span class="token punctuation">(</span><span class="token string">'data/data.csv'</span><span class="token punctuation">)</span>

data <span class="token operator">&lt;-</span> data <span class="token percent-operator operator">%>%</span>
  mutate<span class="token punctuation">(</span>month <span class="token operator">=</span> as.Date<span class="token punctuation">(</span>paste<span class="token punctuation">(</span>month<span class="token punctuation">,</span> <span class="token string">"-01"</span><span class="token punctuation">,</span> sep <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
         year <span class="token operator">=</span> lubridate<span class="token operator">::</span>year<span class="token punctuation">(</span>month<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token percent-operator operator">%>%</span>
  filter<span class="token punctuation">(</span>year <span class="token operator">!=</span> <span class="token number">1998</span><span class="token punctuation">)</span>

data <span class="token percent-operator operator">%>%</span>
  mutate<span class="token punctuation">(</span>month <span class="token operator">=</span> lubridate<span class="token operator">::</span>month<span class="token punctuation">(</span>month<span class="token punctuation">)</span><span class="token punctuation">,</span>
         month <span class="token operator">=</span> month.abb<span class="token punctuation">[</span>month<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token percent-operator operator">%>%</span>
  group_by<span class="token punctuation">(</span>year<span class="token punctuation">,</span> month<span class="token punctuation">)</span> <span class="token percent-operator operator">%>%</span>
  summarise<span class="token punctuation">(</span>sum <span class="token operator">=</span> sum<span class="token punctuation">(</span>totals<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token percent-operator operator">%>%</span>
  reactable<span class="token punctuation">(</span>
    defaultSorted <span class="token operator">=</span> <span class="token string">'sum'</span><span class="token punctuation">,</span>
    defaultSortOrder <span class="token operator">=</span> <span class="token string">'desc'</span><span class="token punctuation">,</span>
    defaultColDef <span class="token operator">=</span> colDef<span class="token punctuation">(</span>headerClass <span class="token operator">=</span> <span class="token string">"header"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    compact <span class="token operator">=</span> <span class="token boolean">TRUE</span><span class="token punctuation">,</span>
    fullWidth <span class="token operator">=</span> <span class="token boolean">FALSE</span><span class="token punctuation">,</span>
    columns <span class="token operator">=</span> list<span class="token punctuation">(</span>
      month <span class="token operator">=</span> colDef<span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"Month"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      year <span class="token operator">=</span> colDef<span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"Year"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      sum <span class="token operator">=</span> colDef<span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"# of Firearm Background Checks"</span><span class="token punctuation">,</span>
                   format <span class="token operator">=</span> colFormat<span class="token punctuation">(</span>separators <span class="token operator">=</span> <span class="token boolean">TRUE</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">)</span><span class="token punctuation">,</span>
    rowStyle <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>.<span class="token punctuation">[</span>index<span class="token punctuation">,</span> <span class="token string">"year"</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">2020</span><span class="token punctuation">)</span>
        list<span class="token punctuation">(</span>fontWeight <span class="token operator">=</span> <span class="token string">"bold"</span><span class="token punctuation">,</span>
             background <span class="token operator">=</span> <span class="token string">"rgba(0, 0, 0, 0.05)"</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">)</span></code>`}<!-- HTML_TAG_END --></pre>
${validate_component(TableHandler, "TableHandler").$$render($$result, {
      src: "../images/blog/covid-gun-spikes/table-replacement.png",
      alt: "A table showing the years and months with the greatest number of firearm background checks. Those in 2020 are among the highest.",
      link: "http://connorrothschild.github.io/v2/post/covid-gun-spikes/"
    }, {}, {})}
<p>As the table shows, the last 5 months have seen some of the greatest numbers of firearm background checks since the FBI has collected such data. It seems as if the only non-2020 entrants to the top 7 are from December 2015, and December 2019, which are (perhaps coincidentally) both the final months before new presidents took office.</p>
<p>Visually, we see that firearm background checks follow some seasonal trends, but by and large, have undergone unprecedented spikes in the last 5 months:</p>
<pre class="${"language-r"}"><!-- HTML_TAG_START -->${`<code class="language-r">data <span class="token percent-operator operator">%>%</span>
  group_by<span class="token punctuation">(</span>month<span class="token punctuation">)</span> <span class="token percent-operator operator">%>%</span>
  summarise<span class="token punctuation">(</span>sum <span class="token operator">=</span> sum<span class="token punctuation">(</span>totals<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token percent-operator operator">%>%</span>
  ggplot<span class="token punctuation">(</span>aes<span class="token punctuation">(</span>x <span class="token operator">=</span> month<span class="token punctuation">,</span> y <span class="token operator">=</span> sum<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span>
  geom_line<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span>
  geom_area<span class="token punctuation">(</span>alpha <span class="token operator">=</span> <span class="token number">.7</span><span class="token punctuation">,</span> fill <span class="token operator">=</span> <span class="token string">'red'</span><span class="token punctuation">)</span> <span class="token operator">+</span>
  labs<span class="token punctuation">(</span>y <span class="token operator">=</span> element_blank<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> x <span class="token operator">=</span> element_blank<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
       title <span class="token operator">=</span> <span class="token string">'Firearm background checks, over time'</span><span class="token punctuation">)</span> <span class="token operator">+</span>
  scale_x_date<span class="token punctuation">(</span>expand <span class="token operator">=</span> expansion<span class="token punctuation">(</span>c<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0.001</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span>
  scale_y_continuous<span class="token punctuation">(</span>expand <span class="token operator">=</span> expansion<span class="token punctuation">(</span>c<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0.001</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                     labels <span class="token operator">=</span> unit_format<span class="token punctuation">(</span>
                       unit <span class="token operator">=</span> <span class="token string">"M"</span><span class="token punctuation">,</span>
                       scale <span class="token operator">=</span> <span class="token number">1e-6</span><span class="token punctuation">,</span>
                       sep <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">,</span>
                       accuracy <span class="token operator">=</span> <span class="token number">1</span>
                     <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span>
  drop_axis<span class="token punctuation">(</span><span class="token string">"y"</span><span class="token punctuation">)</span></code>`}<!-- HTML_TAG_END --></pre>
${validate_component(Image, "Image").$$render($$result, {
      src: "../images/blog/covid-gun-spikes/unnamed-chunk-4-1.png",
      alt: "An area chart showing background checks over time. Despite some seasonaility, the trend is increasing over time, and is at its highest point at the end of the chart in 2020."
    }, {}, {})}
<p>And we can better understand the magnitude of these shifts by visualizing year-to-year changes:</p>
<pre class="${"language-r"}"><!-- HTML_TAG_START -->${`<code class="language-r">data <span class="token percent-operator operator">%>%</span>
  mutate<span class="token punctuation">(</span>month <span class="token operator">=</span> lubridate<span class="token operator">::</span>month<span class="token punctuation">(</span>month<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token percent-operator operator">%>%</span>
  filter<span class="token punctuation">(</span>month <span class="token operator">&lt;</span> <span class="token number">7</span><span class="token punctuation">)</span> <span class="token percent-operator operator">%>%</span>
  group_by<span class="token punctuation">(</span>year<span class="token punctuation">)</span> <span class="token percent-operator operator">%>%</span>
  summarise<span class="token punctuation">(</span>sum <span class="token operator">=</span> sum<span class="token punctuation">(</span>totals<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token percent-operator operator">%>%</span>
  ungroup<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token percent-operator operator">%>%</span>
  mutate<span class="token punctuation">(</span>last_year <span class="token operator">=</span> lag<span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">,</span>
         perc_change <span class="token operator">=</span>  <span class="token punctuation">(</span><span class="token punctuation">(</span>sum <span class="token operator">-</span> last_year<span class="token punctuation">)</span> <span class="token operator">/</span> last_year<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token percent-operator operator">%>%</span>
  ggplot<span class="token punctuation">(</span>aes<span class="token punctuation">(</span>x <span class="token operator">=</span> year<span class="token punctuation">,</span> y <span class="token operator">=</span> perc_change<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span>
  geom_col<span class="token punctuation">(</span>alpha <span class="token operator">=</span> <span class="token number">.7</span><span class="token punctuation">,</span> fill <span class="token operator">=</span> <span class="token string">'red'</span><span class="token punctuation">,</span> color <span class="token operator">=</span> <span class="token string">'black'</span><span class="token punctuation">)</span> <span class="token operator">+</span>
  geom_hline<span class="token punctuation">(</span>yintercept <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span>
  scale_x_continuous<span class="token punctuation">(</span>expand <span class="token operator">=</span> expansion<span class="token punctuation">(</span>c<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0.001</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span>
  scale_y_continuous<span class="token punctuation">(</span>labels <span class="token operator">=</span> percent_format<span class="token punctuation">(</span>accuracy <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span>
  drop_axis<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span>
  labs<span class="token punctuation">(</span>x <span class="token operator">=</span> element_blank<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> y <span class="token operator">=</span> element_blank<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
       title <span class="token operator">=</span> <span class="token string">"Year-on-year changes in firearm background checks, 1999-2020"</span><span class="token punctuation">,</span>
       subtitle <span class="token operator">=</span> <span class="token string">"January through June"</span><span class="token punctuation">)</span></code>`}<!-- HTML_TAG_END --></pre>
${validate_component(Image, "Image").$$render($$result, {
      src: "../images/blog/covid-gun-spikes/unnamed-chunk-5-1.png",
      alt: "A barchart showing the temporal year-on-year change in background checks for firearms over time. The last year, 2020, is the highest, meaning background checks have seen the greatest year on year growth this year."
    }, {}, {})}
<p>Visualized another way, we can explore the temporal change <strong>within each year</strong> for every year between 1999 and 2020, with 2020 <span style="${"color:red"}">highlighted in red.</span></p>
<pre class="${"language-r"}"><!-- HTML_TAG_START -->${`<code class="language-r">data <span class="token percent-operator operator">%>%</span>
  mutate<span class="token punctuation">(</span>month <span class="token operator">=</span> lubridate<span class="token operator">::</span>month<span class="token punctuation">(</span>month<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token percent-operator operator">%>%</span>
  filter<span class="token punctuation">(</span>month <span class="token operator">&lt;</span> <span class="token number">7</span><span class="token punctuation">)</span> <span class="token percent-operator operator">%>%</span>
  group_by<span class="token punctuation">(</span>month<span class="token punctuation">,</span> year<span class="token punctuation">)</span> <span class="token percent-operator operator">%>%</span>
  summarise<span class="token punctuation">(</span>sum <span class="token operator">=</span> sum<span class="token punctuation">(</span>totals<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token percent-operator operator">%>%</span>
  mutate<span class="token punctuation">(</span>fill <span class="token operator">=</span> ifelse<span class="token punctuation">(</span>year <span class="token operator">==</span> <span class="token number">2020</span><span class="token punctuation">,</span> <span class="token string">"2020"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token percent-operator operator">%>%</span>
  ggplot<span class="token punctuation">(</span>aes<span class="token punctuation">(</span>group <span class="token operator">=</span> year<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span>
  geom_line<span class="token punctuation">(</span>aes<span class="token punctuation">(</span>x <span class="token operator">=</span> month<span class="token punctuation">,</span> y <span class="token operator">=</span> sum<span class="token punctuation">,</span> color <span class="token operator">=</span> fill<span class="token punctuation">,</span> alpha <span class="token operator">=</span> fill<span class="token punctuation">)</span><span class="token punctuation">,</span> show.legend <span class="token operator">=</span> <span class="token boolean">FALSE</span><span class="token punctuation">)</span> <span class="token operator">+</span>
  scale_y_continuous<span class="token punctuation">(</span>limits <span class="token operator">=</span> c<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">4000000</span><span class="token punctuation">)</span><span class="token punctuation">,</span> labels <span class="token operator">=</span> unit_format<span class="token punctuation">(</span>unit <span class="token operator">=</span> <span class="token string">"M"</span><span class="token punctuation">,</span> sep <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">,</span> scale <span class="token operator">=</span> <span class="token number">1e-6</span><span class="token punctuation">,</span> accuracy <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span>
  scale_x_continuous<span class="token punctuation">(</span>breaks <span class="token operator">=</span> c<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">,</span> labels <span class="token operator">=</span> c<span class="token punctuation">(</span><span class="token string">"Jan"</span><span class="token punctuation">,</span> <span class="token string">"Feb"</span><span class="token punctuation">,</span> <span class="token string">"Mar"</span><span class="token punctuation">,</span> <span class="token string">"April"</span><span class="token punctuation">,</span> <span class="token string">"May"</span><span class="token punctuation">,</span> <span class="token string">"June"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span>
  scale_color_manual<span class="token punctuation">(</span>values <span class="token operator">=</span> c<span class="token punctuation">(</span><span class="token string">"gray"</span><span class="token punctuation">,</span> <span class="token string">"red"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span>
  scale_alpha_manual<span class="token punctuation">(</span>values <span class="token operator">=</span> c<span class="token punctuation">(</span><span class="token number">.7</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span>
  labs<span class="token punctuation">(</span>x <span class="token operator">=</span> element_blank<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> y <span class="token operator">=</span> element_blank<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
       title <span class="token operator">=</span> "Firearm background checks <span class="token keyword">in</span> <span class="token operator">&lt;</span>span style <span class="token operator">=</span> <span class="token string">'color: red;'</span><span class="token operator">></span><span class="token number">2020</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>
       compared to <span class="token operator">&lt;</span>span style <span class="token operator">=</span> <span class="token string">'color: #343434'</span><span class="token operator">></span><span class="token number">1999</span> <span class="token operator">-</span> <span class="token number">2019</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>"<span class="token punctuation">,</span>
       subtitle <span class="token operator">=</span> <span class="token string">"January to June"</span><span class="token punctuation">)</span> <span class="token operator">+</span>
  drop_axis<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span>
  theme<span class="token punctuation">(</span>plot.title <span class="token operator">=</span> ggtext<span class="token operator">::</span>element_markdown<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code>`}<!-- HTML_TAG_END --></pre>
${validate_component(Image, "Image").$$render($$result, {
      src: "../images/blog/covid-gun-spikes/unnamed-chunk-6-1.png",
      alt: "A line chart wherein each line shows a year, and the x axis corresponds to the month. The y axis represents the sum of background checks. The highest line is 2020, highlighted in red, indicating that across the entire year, 2020 has seen the greatest number of background checks."
    }, {}, {})}
<p>The FBI database also includes background check data for each U.S. state. This data allows us to compare trends <em>across</em> states and over time (using <code>geofacet</code>):</p>
<pre class="${"language-r"}"><!-- HTML_TAG_START -->${`<code class="language-r">data <span class="token percent-operator operator">%>%</span>
  mutate<span class="token punctuation">(</span>month <span class="token operator">=</span> lubridate<span class="token operator">::</span>month<span class="token punctuation">(</span>month<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token percent-operator operator">%>%</span>
  filter<span class="token punctuation">(</span>month <span class="token operator">&lt;</span> <span class="token number">7</span><span class="token punctuation">)</span> <span class="token percent-operator operator">%>%</span>
  group_by<span class="token punctuation">(</span>month<span class="token punctuation">,</span> year<span class="token punctuation">,</span> state<span class="token punctuation">)</span> <span class="token percent-operator operator">%>%</span>
  summarise<span class="token punctuation">(</span>sum <span class="token operator">=</span> sum<span class="token punctuation">(</span>totals<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token percent-operator operator">%>%</span>
  mutate<span class="token punctuation">(</span>fill <span class="token operator">=</span> ifelse<span class="token punctuation">(</span>year <span class="token operator">==</span> <span class="token number">2020</span><span class="token punctuation">,</span> <span class="token string">"2020"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token percent-operator operator">%>%</span>
  ggplot<span class="token punctuation">(</span>aes<span class="token punctuation">(</span>group <span class="token operator">=</span> year<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span>
  geom_line<span class="token punctuation">(</span>aes<span class="token punctuation">(</span>x <span class="token operator">=</span> month<span class="token punctuation">,</span> y <span class="token operator">=</span> sum<span class="token punctuation">,</span> color <span class="token operator">=</span> fill<span class="token punctuation">,</span> alpha <span class="token operator">=</span> fill<span class="token punctuation">)</span><span class="token punctuation">,</span>
            size <span class="token operator">=</span> <span class="token number">.2</span><span class="token punctuation">,</span> show.legend <span class="token operator">=</span> <span class="token boolean">FALSE</span><span class="token punctuation">)</span> <span class="token operator">+</span>
  scale_color_manual<span class="token punctuation">(</span>values <span class="token operator">=</span> c<span class="token punctuation">(</span><span class="token string">"gray"</span><span class="token punctuation">,</span> <span class="token string">"red"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span>
  scale_alpha_manual<span class="token punctuation">(</span>values <span class="token operator">=</span> c<span class="token punctuation">(</span><span class="token number">.5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span>
  facet_geo<span class="token punctuation">(</span><span class="token operator">~</span> state<span class="token punctuation">,</span> scales <span class="token operator">=</span> <span class="token string">'free_y'</span><span class="token punctuation">,</span> grid <span class="token operator">=</span> <span class="token string">"us_state_grid1"</span><span class="token punctuation">)</span> <span class="token operator">+</span>
  drop_axis<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span>
  theme<span class="token punctuation">(</span>text <span class="token operator">=</span> element_text<span class="token punctuation">(</span>color <span class="token operator">=</span> <span class="token string">"white"</span><span class="token punctuation">,</span>
                            family <span class="token operator">=</span> <span class="token string">"IBM Plex Sans"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        axis.title<span class="token operator">=</span>element_blank<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        axis.text<span class="token operator">=</span>element_blank<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        axis.ticks<span class="token operator">=</span>element_blank<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        strip.background <span class="token operator">=</span> element_rect<span class="token punctuation">(</span>fill <span class="token operator">=</span> <span class="token string">'black'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        strip.text <span class="token operator">=</span> element_text<span class="token punctuation">(</span>size <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span> color <span class="token operator">=</span> <span class="token string">'white'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        panel.background <span class="token operator">=</span> element_rect<span class="token punctuation">(</span>fill <span class="token operator">=</span> <span class="token string">'black'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        plot.background <span class="token operator">=</span> element_rect<span class="token punctuation">(</span>fill <span class="token operator">=</span> <span class="token string">'black'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        panel.grid <span class="token operator">=</span> element_blank<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span>
  labs<span class="token punctuation">(</span>x <span class="token operator">=</span> element_blank<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
       y <span class="token operator">=</span> element_blank<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
       title <span class="token operator">=</span> <span class="token string">"Spikes in gun ownership during COVID-19"</span><span class="token punctuation">,</span>
       subtitle <span class="token operator">=</span> <span class="token string">"How the first six months of 2020 compare to 1999-2019"</span><span class="token punctuation">)</span>

<span class="token comment">## With additional styling changes made in Illustrator!</span></code>`}<!-- HTML_TAG_END --></pre>
${validate_component(Image, "Image").$$render($$result, {
      src: "../images/blog/covid-gun-spikes/featured.png",
      alt: "A small multiples map showing spikes in firearm background checks in 2020, compared to 1999-2019"
    }, {}, {})}
<h2 id="${"the-impact"}"><a href="${"#the-impact"}">The Impact</a></h2>
<p>Most obviously, background checks are a proxy for gun purchases and gun ownership; as such, this data informs us that more and more people are grabbing for guns during COVID-19, perhaps in anticipation of some post-COVID apocalypse or perceived government overreach during.</p>
<p>In addition, one risk is that more guns can lead to greater numbers of firearm suicides. <a href="${"https://everytownresearch.org/reports/covid-gun-violence/"}" rel="${"nofollow"}">One group of researchers</a> at the gun safety organization Everytown predicted that COVID-related unemployment would lead to a 20-30% increase in firearm suicides (5000 to 7000 people). As such, a rise in firearm-related background checks may signal an impending surge of gun violence in the forms of both homicide and suicide.</p>
<p>Firearm background check data, however, requires close scrutiny. The way that these data are acquired on a state-by-state basis means that we might not be able to safely make comparisons <em>across</em> states. Moreover, according to <a href="${"https://www.thetrace.org/2015/10/private-sale-loophole-background-check-harvard-research/"}" rel="${"nofollow"}">one group of Harvard researchers</a>, upwards of 40% of all gun owners report acquiring their most recent gun <em>without a background check.</em></p>
<p>Thus, these numbers may tell a different story than one of \u2018guns are being purchased more frequently.\u2019 Although not employed in this post, there are some novel ways to develop stories similar to that one, like using <a href="${"https://github.com/nytimes/gunsales#getting-gun-sales-estimates-from-background-checks"}" rel="${"nofollow"}">NYT\u2019s methodology</a> to estimate gun sales from background check data. I encourage those interested to pursue their work, alongside the <a href="${"https://github.com/BuzzFeedNews/nics-firearm-background-checks"}" rel="${"nofollow"}">BuzzFeed News repository</a> where this data came from, and analyze such questions yourself.</p>`
  })}`;
});
var covidGunSpikes = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  "default": Covid_gun_spikes,
  metadata: metadata$8
});
var metadata$7 = {
  "layout": "blog",
  "title": "An Analysis of COVID on Campus",
  "date": "2020-10-02",
  "description": "Where university reopenings led to spikes in COVID-19 case counts",
  "image": "covid-on-campus/header.png"
};
var Covid_on_campus = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${$$result.head += `<script async src="${"https://platform.twitter.com/widgets.js"}" charset="${"utf-8"}" data-svelte="svelte-13oycb1"><\/script>`, ""}
${validate_component(Layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign($$props, metadata$7), {}, {
    default: () => `<p>On July 17, Rice University announced <a href="${"https://coronavirus.rice.edu/news/message-president-leebron-july-17"}" rel="${"nofollow"}">its
plan</a>
for the fall semester, which included a hybrid mode of instruction where
students could attend classes either virtually or in person. The
decision wasn\u2019t without controversy; in the weeks that followed,
<a href="${"https://www.ricethresher.org/article/2020/08/return-to-campus-but-to-what-end"}" rel="${"nofollow"}">multiple</a>
<a href="${"https://www.ricethresher.org/article/2020/07/letter-to-the-editor-on-returning-to-the-classroom"}" rel="${"nofollow"}">faculty</a>
<a href="${"https://www.ricethresher.org/article/2020/07/letter-to-the-editor-re-evaluate-return-to-campus"}" rel="${"nofollow"}">members</a>
at Rice wrote of their concerns with the plan to begin classes,
eventually culminating in a
<a href="${"https://www.ricethresher.org/article/2020/08/faculty-senate-will-meet-to-discuss-risks-and-benefits-of-returning-to-campus"}" rel="${"nofollow"}">petition</a>
to convene a campus-wide discussion regarding the risks and benefits of
opening campus. The petition garnered nearly 100 faculty signatures.</p>
<p>Despite such complaints, Rice opened its doors to in-person students on
August 11th. And despite all of the concerns, the university has done a
remarkable job at keeping COVID case counts relatively low.</p>
<blockquote class="${"twitter-tweet"}"><p lang="${"en"}" dir="${"ltr"}">A big part of <a href="${"https://twitter.com/RiceUniversity?ref_src=twsrc%5Etfw"}">@RiceUniversity</a>&#39;s approach to COVID-19: test often. Within the first two weeks of August, the university recorded over 4000 tests, with a total of 19 positive cases (0.41%). <a href="${"https://t.co/IDI3qtIE6f"}">pic.twitter.com/IDI3qtIE6f</a></p>\u2014 Connor Rothschild (@CL_Rothschild) <a href="${"https://twitter.com/CL_Rothschild/status/1296495845664272386?ref_src=twsrc%5Etfw"}">August 20, 2020</a></blockquote>
<p>Rice\u2019s success at maintaining low case
counts\u2013<a href="${"https://coronavirus.rice.edu/"}" rel="${"nofollow"}">recording</a> only 37 positive cases
across 36,183 tests as of October 10\u2013is not typical of most colleges. At
universities across the country, reopening was often accompanied by a
<a href="${"https://apnews.com/article/virus-outbreak-indiana-muncie-b62eacec9bd3fff89eeab1a8de72f819"}" rel="${"nofollow"}">surge</a>
in new COVID-19 cases; surges that, in many instances, forced those
universities to
<a href="${"https://www.jsonline.com/story/news/education/2020/09/09/uw-madison-pauses-person-classes-two-weeks/5766409002/"}" rel="${"nofollow"}">reverse</a>
their
<a href="${"https://www.nytimes.com/2020/08/17/us/unc-chapel-hill-covid.html"}" rel="${"nofollow"}">reopening</a>
<a href="${"https://www.usnews.com/news/education-news/articles/2020-09-08/facing-coronavirus-spikes-colleges-send-students-home-against-the-warnings-of-public-health-officials"}" rel="${"nofollow"}">decisions</a>
within just a few weeks.</p>
<p>The table below presents cumulative university-affiliated COVID cases,
broken down by college (from the <a href="${"https://github.com/nytimes/covid-19-data/tree/master/colleges"}" rel="${"nofollow"}">New York
Times</a>):</p>
${validate_component(TableHandler, "TableHandler").$$render($$result, {
      src: "../images/blog/covid-on-campus/table1.png",
      alt: "A table showcasing universities that have the greatest number of COVID-19 cases. University of Georgia leads the pack at 3888 cases. Last updated October 11, 2020",
      link: "http://connorrothschild.github.io/v2/post/covid-on-campus/"
    }, {}, {})}
<p>In addition to the criticism leveled against university administrators
for jeopardizing the health and safety of their <em>students</em>, to what
extent have reopenings put the community at large at greater risk?</p>
<p>One way to answer this question is to analyze case counts attributable
to university students as a relative proportion of a county\u2019s overall
case counts. The New York Times offers data in both forms:
<a href="${"https://github.com/nytimes/covid-19-data/tree/master/colleges"}" rel="${"nofollow"}">college-affiliated
cases</a>
and <a href="${"https://github.com/nytimes/covid-19-data/blob/master/live/us-counties.csv"}" rel="${"nofollow"}">county
cases</a>
(cumulative). In combination, the data tells a story about which
colleges are struggling the most with COVID-19, which college towns saw
a COVID spike after university reopenings, and which cities have
problems much larger than students throwing fraternity parties.</p>
<p>Below, you can explore your county\u2019s case count relative to its
university-affiliated case counts.</p>
${validate_component(TableHandler, "TableHandler").$$render($$result, {
      src: "../images/blog/covid-on-campus/table2.png",
      alt: "A table showcasing counties that have the greatest number of COVID-19 cases attributable to colleges. Pickens, South Carolina is expanded, showcasing two universities which account for 105% of the county's total cases. Last updated October 11, 2020",
      link: "http://connorrothschild.github.io/v2/post/covid-on-campus/"
    }, {}, {})}
<p>In two counties, Otsego County (New York) and Pickens County (South
Carolina), university-affiliated COVID-19 case counts actually <em>outpace</em>
officially recorded COVID-19 cases in their respective counties. This
might signal an issue with the data, or a unique way of treating
university students in county-wide case counts. According to one of the
investigative reporters who recorded this data at the New York Times,
county-wide case totals might not include out-of-state residents, such
as college students:</p>
<blockquote class="${"twitter-tweet"}"><p lang="${"en"}" dir="${"ltr"}">Coronavirus infections on campuses might go unnoticed if not for reporting by academic institutions themselves because they do not always show up in official state or countywide tallies, which generally exclude people who have permanent addresses elsewhere, as students often do.</p>\u2014 Danielle Ivory (@danielle_ivory) <a href="${"https://twitter.com/danielle_ivory/status/1314597852782489602?ref_src=twsrc%5Etfw"}">October 9, 2020</a></blockquote>
<p>In other counties, we see a more intuitive picture, where college cases
constitute a proportion of overall county cases. Even if the same issue
is present in these counties, you can understand generally where
university COVID case counts are high relative to their county-wide
totals, and where they are not.</p>
<h3 id="${"university-affiliated-covid-cases-across-states"}"><a href="${"#university-affiliated-covid-cases-across-states"}">University-affiliated COVID cases across states</a></h3>
<p>The data also tells a story about COVID case counts on a state-by-state
basis, and where college-affiliated cases make up a disproportionate
share of cases in the state overall.</p>
<p>Geographically, the data looks like this (note the x-axis runs from 0 to
10%):</p>
${validate_component(Image, "Image").$$render($$result, {
      src: "../images/blog/covid-on-campus/geofacet_processed.png",
      alt: "A geofaceted map that shows percent of COVID cases attributable to colleges, by US state. Each state ranges between 0 and 10% of total cases attributable to colleges."
    }, {}, {})}
<p>In the table below, you can search for your state and drill down on
which counties within your state make up the greatest share of COVID-19
cases.</p>
${validate_component(TableHandler, "TableHandler").$$render($$result, {
      src: "../images/blog/covid-on-campus/table3.png",
      alt: "A table showcasing states that have the greatest number of COVID-19 cases attributable to colleges. Wyoming (number 1) is expanded, showcasing three universities which account for 7% of the state's total cases. Last updated October 11, 2020",
      link: "http://connorrothschild.github.io/v2/post/covid-on-campus/"
    }, {}, {})}
<p>Thanks for reading. You can find the code that creates the tables and
graphics for this post <a href="${"https://github.com/connorrothschild/v2/tree/master/content/post/covid-on-campus/index.Rmd"}" rel="${"nofollow"}">on
GitHub</a>.
As always, feel free to message me on
<a href="${"https://twitter.com/CL_Rothschild"}" rel="${"nofollow"}">Twitter</a> with any questions,
comments, or just to say hi \u{1F642}</p>`
  })}`;
});
var covidOnCampus = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  "default": Covid_on_campus,
  metadata: metadata$7
});
var metadata$6 = {
  "layout": "blog",
  "title": "Create a Streetmap of Any City in R",
  "description": "Creating a beautiful streetmap of my hometown, exclusively in R",
  "date": "2019-11-21",
  "image": "map-springfield/header.png",
  "archived": true
};
var Map_springfield = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign($$props, metadata$6), {}, {
    default: () => `<p>In this post, I expand upon <a href="${"https://christianburkhart.de/"}" rel="${"nofollow"}">Christian
Burkhart</a>\u2019s wonderful <a href="${"https://ggplot2tutor.com/streetmaps/streetmaps/"}" rel="${"nofollow"}">ggplot2tor
tutorial</a> on streetmap
creation using ggplot2. My process differs slightly from his in that I
include text using <code>geom_label</code>, rather than PowerPoint, to create the
text annotations. (This was much more difficult!)</p>
<pre class="${"language-r"}"><!-- HTML_TAG_START -->${`<code class="language-r">library<span class="token punctuation">(</span>tidyverse<span class="token punctuation">)</span>
library<span class="token punctuation">(</span>gridExtra<span class="token punctuation">)</span>
library<span class="token punctuation">(</span>grid<span class="token punctuation">)</span>
library<span class="token punctuation">(</span>ggplot2<span class="token punctuation">)</span>
library<span class="token punctuation">(</span>lattice<span class="token punctuation">)</span>
library<span class="token punctuation">(</span>osmdata<span class="token punctuation">)</span>
library<span class="token punctuation">(</span>sf<span class="token punctuation">)</span></code>`}<!-- HTML_TAG_END --></pre>
<p>First, per the tutorial, we load street (and river, etc). data:</p>
<pre class="${"language-r"}"><!-- HTML_TAG_START -->${`<code class="language-r">streets <span class="token operator">&lt;-</span> getbb<span class="token punctuation">(</span><span class="token string">"Springfield Missouri"</span><span class="token punctuation">)</span><span class="token percent-operator operator">%>%</span>
  opq<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token percent-operator operator">%>%</span>
  add_osm_feature<span class="token punctuation">(</span>key <span class="token operator">=</span> <span class="token string">"highway"</span><span class="token punctuation">,</span>
                  value <span class="token operator">=</span> c<span class="token punctuation">(</span><span class="token string">"motorway"</span><span class="token punctuation">,</span> <span class="token string">"primary"</span><span class="token punctuation">,</span>
                            <span class="token string">"secondary"</span><span class="token punctuation">,</span> <span class="token string">"tertiary"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token percent-operator operator">%>%</span>
  osmdata_sf<span class="token punctuation">(</span><span class="token punctuation">)</span>

small_streets <span class="token operator">&lt;-</span> getbb<span class="token punctuation">(</span><span class="token string">"Springfield Missouri"</span><span class="token punctuation">)</span><span class="token percent-operator operator">%>%</span>
  opq<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token percent-operator operator">%>%</span>
  add_osm_feature<span class="token punctuation">(</span>key <span class="token operator">=</span> <span class="token string">"highway"</span><span class="token punctuation">,</span>
                  value <span class="token operator">=</span> c<span class="token punctuation">(</span><span class="token string">"residential"</span><span class="token punctuation">,</span> <span class="token string">"living_street"</span><span class="token punctuation">,</span>
                            <span class="token string">"unclassified"</span><span class="token punctuation">,</span>
                            <span class="token string">"service"</span><span class="token punctuation">,</span> <span class="token string">"footway"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token percent-operator operator">%>%</span>
  osmdata_sf<span class="token punctuation">(</span><span class="token punctuation">)</span>

river <span class="token operator">&lt;-</span> getbb<span class="token punctuation">(</span><span class="token string">"Springfield Missouri"</span><span class="token punctuation">)</span><span class="token percent-operator operator">%>%</span>
  opq<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token percent-operator operator">%>%</span>
  add_osm_feature<span class="token punctuation">(</span>key <span class="token operator">=</span> <span class="token string">"waterway"</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token string">"river"</span><span class="token punctuation">)</span> <span class="token percent-operator operator">%>%</span>
  osmdata_sf<span class="token punctuation">(</span><span class="token punctuation">)</span></code>`}<!-- HTML_TAG_END --></pre>
<p>Next, we define the plot limits, using the lat-long found in the last
step.</p>
<pre class="${"language-r"}"><!-- HTML_TAG_START -->${`<code class="language-r">right <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">93.175</span>
left <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">93.395</span>
bottom <span class="token operator">=</span> <span class="token number">37</span>
top <span class="token operator">=</span> <span class="token number">37.275</span></code>`}<!-- HTML_TAG_END --></pre>
<p>In my plot, I\u2019m going to create a text box to hold the city, state, and
lat/long combination.</p>
<p>We can create the parameters for this box through some manipulations of
the existing plot limits:</p>
<pre class="${"language-r"}"><!-- HTML_TAG_START -->${`<code class="language-r">top_rect <span class="token operator">=</span> <span class="token punctuation">(</span>top <span class="token operator">+</span> bottom<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2.0035</span>
bot_rect <span class="token operator">=</span> bottom <span class="token operator">+</span> <span class="token number">.01</span>
box_height <span class="token operator">=</span> <span class="token punctuation">(</span>top_rect <span class="token operator">+</span> bot_rect<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span>
mid_box <span class="token operator">=</span> <span class="token punctuation">(</span>left <span class="token operator">+</span> right<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span></code>`}<!-- HTML_TAG_END --></pre>
<p>Finally, we can create a black and white plot. This follows the same
structure as the ggplot2tor tutorial:</p>
<pre class="${"language-r"}"><!-- HTML_TAG_START -->${`<code class="language-r">plot_bw <span class="token operator">&lt;-</span> ggplot<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span>
  geom_sf<span class="token punctuation">(</span>data <span class="token operator">=</span> streets<span class="token operator">$</span>osm_lines<span class="token punctuation">,</span>
          inherit.aes <span class="token operator">=</span> <span class="token boolean">FALSE</span><span class="token punctuation">,</span>
          color <span class="token operator">=</span> <span class="token string">"#000000"</span><span class="token punctuation">,</span>
          size <span class="token operator">=</span> <span class="token number">.3</span><span class="token punctuation">,</span>
          alpha <span class="token operator">=</span> <span class="token number">.8</span><span class="token punctuation">)</span> <span class="token operator">+</span>
  geom_sf<span class="token punctuation">(</span>data <span class="token operator">=</span> small_streets<span class="token operator">$</span>osm_lines<span class="token punctuation">,</span>
          inherit.aes <span class="token operator">=</span> <span class="token boolean">FALSE</span><span class="token punctuation">,</span>
          color <span class="token operator">=</span> <span class="token string">"#000000"</span><span class="token punctuation">,</span>
          size <span class="token operator">=</span> <span class="token number">.1</span><span class="token punctuation">,</span>
          alpha <span class="token operator">=</span> <span class="token number">.6</span><span class="token punctuation">)</span> <span class="token operator">+</span>
  geom_sf<span class="token punctuation">(</span>data <span class="token operator">=</span> river<span class="token operator">$</span>osm_lines<span class="token punctuation">,</span>
          inherit.aes <span class="token operator">=</span> <span class="token boolean">FALSE</span><span class="token punctuation">,</span>
          color <span class="token operator">=</span> <span class="token string">"#000000"</span><span class="token punctuation">,</span>
          size <span class="token operator">=</span> <span class="token number">.2</span><span class="token punctuation">,</span>
          alpha <span class="token operator">=</span> <span class="token number">.5</span><span class="token punctuation">)</span> <span class="token operator">+</span>
  coord_sf<span class="token punctuation">(</span>xlim <span class="token operator">=</span> c<span class="token punctuation">(</span>left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">,</span>
           ylim <span class="token operator">=</span> c<span class="token punctuation">(</span>bottom<span class="token punctuation">,</span> top<span class="token punctuation">)</span><span class="token punctuation">,</span>
           expand <span class="token operator">=</span> <span class="token boolean">FALSE</span><span class="token punctuation">)</span> <span class="token operator">+</span>
  theme_void<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span>
  theme<span class="token punctuation">(</span>
    plot.background <span class="token operator">=</span> element_rect<span class="token punctuation">(</span>fill <span class="token operator">=</span> <span class="token string">"#FFFFFF"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    panel.background <span class="token operator">=</span> element_rect<span class="token punctuation">(</span>fill <span class="token operator">=</span> <span class="token string">"#FFFFFF"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    plot.margin<span class="token operator">=</span>unit<span class="token punctuation">(</span>c<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">0.5</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"mm"</span><span class="token punctuation">)</span>
  <span class="token punctuation">)</span></code>`}<!-- HTML_TAG_END --></pre>
<p>Finally, we can introduce our text elements using <code>geom_text</code> (as well
as borders using <code>geom_rect</code>).</p>
<pre class="${"language-r"}"><!-- HTML_TAG_START -->${`<code class="language-r">map_bw <span class="token operator">&lt;-</span> plot_bw <span class="token operator">+</span>
  <span class="token comment"># big box</span>
  geom_rect<span class="token punctuation">(</span>
    aes<span class="token punctuation">(</span>
      xmax <span class="token operator">=</span> right <span class="token operator">-</span> <span class="token number">.005</span><span class="token punctuation">,</span>
      xmin <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token number">.005</span><span class="token punctuation">,</span>
      ymin <span class="token operator">=</span> bottom <span class="token operator">+</span> <span class="token number">.005</span><span class="token punctuation">,</span>
      ymax <span class="token operator">=</span> top <span class="token operator">-</span> <span class="token number">.005</span>
    <span class="token punctuation">)</span><span class="token punctuation">,</span>
    alpha <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
    color <span class="token operator">=</span> <span class="token string">"black"</span><span class="token punctuation">,</span>
    size <span class="token operator">=</span> <span class="token number">1</span>
  <span class="token punctuation">)</span> <span class="token operator">+</span>
  <span class="token comment"># smaller, label box</span>
  geom_rect<span class="token punctuation">(</span>
    aes<span class="token punctuation">(</span>
      xmax <span class="token operator">=</span> right <span class="token operator">-</span> <span class="token number">.01</span><span class="token punctuation">,</span>
      xmin <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token number">.01</span><span class="token punctuation">,</span>
      ymin <span class="token operator">=</span> bot_rect<span class="token punctuation">,</span>
      ymax <span class="token operator">=</span> top_rect
    <span class="token punctuation">)</span><span class="token punctuation">,</span>
    alpha <span class="token operator">=</span> <span class="token number">.75</span><span class="token punctuation">,</span>
    color <span class="token operator">=</span> <span class="token string">"black"</span><span class="token punctuation">,</span>
    fill <span class="token operator">=</span> <span class="token string">"white"</span><span class="token punctuation">,</span>
    size <span class="token operator">=</span> <span class="token number">.6</span>
  <span class="token punctuation">)</span> <span class="token operator">+</span>
  <span class="token comment"># springfield</span>
  geom_text<span class="token punctuation">(</span>
    aes<span class="token punctuation">(</span>x <span class="token operator">=</span> mid_box<span class="token punctuation">,</span> y <span class="token operator">=</span> box_height <span class="token operator">+</span> <span class="token number">.002</span><span class="token punctuation">,</span>
        label <span class="token operator">=</span> <span class="token string">"SPRINGFIELD&#92;n"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    color <span class="token operator">=</span> <span class="token string">"black"</span><span class="token punctuation">,</span>
    family <span class="token operator">=</span> <span class="token string">"Lato"</span><span class="token punctuation">,</span>
    fontface <span class="token operator">=</span> <span class="token string">"bold"</span><span class="token punctuation">,</span>
    size <span class="token operator">=</span> <span class="token number">9</span>
  <span class="token punctuation">)</span> <span class="token operator">+</span>
  <span class="token comment"># a line that goes behind 'Missouri'</span>
  geom_segment<span class="token punctuation">(</span>aes<span class="token punctuation">(</span>
    x <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token number">.03</span><span class="token punctuation">,</span>
    y <span class="token operator">=</span> <span class="token punctuation">(</span>top_rect <span class="token operator">+</span> bottom<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span>
    xend <span class="token operator">=</span> right <span class="token operator">-</span> <span class="token number">.03</span><span class="token punctuation">,</span>
    yend <span class="token operator">=</span> <span class="token punctuation">(</span>top_rect <span class="token operator">+</span> bottom<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span>
  <span class="token punctuation">)</span><span class="token punctuation">,</span> color <span class="token operator">=</span> <span class="token string">"black"</span><span class="token punctuation">)</span> <span class="token operator">+</span>
  <span class="token comment"># Missouri label</span>
  geom_label<span class="token punctuation">(</span>
    aes<span class="token punctuation">(</span>x <span class="token operator">=</span> mid_box<span class="token punctuation">,</span> y <span class="token operator">=</span> box_height <span class="token operator">-</span> <span class="token number">.005</span><span class="token punctuation">,</span>
        label <span class="token operator">=</span> <span class="token string">"MISSOURI"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    color <span class="token operator">=</span> <span class="token string">"black"</span><span class="token punctuation">,</span>
    fill <span class="token operator">=</span> <span class="token string">"white"</span><span class="token punctuation">,</span>
    <span class="token comment"># alpha = .9,</span>
    label.size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
    family <span class="token operator">=</span> <span class="token string">"Lato"</span><span class="token punctuation">,</span>
    <span class="token comment"># fontface = "thin",</span>
    size <span class="token operator">=</span> <span class="token number">7</span>
  <span class="token punctuation">)</span> <span class="token operator">+</span>
  <span class="token comment"># coords</span>
  geom_text<span class="token punctuation">(</span>
    aes<span class="token punctuation">(</span>x <span class="token operator">=</span> mid_box<span class="token punctuation">,</span> y <span class="token operator">=</span> box_height <span class="token operator">-</span> <span class="token number">.02</span><span class="token punctuation">,</span>
        label <span class="token operator">=</span> <span class="token string">"37.2090\xB0 N / 93.2923\xB0 W"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    color <span class="token operator">=</span> <span class="token string">"black"</span><span class="token punctuation">,</span>
    family <span class="token operator">=</span> <span class="token string">"Lato"</span><span class="token punctuation">,</span>
    size <span class="token operator">=</span> <span class="token number">4</span>
  <span class="token punctuation">)</span> <span class="token operator">+</span>
  <span class="token comment"># me!</span>
  geom_label<span class="token punctuation">(</span>
    aes<span class="token punctuation">(</span>
      x <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token number">.035</span><span class="token punctuation">,</span>
      y <span class="token operator">=</span> top_rect <span class="token operator">+</span> <span class="token number">.005</span><span class="token punctuation">,</span>
      label <span class="token operator">=</span> <span class="token string">"Design: Connor Rothschild"</span>
    <span class="token punctuation">)</span><span class="token punctuation">,</span>
    size <span class="token operator">=</span> <span class="token number">1.5</span><span class="token punctuation">,</span>
    color <span class="token operator">=</span> <span class="token string">"black"</span><span class="token punctuation">,</span>
    fill <span class="token operator">=</span> <span class="token string">"white"</span><span class="token punctuation">,</span>
    label.size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
    family <span class="token operator">=</span> <span class="token string">"Lato"</span>
  <span class="token punctuation">)</span>

map_bw</code>`}<!-- HTML_TAG_END --></pre>
${validate_component(Image, "Image").$$render($$result, {
      alt: "A black and white map of Springfield, Missouri.",
      src: "../images/blog/map-springfield/bw_map_springfield.png",
      width: "50%",
      centered: true
    }, {}, {})}
<p>And if we replicate that code with different colors, the possibilities are endless:</p>
<pre class="${"language-r"}"><!-- HTML_TAG_START -->${`<code class="language-r">plot_gold <span class="token operator">&lt;-</span> ggplot<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span>
  geom_sf<span class="token punctuation">(</span>
    data <span class="token operator">=</span> streets<span class="token operator">$</span>osm_lines<span class="token punctuation">,</span>
    inherit.aes <span class="token operator">=</span> <span class="token boolean">FALSE</span><span class="token punctuation">,</span>
    color <span class="token operator">=</span> <span class="token string">"steelblue"</span><span class="token punctuation">,</span>
    size <span class="token operator">=</span> <span class="token number">.3</span><span class="token punctuation">,</span>
    alpha <span class="token operator">=</span> <span class="token number">.8</span>
  <span class="token punctuation">)</span> <span class="token operator">+</span>
  geom_sf<span class="token punctuation">(</span>
    data <span class="token operator">=</span> small_streets<span class="token operator">$</span>osm_lines<span class="token punctuation">,</span>
    inherit.aes <span class="token operator">=</span> <span class="token boolean">FALSE</span><span class="token punctuation">,</span>
    color <span class="token operator">=</span> <span class="token string">"#ffbe7f"</span><span class="token punctuation">,</span>
    size <span class="token operator">=</span> <span class="token number">.1</span><span class="token punctuation">,</span>
    alpha <span class="token operator">=</span> <span class="token number">.6</span>
  <span class="token punctuation">)</span> <span class="token operator">+</span>
  geom_sf<span class="token punctuation">(</span>
    data <span class="token operator">=</span> river<span class="token operator">$</span>osm_lines<span class="token punctuation">,</span>
    inherit.aes <span class="token operator">=</span> <span class="token boolean">FALSE</span><span class="token punctuation">,</span>
    color <span class="token operator">=</span> <span class="token string">"#ffbe7f"</span><span class="token punctuation">,</span>
    size <span class="token operator">=</span> <span class="token number">.2</span><span class="token punctuation">,</span>
    alpha <span class="token operator">=</span> <span class="token number">.5</span>
  <span class="token punctuation">)</span> <span class="token operator">+</span>
  coord_sf<span class="token punctuation">(</span>
    xlim <span class="token operator">=</span> c<span class="token punctuation">(</span>left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">,</span>
    ylim <span class="token operator">=</span> c<span class="token punctuation">(</span>bottom<span class="token punctuation">,</span> top<span class="token punctuation">)</span><span class="token punctuation">,</span>
    expand <span class="token operator">=</span> <span class="token boolean">FALSE</span>
  <span class="token punctuation">)</span> <span class="token operator">+</span>
  theme_void<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span>
  theme<span class="token punctuation">(</span>
    plot.background <span class="token operator">=</span> element_rect<span class="token punctuation">(</span>fill <span class="token operator">=</span> <span class="token string">"#282828"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    panel.background <span class="token operator">=</span> element_rect<span class="token punctuation">(</span>fill <span class="token operator">=</span> <span class="token string">"#282828"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    plot.margin <span class="token operator">=</span> unit<span class="token punctuation">(</span>c<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"mm"</span><span class="token punctuation">)</span>
  <span class="token punctuation">)</span>

map_gold <span class="token operator">&lt;-</span> plot_gold <span class="token operator">+</span>
  geom_rect<span class="token punctuation">(</span>
    aes<span class="token punctuation">(</span>
      xmax <span class="token operator">=</span> right <span class="token operator">-</span> <span class="token number">.005</span><span class="token punctuation">,</span>
      xmin <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token number">.005</span><span class="token punctuation">,</span>
      ymin <span class="token operator">=</span> bottom <span class="token operator">+</span> <span class="token number">.005</span><span class="token punctuation">,</span>
      ymax <span class="token operator">=</span> top <span class="token operator">-</span> <span class="token number">.005</span>
    <span class="token punctuation">)</span><span class="token punctuation">,</span>
    alpha <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
    color <span class="token operator">=</span> <span class="token string">"white"</span><span class="token punctuation">,</span>
    size <span class="token operator">=</span> <span class="token number">1</span>
  <span class="token punctuation">)</span> <span class="token operator">+</span>
  geom_rect<span class="token punctuation">(</span>
    aes<span class="token punctuation">(</span>
      xmax <span class="token operator">=</span> right <span class="token operator">-</span> <span class="token number">.01</span><span class="token punctuation">,</span>
      xmin <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token number">.01</span><span class="token punctuation">,</span>
      ymin <span class="token operator">=</span> bot_rect<span class="token punctuation">,</span>
      ymax <span class="token operator">=</span> top_rect
    <span class="token punctuation">)</span><span class="token punctuation">,</span>
    alpha <span class="token operator">=</span> <span class="token number">.5</span><span class="token punctuation">,</span>
    color <span class="token operator">=</span> <span class="token string">"#ffbe7f"</span><span class="token punctuation">,</span>
    fill <span class="token operator">=</span> <span class="token string">"#282828"</span><span class="token punctuation">,</span>
    size <span class="token operator">=</span> <span class="token number">.5</span>
  <span class="token punctuation">)</span> <span class="token operator">+</span>
  geom_text<span class="token punctuation">(</span>
    aes<span class="token punctuation">(</span>x <span class="token operator">=</span> mid_box<span class="token punctuation">,</span> y <span class="token operator">=</span> box_height <span class="token operator">+</span> <span class="token number">.002</span><span class="token punctuation">,</span>
        label <span class="token operator">=</span> <span class="token string">"SPRINGFIELD&#92;n"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    color <span class="token operator">=</span> <span class="token string">"white"</span><span class="token punctuation">,</span>
    family <span class="token operator">=</span> <span class="token string">"Lato"</span><span class="token punctuation">,</span>
    fontface <span class="token operator">=</span> <span class="token string">"bold"</span><span class="token punctuation">,</span>
    size <span class="token operator">=</span> <span class="token number">9</span>
  <span class="token punctuation">)</span> <span class="token operator">+</span>
  geom_segment<span class="token punctuation">(</span>aes<span class="token punctuation">(</span>
    x <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token number">.03</span><span class="token punctuation">,</span>
    y <span class="token operator">=</span> <span class="token punctuation">(</span>top_rect <span class="token operator">+</span> bottom<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span>
    xend <span class="token operator">=</span> right <span class="token operator">-</span> <span class="token number">.03</span><span class="token punctuation">,</span>
    yend <span class="token operator">=</span> <span class="token punctuation">(</span>top_rect <span class="token operator">+</span> bottom<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span>
  <span class="token punctuation">)</span><span class="token punctuation">,</span>
  color <span class="token operator">=</span> <span class="token string">"#ffbe7f"</span><span class="token punctuation">)</span> <span class="token operator">+</span>
  geom_label<span class="token punctuation">(</span>
    aes<span class="token punctuation">(</span>x <span class="token operator">=</span> mid_box<span class="token punctuation">,</span> y <span class="token operator">=</span> box_height <span class="token operator">-</span> <span class="token number">.005</span><span class="token punctuation">,</span>
        label <span class="token operator">=</span> <span class="token string">"MISSOURI"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    color <span class="token operator">=</span> <span class="token string">"white"</span><span class="token punctuation">,</span>
    fill <span class="token operator">=</span> <span class="token string">"#282828"</span><span class="token punctuation">,</span>
    <span class="token comment"># alpha = .9,</span>
    label.size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
    family <span class="token operator">=</span> <span class="token string">"Lato"</span><span class="token punctuation">,</span>
    <span class="token comment"># fontface = "thin",</span>
    size <span class="token operator">=</span> <span class="token number">7</span>
  <span class="token punctuation">)</span> <span class="token operator">+</span>
  geom_text<span class="token punctuation">(</span>
    aes<span class="token punctuation">(</span>x <span class="token operator">=</span> mid_box<span class="token punctuation">,</span> y <span class="token operator">=</span> box_height <span class="token operator">-</span> <span class="token number">.02</span><span class="token punctuation">,</span>
        label <span class="token operator">=</span> <span class="token string">"37.2090\xB0 N / 93.2923\xB0 W"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    color <span class="token operator">=</span> <span class="token string">"white"</span><span class="token punctuation">,</span>
    family <span class="token operator">=</span> <span class="token string">"Lato"</span><span class="token punctuation">,</span>
    size <span class="token operator">=</span> <span class="token number">4</span>
  <span class="token punctuation">)</span> <span class="token operator">+</span>
  geom_label<span class="token punctuation">(</span>
    aes<span class="token punctuation">(</span>
      x <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token number">.035</span><span class="token punctuation">,</span>
      y <span class="token operator">=</span> top_rect <span class="token operator">+</span> <span class="token number">.005</span><span class="token punctuation">,</span>
      label <span class="token operator">=</span> <span class="token string">"Design: Connor Rothschild"</span>
    <span class="token punctuation">)</span><span class="token punctuation">,</span>
    size <span class="token operator">=</span> <span class="token number">1.5</span><span class="token punctuation">,</span>
    color <span class="token operator">=</span> <span class="token string">"white"</span><span class="token punctuation">,</span>
    fill <span class="token operator">=</span> <span class="token string">"#282828"</span><span class="token punctuation">,</span>
    label.size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
    family <span class="token operator">=</span> <span class="token string">"Lato"</span>
  <span class="token punctuation">)</span>

map_gold</code>`}<!-- HTML_TAG_END --></pre>
${validate_component(Image, "Image").$$render($$result, {
      alt: "A gold map of Springfield, Missouri.",
      src: "../images/blog/map-springfield/gold_map_springfield.png",
      width: "50%",
      centered: true
    }, {}, {})}`
  })}`;
});
var mapSpringfield = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  "default": Map_springfield,
  metadata: metadata$6
});
var metadata$5 = {
  "layout": "blog",
  "title": "Create Dumbbell Plots to Visualize Group Differences in R",
  "description": "How to create dumbbell plots in R, using {ggalt}",
  "date": "2020-03-02",
  "image": "dumbbell-plots/header.png",
  "archived": true
};
var Dumbbell_plots = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign($$props, metadata$5), {}, {
    default: () => `${validate_component(Image, "Image").$$render($$result, {
      alt: "A dumbbell plot depicting in-group differences between Republicans and Democrats' worry about the Coronavirus. It shows that Republicans are less worried than Democrats. The question text survey respondents answered is 'How concerned are you that you or someone you know will be infected with the Coronavirus?'",
      src: "../images/blog/dumbbell-plots/featured.jpg"
    }, {}, {})}
<p>As of this writing, nearly <a href="${"https://www.worldometers.info/coronavirus/coronavirus-death-toll/"}" rel="${"nofollow"}">6000</a> people have died of COVID-19 and another <a href="${"https://www.worldometers.info/coronavirus/coronavirus-death-toll/"}" rel="${"nofollow"}">150,000</a> have been infected. All signs seem to show that the virus is only growing.</p>
<p>But some groups are less worried about COVID-19 than others. Recent <a href="${"https://poll.qu.edu/national/release-detail?ReleaseID=3657#.XmaSrM7okEs.twitter"}" rel="${"nofollow"}">polling</a> from Quinnipiac University suggests that worries about the coronavirus are related to one\u2019s partisan identity, age, and race.</p>
<p>Let\u2019s visualize that to see just how stark the differences are. I use dumbbell dot plots because they\u2019re some of the most powerful tools for visualizing differences between two groups (e.g. Republicans and Democrats).</p>
<h2 id="${"political-affiliation"}"><a href="${"#political-affiliation"}">Political affiliation</a></h2>
<p>Republicans tend to be significantly less worried about coronavirus than Democrats. This is true in two regards. First, with respect to <em>concern for becoming infected</em>:</p>
${validate_component(Image, "Image").$$render($$result, {
      alt: "A dumbbell plot depicting in-group differences between Republicans and Democrats' worry about the Coronavirus. It shows that Republicans are less worried than Democrats. The question text survey respondents answered is 'How concerned are you that you or someone you know will be infected with the Coronavirus?'",
      src: "../images/blog/dumbbell-plots/partisan-worry.jpg"
    }, {}, {})}
<p>It\u2019s also true when we look at concern than COVID-19 will <em>disrupt an individual\u2019s life</em>:</p>
${validate_component(Image, "Image").$$render($$result, {
      alt: "A dumbbell plot depicting in-group differences between Republicans and Democrats' worry about the Coronavirus. It shows that Republicans are less worried than Democrats. The question text survey respondents answered is 'How concerned are you that the coronavirus will disrupt your daily life?'",
      src: "../images/blog/dumbbell-plots/partisan-disrupt.jpg"
    }, {}, {})}
<p>Looking at the first plot, we notice that Republicans are <strong>3x more likely</strong> than Democrats to say that they are \u2019not concerned at all\u2019 by the prospect of coronavirus infecting them or someone they know. By contrast, Democrats are nearly <strong>3x as likely</strong> as Republicans to say that they are \u2018very concerned\u2019 by the same risk.</p>
<p>The second plot shows us similar trends for fears of disruption: 3 in 4 Democrats are concerned (very or somewhat) that COVID-19 will disrupt their daily lives, compared to only 38% of Republicans. While 26% of Democrats are not worried about disruption, the same is true for 61% of Republicans.</p>
<h2 id="${"age"}"><a href="${"#age"}">Age</a></h2>
<p>There is also a relationship between age and fears related to the coronavirus.</p>
${validate_component(Image, "Image").$$render($$result, {
      alt: "A dumbbell plot depicting in-group differences between different age groups' worry about the Coronavirus. It shows that older respondents are more concerned than younger ones. The question text survey respondents answered is 'How concerned are you that you or someone you know will be infected with the Coronavirus?'",
      src: "../images/blog/dumbbell-plots/age-disrupt.jpg"
    }, {}, {})}
${validate_component(Image, "Image").$$render($$result, {
      alt: "A dumbbell plot depicting in-group differences between different age groups' worry about the Coronavirus. It shows that older respondents are more concerned than younger ones. The question text survey respondents answered is 'How concerned are you that you or someone you know will be infected with the Coronavirus?'",
      src: "../images/blog/dumbbell-plots/age-worry.jpg"
    }, {}, {})}
<p>These plots show that there are significant differences in worry by age, but that fears of disruption are felt more universally than fears of infection. The first plot shows that <em>every age group</em> fears that COVID-19 will disrupt their daily lives; although younger people express this sentiment less frequently. The second plot <strong>the majority of people under age 50 are unconcerned by the prospect of COVID-19 infection</strong>. The opposite is true for older respondents; those aged 65 years and old are <strong>significantly</strong> more likely to be concerned by the risk of infection (62% vs 37%).</p>
<h2 id="${"why-dumbbell-plots"}"><a href="${"#why-dumbbell-plots"}">Why dumbbell plots?</a></h2>
<p>Dumbbell plots are an alternative to grouped barcharts. Like barcharts, they show differences between populations and they more powerfully represent the <em>distances between two groups</em>. They are frequently used by survey research firms such as the Pew Research Center, as seen in this <a href="${"https://twitter.com/pewresearch/status/1238345807348334593/photo/1"}" rel="${"nofollow"}">example</a>:</p>
${validate_component(Image, "Image").$$render($$result, {
      alt: "A dumbbell plot from the Pew Research Center, showcasing perceived importance of US military bases by the age of the respondent; older folks think overseas bases are more important.",
      src: "../images/blog/dumbbell-plots/pew.jpg"
    }, {}, {})}
<p>While a barchart would require eight bars to visualize each datapoint above, a dumbbell dot plot shows eight dots <em>on four lines</em>, reducing clutter and emphasizing the differences <em>between groups</em>.</p>
<p>Here\u2019s another example, this time from <a href="${"https://www.axios.com/trumps-disapproval-rate-is-up-in-every-state-2495232720.html?utm_source=twitter&utm_medium=social&utm_campaign=organic&utm_content=infographic&utm_term=politics"}" rel="${"nofollow"}">Axios</a> (visualizing changes in presidential disapproval between January and October 2017):</p>
${validate_component(Image, "Image").$$render($$result, {
      alt: "A dumbbell plot from Axios, which showcases changes in approval ratings between January and October 2017, by state. Most states have become more disapproving of the President.",
      src: "../images/blog/dumbbell-plots/axios.jpg"
    }, {}, {})}
<p>This pseudo-dumbbell plot (dumbbells with weird endpoints; don\u2019t pick up that side!) has 50 \u2018groups\u2019 (US states), but only two <em>outcomes</em> (January and October). A dumbbell plot is <em>far</em> superior to a grouped bar chart in this case because it emphasizes the difference is between two periods of time, and it does so with fewer objects (50 lines rather than 100 bars) than a barchart would use.</p>
<p>One key lesson from the examples above: If the <em>comparison</em> of interest is between two groups (e.g. Republicans and Democrats), or if the <em>outcome</em> of interest is two-fold (e.g. \u2018concerned\u2019 and \u2018not concerned\u2019), dot plots are a superior way to visualize your data.</p>
<h2 id="${"lets-make-it-in-r"}"><a href="${"#lets-make-it-in-r"}">Let\u2019s make it in R!</a></h2>
<p>Now it\u2019s time to make your own dumbbell dot plot. We\u2019ll be creating this viz:</p>
${validate_component(Image, "Image").$$render($$result, {
      alt: "A dumbbell plot depicting in-group differences between Republicans and Democrats' worry about the Coronavirus. It shows that Republicans are less worried than Democrats. The question text survey respondents answered is 'How concerned are you that you or someone you know will be infected with the Coronavirus?'",
      src: "../images/blog/dumbbell-plots/partisan-worry.jpg"
    }, {}, {})}
<p>For reference, the data I\u2019m using looks like this:</p>
${validate_component(Image, "Image").$$render($$result, {
      alt: "A dumbbell plot depicting in-group differences between Republicans and Democrats' worry about the Coronavirus. It shows that Republicans are less worried than Democrats. The question text survey respondents answered is 'How concerned are you that the coronavirus will disrupt your daily life?'",
      src: "../images/blog/dumbbell-plots/partisan-disrupt.jpg"
    }, {}, {})}
<p>Pretty simple, right? <a href="${"https://poll.qu.edu/national/release-detail?ReleaseID=3657#.XmaSrM7okEs.twitter"}" rel="${"nofollow"}">It comes from here, by the way.</a></p>
<p>The process relies on Bob Rudis\u2019s <code>ggalt</code> package and the <code>geom_dumbbell</code> function, which does most of the heavy lifting. This tutorial is mostly a step-by-step recreation of Rudis\u2019s code <a href="${"https://rud.is/b/2016/04/17/ggplot2-exercising-with-ggalt-dumbbells/"}" rel="${"nofollow"}">found here</a>.</p>
<p>For convenience, let\u2019s define a few things before we get started:</p>
<pre class="${"language-r"}"><!-- HTML_TAG_START -->${`<code class="language-r">blue <span class="token operator">&lt;-</span> <span class="token string">"#0171CE"</span>
red <span class="token operator">&lt;-</span> <span class="token string">"#DE4433"</span></code>`}<!-- HTML_TAG_END --></pre>
<p>In addition to the colors, we create a hack-y function which allows us to selectively label points (thanks to Bob Rudis for <a href="${"https://rud.is/b/2016/04/17/ggplot2-exercising-with-ggalt-dumbbells/"}" rel="${"nofollow"}">this</a>, again):</p>
<pre class="${"language-r"}"><!-- HTML_TAG_START -->${`<code class="language-r">percent_first <span class="token operator">&lt;-</span> <span class="token keyword">function</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  x <span class="token operator">&lt;-</span> sprintf<span class="token punctuation">(</span><span class="token string">"%d%%"</span><span class="token punctuation">,</span> round<span class="token punctuation">(</span>x<span class="token operator">*</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  x<span class="token punctuation">[</span><span class="token number">2</span><span class="token operator">:</span>length<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">&lt;-</span> sub<span class="token punctuation">(</span><span class="token string">"%$"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> x<span class="token punctuation">[</span><span class="token number">2</span><span class="token operator">:</span>length<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
  x
<span class="token punctuation">&#125;</span></code>`}<!-- HTML_TAG_END --></pre>
<h3 id="${"step-1-barebones"}"><a href="${"#step-1-barebones"}">Step 1: Barebones</a></h3>
<p>We begin with a basic <code>ggplot</code> object. In <code>geom_segment</code>, we define the pseudo-grid lines (one for each \u2018level\u2019 of concern).</p>
<pre class="${"language-r"}"><!-- HTML_TAG_START -->${`<code class="language-r">library<span class="token punctuation">(</span>ggplot2<span class="token punctuation">)</span>
library<span class="token punctuation">(</span>ggalt<span class="token punctuation">)</span>
library<span class="token punctuation">(</span>tidyverse<span class="token punctuation">)</span>

ggplot<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span>
  geom_segment<span class="token punctuation">(</span>data<span class="token operator">=</span>infected<span class="token punctuation">,</span> aes<span class="token punctuation">(</span>y<span class="token operator">=</span>concerned<span class="token punctuation">,</span> yend<span class="token operator">=</span>concerned<span class="token punctuation">,</span> x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> xend<span class="token operator">=</span><span class="token number">.5</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
               color<span class="token operator">=</span><span class="token string">"#b2b2b2"</span><span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token number">0.15</span><span class="token punctuation">)</span></code>`}<!-- HTML_TAG_END --></pre>
<p>Here, <code>geom_segment</code> creates grey lines with a size of 0.15. The lines span from 0 to 0.5. This changes according to your data; because the largest number we are dealing with is .43 (representing 43% of Democrats), our bound on the right side can be 0.5; this also leaves room for the difference column which we create later.</p>
${validate_component(Image, "Image").$$render($$result, {
      alt: "A blank canvas with only plot bounds.",
      src: "../images/blog/dumbbell-plots/process-0.jpg"
    }, {}, {})}
<p>Then, <code>geom_dumbbell</code> reads in our data and creates the dumbbells: we specify the <em>beginning</em> (<code>x</code>) of each dumbbell to represent Republicans and the <em>end</em> (<code>xend</code>) to correspond to Democrats. Other specifications affect the accompanying line and points.</p>
<pre class="${"language-r"}"><!-- HTML_TAG_START -->${`<code class="language-r">geom_dumbbell<span class="token punctuation">(</span>data<span class="token operator">=</span>infected<span class="token punctuation">,</span> aes<span class="token punctuation">(</span>y<span class="token operator">=</span>concerned<span class="token punctuation">,</span> x<span class="token operator">=</span>rep<span class="token punctuation">,</span> xend<span class="token operator">=</span>dem<span class="token punctuation">)</span><span class="token punctuation">,</span>
                           size<span class="token operator">=</span><span class="token number">1.5</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">"#b2b2b2"</span><span class="token punctuation">,</span> size_x<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> size_xend <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span>
                           colour_x <span class="token operator">=</span> red<span class="token punctuation">,</span> colour_xend <span class="token operator">=</span> blue<span class="token punctuation">)</span></code>`}<!-- HTML_TAG_END --></pre>
<p>That code creates the following plot:</p>
${validate_component(Image, "Image").$$render($$result, {
      alt: "Four lines appear, each corresponding to the level of concern. The end of each line (signified with a blue or red dot) represents Democrats' and Republicans' level of concern. The x axis is percentage of respondents.",
      src: "../images/blog/dumbbell-plots/process-1.jpg"
    }, {}, {})}
<p>Already, we can begin to see the barebones for the finished version: each dumbbell represents a level of concern, and visualizes Republicans and Democrats\u2019 proportions for that level.</p>
<h3 id="${"step-2-labels"}"><a href="${"#step-2-labels"}">Step 2: Labels</a></h3>
<p>The next step is creating the \u201CRepublican\u201D and \u201CDemocrat\u201D labels (in case colors aren\u2019t enough, or the image is seen in black and white!).</p>
<p>We can create labels with the following code:</p>
<pre class="${"language-r"}"><!-- HTML_TAG_START -->${`<code class="language-r">geom_text<span class="token punctuation">(</span>data<span class="token operator">=</span>filter<span class="token punctuation">(</span>infected<span class="token punctuation">,</span> concerned<span class="token operator">==</span><span class="token string">"Very concerned"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
          aes<span class="token punctuation">(</span>x<span class="token operator">=</span>dem<span class="token punctuation">,</span> y<span class="token operator">=</span>concerned<span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">"Democrats"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
          color<span class="token operator">=</span>blue<span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> vjust<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1.5</span><span class="token punctuation">,</span> fontface<span class="token operator">=</span><span class="token string">"bold"</span><span class="token punctuation">,</span> family<span class="token operator">=</span><span class="token string">"Lato"</span><span class="token punctuation">)</span> <span class="token operator">+</span>
geom_text<span class="token punctuation">(</span>data<span class="token operator">=</span>filter<span class="token punctuation">(</span>infected<span class="token punctuation">,</span> concerned<span class="token operator">==</span><span class="token string">"Very concerned"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
          aes<span class="token punctuation">(</span>x<span class="token operator">=</span>rep<span class="token punctuation">,</span> y<span class="token operator">=</span>concerned<span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">"Republicans"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
          color<span class="token operator">=</span>red<span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> vjust<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1.5</span><span class="token punctuation">,</span> fontface<span class="token operator">=</span><span class="token string">"bold"</span><span class="token punctuation">,</span> family<span class="token operator">=</span><span class="token string">"Lato"</span><span class="token punctuation">)</span></code>`}<!-- HTML_TAG_END --></pre>
<p>This code is hopefully quite intuitive. Since we are only showing the labels once, we specify a filter in the <code>data</code> argument of <code>geom_text</code>. If we instead wanted to show the labels for only the bottom level of concern, we would specify <code>data=filter(infected, concerned==&quot;Not concerned at all\u201D)</code>.</p>
<p>We label each point at its respective political affiliation, and we specify color according to the point color. The rest is just minor beautification for the text.</p>
${validate_component(Image, "Image").$$render($$result, {
      alt: "In addition to the prior plot, there are now labels appended for each party.",
      src: "../images/blog/dumbbell-plots/process-2.jpg"
    }, {}, {})}
<p>We also have to add direct labels for values, so that the exact percentages for each group are clear:</p>
<pre class="${"language-r"}"><!-- HTML_TAG_START -->${`<code class="language-r">geom_text<span class="token punctuation">(</span>data<span class="token operator">=</span>infected<span class="token punctuation">,</span> aes<span class="token punctuation">(</span>x<span class="token operator">=</span>rep<span class="token punctuation">,</span> y<span class="token operator">=</span>concerned<span class="token punctuation">,</span> label<span class="token operator">=</span>percent_first<span class="token punctuation">(</span>rep<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
          color<span class="token operator">=</span>red<span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token number">2.75</span><span class="token punctuation">,</span> vjust<span class="token operator">=</span><span class="token number">2.5</span><span class="token punctuation">,</span> family<span class="token operator">=</span><span class="token string">"Lato"</span><span class="token punctuation">)</span> <span class="token operator">+</span>
geom_text<span class="token punctuation">(</span>data<span class="token operator">=</span>infected<span class="token punctuation">,</span> color<span class="token operator">=</span>blue<span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token number">2.75</span><span class="token punctuation">,</span> vjust<span class="token operator">=</span><span class="token number">2.5</span><span class="token punctuation">,</span> family<span class="token operator">=</span><span class="token string">"Lato"</span><span class="token punctuation">,</span>
          aes<span class="token punctuation">(</span>x<span class="token operator">=</span>dem<span class="token punctuation">,</span> y<span class="token operator">=</span>concerned<span class="token punctuation">,</span> label<span class="token operator">=</span>percent_first<span class="token punctuation">(</span>dem<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code>`}<!-- HTML_TAG_END --></pre>
<p>Here, we utilize the function <code>percent_first</code> we defined earlier, because we only want percentages to appear on the first numbers (to reduce clutter). The rest of the labels are just numbers which represent percentages. The syntax here is simple syntax that should be familiar to <code>ggplot</code> users. It creates this output:</p>
${validate_component(Image, "Image").$$render($$result, {
      alt: "In addition to the prior plot, there are now direct labels for the percent of respondents represented by each point.",
      src: "../images/blog/dumbbell-plots/process-3.jpg"
    }, {}, {})}
<h3 id="${"step-3-a-differences-column"}"><a href="${"#step-3-a-differences-column"}">Step 3: A differences column</a></h3>
<p>Finally, we want to help our viewers see <em>how stark</em> the differences between Democrats and Republicans really is. We do so with a differences column.</p>
<pre class="${"language-r"}"><!-- HTML_TAG_START -->${`<code class="language-r">geom_rect<span class="token punctuation">(</span>data<span class="token operator">=</span>infected<span class="token punctuation">,</span> aes<span class="token punctuation">(</span>xmin<span class="token operator">=</span><span class="token number">.5</span><span class="token punctuation">,</span> xmax<span class="token operator">=</span><span class="token number">.6</span><span class="token punctuation">,</span> ymin<span class="token operator">=</span><span class="token operator">-</span><span class="token number">Inf</span><span class="token punctuation">,</span> ymax<span class="token operator">=</span><span class="token number">Inf</span><span class="token punctuation">)</span><span class="token punctuation">,</span> fill<span class="token operator">=</span><span class="token string">"grey"</span><span class="token punctuation">)</span> <span class="token operator">+</span>
geom_text<span class="token punctuation">(</span>data<span class="token operator">=</span>infected<span class="token punctuation">,</span> aes<span class="token punctuation">(</span>label<span class="token operator">=</span>paste0<span class="token punctuation">(</span>diff<span class="token operator">*</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token string">"%"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> y<span class="token operator">=</span>concerned<span class="token punctuation">,</span> x<span class="token operator">=</span><span class="token number">.55</span><span class="token punctuation">)</span><span class="token punctuation">,</span> fontface<span class="token operator">=</span><span class="token string">"bold"</span><span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> family<span class="token operator">=</span><span class="token string">"Lato"</span><span class="token punctuation">)</span> <span class="token operator">+</span>
geom_text<span class="token punctuation">(</span>data<span class="token operator">=</span>filter<span class="token punctuation">(</span>infected<span class="token punctuation">,</span> concerned<span class="token operator">==</span><span class="token string">"Very concerned"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            aes<span class="token punctuation">(</span>x<span class="token operator">=</span><span class="token number">.55</span><span class="token punctuation">,</span> y<span class="token operator">=</span>concerned<span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">"Difference"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            color<span class="token operator">=</span><span class="token string">"black"</span><span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token number">3.1</span><span class="token punctuation">,</span> vjust<span class="token operator">=</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> fontface<span class="token operator">=</span><span class="token string">"bold"</span><span class="token punctuation">,</span> family<span class="token operator">=</span><span class="token string">"Lato"</span><span class="token punctuation">)</span> <span class="token operator">+</span>
scale_x_continuous<span class="token punctuation">(</span>expand<span class="token operator">=</span>c<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> limits<span class="token operator">=</span>c<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">.625</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span>
scale_y_discrete<span class="token punctuation">(</span>expand<span class="token operator">=</span>c<span class="token punctuation">(</span><span class="token number">0.2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code>`}<!-- HTML_TAG_END --></pre>
<p>Here, we first create a grey rectangle with <code>geom_rect</code>. It spans the entire chart vertically, hence why <code>ymin</code> and <code>ymax</code> range from negative to positive infinity. Next, we create labels according to the differences column. We position each of them according to the degree of concern (our y-axis). Finally, we expand the bounds of the chart so its a bit prettier:</p>
${validate_component(Image, "Image").$$render($$result, {
      alt: "In addition to the prior plot, there is now a 'differences' column which has the difference between Republican and Democrat proportions added as a percent.",
      src: "../images/blog/dumbbell-plots/process-4.jpg"
    }, {}, {})}
<h3 id="${"step-4-titles-labels--captions"}"><a href="${"#step-4-titles-labels--captions"}">Step 4: Titles, labels &amp; captions</a></h3>
<p>Finally, let\u2019s add our title, subtitle, caption, and axis labels:</p>
<pre class="${"language-r"}"><!-- HTML_TAG_START -->${`<code class="language-r">labs<span class="token punctuation">(</span>x<span class="token operator">=</span><span class="token keyword">NULL</span><span class="token punctuation">,</span> y<span class="token operator">=</span><span class="token keyword">NULL</span><span class="token punctuation">,</span> title<span class="token operator">=</span><span class="token string">"Republicans are less worried about COVID-19"</span><span class="token punctuation">,</span>
       subtitle<span class="token operator">=</span>"How concerned are you that you or someone
								 you know will be infected with the coronavirus?"<span class="token punctuation">,</span>
       caption<span class="token operator">=</span>"Source<span class="token operator">:</span> Quinnipiac University Poll<span class="token punctuation">,</span> March <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">2020.</span> Q27
								&#92;n&#92;nDesign<span class="token operator">:</span> Connor Rothschild"<span class="token punctuation">)</span></code>`}<!-- HTML_TAG_END --></pre>
${validate_component(Image, "Image").$$render($$result, {
      alt: "In addition to the prior plot, there are now axis labels and a title.",
      src: "../images/blog/dumbbell-plots/process-5.jpg"
    }, {}, {})}
<p>That\u2019s our plot! Too bad its kinda ugly. Let\u2019s fix that in our final step.</p>
<h3 id="${"step-5-beautification"}"><a href="${"#step-5-beautification"}">Step 5: Beautification</a></h3>
<p>Beautification occurs using the <code>theme</code> argument.</p>
<pre class="${"language-r"}"><!-- HTML_TAG_START -->${`<code class="language-r">theme_bw<span class="token punctuation">(</span>base_family<span class="token operator">=</span><span class="token string">"Lato"</span><span class="token punctuation">)</span> <span class="token operator">+</span>
theme<span class="token punctuation">(</span>
  panel.grid.major<span class="token operator">=</span>element_blank<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  panel.grid.minor<span class="token operator">=</span>element_blank<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  panel.border<span class="token operator">=</span>element_blank<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  axis.ticks<span class="token operator">=</span>element_blank<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  axis.text.x<span class="token operator">=</span>element_blank<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  plot.title<span class="token operator">=</span>element_text<span class="token punctuation">(</span>size <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">,</span> face<span class="token operator">=</span><span class="token string">"bold"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  plot.title.position <span class="token operator">=</span> <span class="token string">"plot"</span><span class="token punctuation">,</span>
  plot.subtitle<span class="token operator">=</span>element_text<span class="token punctuation">(</span>face<span class="token operator">=</span><span class="token string">"italic"</span><span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token number">12</span><span class="token punctuation">,</span> margin<span class="token operator">=</span>margin<span class="token punctuation">(</span>b<span class="token operator">=</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  plot.caption<span class="token operator">=</span>element_text<span class="token punctuation">(</span>size<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">,</span> margin<span class="token operator">=</span>margin<span class="token punctuation">(</span>t<span class="token operator">=</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">"#7a7d7e"</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span></code>`}<!-- HTML_TAG_END --></pre>
<p>After specifying our base <code>ggplot</code> theme, <code>theme_bw</code>, we use <code>theme()</code> to specify a whole host of arguments.</p>
<p>To simplify, the above code:</p>
<ul><li>Removes grid lines (<code>panel.grid.major</code>, <code>panel.grid.minor</code>)</li>
<li>Removes the panel border (<code>panel.border</code>)</li>
<li>Removes axis ticks and axis text (<code>axis.ticks</code>, <code>axis.text.x</code>)</li>
<li>Positions the axis plot, subtitle, and caption, and styles them as well (<code>plot.title</code>, <code>plot.title.position</code>,<code>plot.subtitle</code>,<code>plot.caption</code>).</li></ul>
<p>Our final output:</p>
${validate_component(Image, "Image").$$render($$result, {
      alt: "Stylization is added to the chart. There is now a white background, Lato font, and better typography rules are followed.",
      src: "../images/blog/dumbbell-plots/process-6.jpg"
    }, {}, {})}
<h2 id="${"to-summarize"}"><a href="${"#to-summarize"}">To summarize</a></h2>
<p>Our process looked like this:</p>
${validate_component(Image, "Image").$$render($$result, {
      alt: "A GIF showcasing the prior six steps outlined in this blog post; the GIF shows the chart going from a blank canvas to a full visual.",
      src: "../images/blog/dumbbell-plots/process-gif.gif"
    }, {}, {})}
<p>The code for the above visualizations, as well as the underlying datasets and outputs, can be found <a href="${"https://github.com/connorrothschild/R/tree/master/covid"}" rel="${"nofollow"}">here</a>.</p>
<p>Thanks for reading!</p>`
  })}`;
});
var dumbbellPlots = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  "default": Dumbbell_plots,
  metadata: metadata$5
});
var metadata$4 = {
  "layout": "blog",
  "title": "Trends in Refugee Acceptance, 2002 to 2019",
  "description": "Or, how a single line of code can create a beautiful small multiples US map.",
  "date": "2020-02-02",
  "image": "refugee-trends/header.png",
  "archived": true
};
var Refugee_trends = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign($$props, metadata$4), {}, {
    default: () => `${validate_component(Image, "Image").$$render($$result, {
      alt: "A small multiples map of refugee acceptance over time, across states",
      src: "../images/blog/refugee-trends/featured.png"
    }, {}, {})}
<p>In <a href="${"https://connorrothschild.github.io/map-missing-migrants/"}" rel="${"nofollow"}">previous projects</a>, I\u2019ve explored how migration has unfolded across <em>places</em>: where migrants travel, where they go missing, and where their journeys come to a fatal end.</p>
<p>Next, I wanted to see how <em>host countries</em> have approached the migrant and refugee crisis, with a particular focus on the United States. In my mind, an effective visualization of the U.S.\u2019s response to an increasing number of refugees needs to present two things: how refugee acceptance has changed <em>over time</em> and how refugee acceptance differs <em>across states.</em></p>
<p>An effective way to present both of these trends is with a map of <a href="${"https://en.wikipedia.org/wiki/Small_multiple"}" rel="${"nofollow"}">small multiple</a> line charts. For aesthetic purposes, it would also be nice to arrange these multiples in a shape that vaguely resembles the United States. (This also makes it easier for readers to find their state of interest.)</p>
<p>There are examples of these types of small multiple maps across the internet. The Washington Post\u2019s <a href="${"https://www.washingtonpost.com/graphics/politics/how-fair-is-the-electoral-college/"}" rel="${"nofollow"}">overview of the electoral college</a> was visualized in the following way:</p>
${validate_component(Image, "Image").$$render($$result, {
      alt: "Washington Post small multiples map of electoral college data",
      src: "../images/blog/refugee-trends/wapo.png"
    }, {}, {})}
<p>You can also find an overview of <em>why</em> they work, and some additional examples, on the <a href="${"https://policyviz.com/2016/05/19/small-multiple-tile-grid-map/"}" rel="${"nofollow"}">PolicyViz</a> blog:</p>
${validate_component(Image, "Image").$$render($$result, {
      alt: "Policy Viz's small multiples of overall voting results over time",
      src: "../images/blog/refugee-trends/policyviz.jpg"
    }, {}, {})}
<h2 id="${"making-it-in-r"}"><a href="${"#making-it-in-r"}">Making it in R</a></h2>
<p>The process of creating a small multiple tile grid map is relatively easy in R (like most things done in R). It is considerably more difficult in D3.js; if you\u2019re interested in that type of thing, you can take a look at <a href="${"https://bl.ocks.org/jinniluo/a95b27b1f4ea65ae94ab6ca3fcfb5934#index.html"}" rel="${"nofollow"}">this code</a> for inspiration.</p>
<h4 id="${"step-1-build-the-basic-line-chart"}"><a href="${"#step-1-build-the-basic-line-chart"}">Step 1: Build the basic line chart</a></h4>
<p>The first step (after obnoxious data <a href="${"https://raw.githubusercontent.com/connorrothschild/R/master/refugee-trends/merge.R"}" rel="${"nofollow"}">merging</a> and cleaning) is getting a feel for the basic line chart. To do so, we can visualize the macro-level trends of refugee acceptance across <em>all states</em> combined.</p>
<pre class="${"language-r"}"><!-- HTML_TAG_START -->${`<code class="language-r">data <span class="token percent-operator operator">%>%</span>
  group_by<span class="token punctuation">(</span>region_name_3<span class="token punctuation">)</span> <span class="token percent-operator operator">%>%</span>
  summarise<span class="token punctuation">(</span>textbox37 <span class="token operator">=</span> sum<span class="token punctuation">(</span>textbox37<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token percent-operator operator">%>%</span>
  ggplot<span class="token punctuation">(</span>aes<span class="token punctuation">(</span>x <span class="token operator">=</span> region_name_3<span class="token punctuation">,</span> y <span class="token operator">=</span> textbox37<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span>
  geom_line<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span>
  labs<span class="token punctuation">(</span>title <span class="token operator">=</span> <span class="token string">"Refugee Acceptance on the Decline"</span><span class="token punctuation">,</span>
       subtitle <span class="token operator">=</span> <span class="token string">"Number of refugees accepted annually, 2002 - 2019"</span><span class="token punctuation">,</span>
       x <span class="token operator">=</span> element_blank<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
       y <span class="token operator">=</span> element_blank<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span>
  scale_y_continuous<span class="token punctuation">(</span>labels <span class="token operator">=</span> scales<span class="token operator">::</span>comma_format<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span>
  scale_x_continuous<span class="token punctuation">(</span>breaks <span class="token operator">=</span> c<span class="token punctuation">(</span><span class="token number">2002</span><span class="token punctuation">,</span> <span class="token number">2019</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code>`}<!-- HTML_TAG_END --></pre>
${validate_component(Image, "Image").$$render($$result, {
      alt: "A small multiples map of refugee acceptance over time, across states",
      src: "../images/blog/refugee-trends/macro.jpg"
    }, {}, {})}
<p>Now we have the answer to our first question: <strong>how has refugee acceptance changed over time?</strong> The answer: pretty drastically. The US accepted nearly 100,000 refugees in 2016; 2 years later, that number was barely over 20,000.</p>
<h4 id="${"step-2-make-small-multiples"}"><a href="${"#step-2-make-small-multiples"}">Step 2: Make small multiples</a></h4>
<p>Next, we make 50 of these lines: one for each US state. We do so using Ryan Hafen\u2019s <code>geofacet</code> <a href="${"https://hafen.github.io/geofacet/rd.html"}" rel="${"nofollow"}">package</a>.</p>
<p>It\u2019s as simple as adding one line of code to our previous plot:</p>
<pre class="${"language-r"}"><!-- HTML_TAG_START -->${`<code class="language-r">facet_geo<span class="token punctuation">(</span><span class="token operator">~</span> state<span class="token punctuation">)</span></code>`}<!-- HTML_TAG_END --></pre>
<p>This makes a plot that looks like this:</p>
${validate_component(Image, "Image").$$render($$result, {
      alt: "first try",
      src: "../images/blog/refugee-trends/firsttry.jpg"
    }, {}, {})}
<p>It\u2019s alright, but not perfect! There are a few improvements we can definitely make.</p>
<p>For one, the axis labels overlap. We already know the range of years is between 2002 and 2019 (its in our subtitle!). So we can remove our x axis labels.</p>
<pre class="${"language-r"}"><!-- HTML_TAG_START -->${`<code class="language-r">theme<span class="token punctuation">(</span>
  axis.text.x <span class="token operator">=</span> element_blank<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  axis.ticks.x <span class="token operator">=</span> element_blank<span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">)</span></code>`}<!-- HTML_TAG_END --></pre>
<p>Second, The axis lines (on both axes) seem unnecessary and (the x-axis specifically) can sometimes conceal trends for those states with lower values. Let\u2019s remove those too!</p>
<pre class="${"language-r"}"><!-- HTML_TAG_START -->${`<code class="language-r">theme<span class="token punctuation">(</span>
  axis.line.x <span class="token operator">=</span> element_blank<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  axis.line.y <span class="token operator">=</span> element_blank<span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">)</span></code>`}<!-- HTML_TAG_END --></pre>
<p>Finally, I don\u2019t like huge gray boxes around my axis labels. Could we make those transparent?</p>
<pre class="${"language-undefined"}"><!-- HTML_TAG_START -->${`<code class="language-undefined">theme(
    strip.background = element_rect(color = &quot;white&quot;)
)</code>`}<!-- HTML_TAG_END --></pre>
<p>Add it all together (and tweak the font size), and we get this:</p>
<pre class="${"language-r"}"><!-- HTML_TAG_START -->${`<code class="language-r">data <span class="token percent-operator operator">%>%</span>
  group_by<span class="token punctuation">(</span>region_name_3<span class="token punctuation">,</span> state<span class="token punctuation">)</span> <span class="token percent-operator operator">%>%</span>
  summarise<span class="token punctuation">(</span>textbox37 <span class="token operator">=</span> sum<span class="token punctuation">(</span>textbox37<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token percent-operator operator">%>%</span>
  ggplot<span class="token punctuation">(</span>aes<span class="token punctuation">(</span>x <span class="token operator">=</span> region_name_3<span class="token punctuation">,</span> y <span class="token operator">=</span> textbox37<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span>
  geom_line<span class="token punctuation">(</span>color <span class="token operator">=</span> <span class="token string">"black"</span><span class="token punctuation">)</span> <span class="token operator">+</span>
  scale_x_continuous<span class="token punctuation">(</span>breaks <span class="token operator">=</span> c<span class="token punctuation">(</span><span class="token number">2002</span><span class="token punctuation">,</span><span class="token number">2019</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span>
  scale_y_continuous<span class="token punctuation">(</span>breaks <span class="token operator">=</span> c<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">12000</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span>
  facet_geo<span class="token punctuation">(</span><span class="token operator">~</span> state<span class="token punctuation">,</span> grid <span class="token operator">=</span> <span class="token string">"us_state_grid1"</span><span class="token punctuation">)</span> <span class="token operator">+</span>
  labs<span class="token punctuation">(</span>title <span class="token operator">=</span> <span class="token string">"Refugee Acceptance on the Decline"</span><span class="token punctuation">,</span>
       subtitle <span class="token operator">=</span> <span class="token string">"Number of refugees accepted annually, 2002 - 2019"</span><span class="token punctuation">,</span>
       x <span class="token operator">=</span> element_blank<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
       y <span class="token operator">=</span> element_blank<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span>
  theme<span class="token punctuation">(</span>
    axis.text.x <span class="token operator">=</span> element_blank<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    axis.ticks.x <span class="token operator">=</span> element_blank<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    axis.line.x <span class="token operator">=</span> element_blank<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    axis.line.y <span class="token operator">=</span> element_blank<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    plot.title <span class="token operator">=</span> element_text<span class="token punctuation">(</span>size <span class="token operator">=</span> <span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    plot.subtitle <span class="token operator">=</span> element_text<span class="token punctuation">(</span>size <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    strip.background <span class="token operator">=</span> element_rect<span class="token punctuation">(</span>color <span class="token operator">=</span> <span class="token string">"white"</span><span class="token punctuation">)</span>
  <span class="token punctuation">)</span></code>`}<!-- HTML_TAG_END --></pre>
${validate_component(Image, "Image").$$render($$result, {
      alt: "secondtry",
      src: "../images/blog/refugee-trends/secondtry.jpg"
    }, {}, {})}
<p>Pretty good! Much better. But we can add some elements to take our visualization to the next level.</p>
<p>Because our data spans nearly 20 years (2002 to 2019), we can overlay our small multiples with other variables of interest, such as who was President during a given period.</p>
<p>We do so using <code>geom_rect</code>:</p>
<pre class="${"language-r"}"><!-- HTML_TAG_START -->${`<code class="language-r">geom_rect<span class="token punctuation">(</span>mapping<span class="token operator">=</span>aes<span class="token punctuation">(</span>xmin<span class="token operator">=</span><span class="token number">2009</span><span class="token punctuation">,</span> xmax<span class="token operator">=</span><span class="token number">2017</span><span class="token punctuation">,</span> ymin<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> ymax<span class="token operator">=</span><span class="token number">12000</span><span class="token punctuation">)</span><span class="token punctuation">,</span> fill <span class="token operator">=</span> <span class="token string">"#ADD8E6"</span><span class="token punctuation">,</span> alpha <span class="token operator">=</span> <span class="token number">.05</span><span class="token punctuation">)</span> <span class="token operator">+</span>
geom_rect<span class="token punctuation">(</span>mapping<span class="token operator">=</span>aes<span class="token punctuation">(</span>xmin<span class="token operator">=</span><span class="token number">2017</span><span class="token punctuation">,</span> xmax<span class="token operator">=</span><span class="token number">2019</span><span class="token punctuation">,</span> ymin<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> ymax<span class="token operator">=</span><span class="token number">12000</span><span class="token punctuation">)</span><span class="token punctuation">,</span> fill <span class="token operator">=</span> <span class="token string">"#FF9999"</span><span class="token punctuation">,</span> alpha <span class="token operator">=</span> <span class="token number">.05</span><span class="token punctuation">)</span> <span class="token operator">+</span></code>`}<!-- HTML_TAG_END --></pre>
<p>The first line of code creates a blue box which spans 2009 to 2017 (Obama\u2019s tenure). The second line creates a red box for Trump\u2019s presidency (so far).</p>
<p>Bringing it all together, the code and output look like this:</p>
<pre class="${"language-r"}"><!-- HTML_TAG_START -->${`<code class="language-r">data <span class="token percent-operator operator">%>%</span>
  group_by<span class="token punctuation">(</span>region_name_3<span class="token punctuation">,</span> state<span class="token punctuation">)</span> <span class="token percent-operator operator">%>%</span>
  summarise<span class="token punctuation">(</span>textbox37 <span class="token operator">=</span> sum<span class="token punctuation">(</span>textbox37<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token percent-operator operator">%>%</span>
  ggplot<span class="token punctuation">(</span>aes<span class="token punctuation">(</span>x <span class="token operator">=</span> region_name_3<span class="token punctuation">,</span> y <span class="token operator">=</span> textbox37<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span>
  geom_line<span class="token punctuation">(</span>color <span class="token operator">=</span> <span class="token string">"black"</span><span class="token punctuation">)</span> <span class="token operator">+</span>
  geom_rect<span class="token punctuation">(</span>mapping<span class="token operator">=</span>aes<span class="token punctuation">(</span>xmin<span class="token operator">=</span><span class="token number">2009</span><span class="token punctuation">,</span> xmax<span class="token operator">=</span><span class="token number">2017</span><span class="token punctuation">,</span> ymin<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> ymax<span class="token operator">=</span><span class="token number">12000</span><span class="token punctuation">)</span><span class="token punctuation">,</span> fill <span class="token operator">=</span> <span class="token string">"#ADD8E6"</span><span class="token punctuation">,</span> alpha <span class="token operator">=</span> <span class="token number">.05</span><span class="token punctuation">)</span> <span class="token operator">+</span>
  geom_rect<span class="token punctuation">(</span>mapping<span class="token operator">=</span>aes<span class="token punctuation">(</span>xmin<span class="token operator">=</span><span class="token number">2017</span><span class="token punctuation">,</span> xmax<span class="token operator">=</span><span class="token number">2019</span><span class="token punctuation">,</span> ymin<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> ymax<span class="token operator">=</span><span class="token number">12000</span><span class="token punctuation">)</span><span class="token punctuation">,</span> fill <span class="token operator">=</span> <span class="token string">"#FF9999"</span><span class="token punctuation">,</span> alpha <span class="token operator">=</span> <span class="token number">.05</span><span class="token punctuation">)</span> <span class="token operator">+</span>
  scale_x_continuous<span class="token punctuation">(</span>breaks <span class="token operator">=</span> c<span class="token punctuation">(</span><span class="token number">2002</span><span class="token punctuation">,</span><span class="token number">2019</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span>
  scale_y_continuous<span class="token punctuation">(</span>breaks <span class="token operator">=</span> c<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">12000</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span>
  facet_geo<span class="token punctuation">(</span><span class="token operator">~</span> state<span class="token punctuation">,</span> grid <span class="token operator">=</span> <span class="token string">"us_state_grid1"</span><span class="token punctuation">)</span> <span class="token operator">+</span>
  labs<span class="token punctuation">(</span>title <span class="token operator">=</span> <span class="token string">"Refugee Acceptance on the Decline"</span><span class="token punctuation">,</span>
       subtitle <span class="token operator">=</span> <span class="token string">"Number of refugees accepted annually, 2002 - 2019"</span><span class="token punctuation">,</span>
       x <span class="token operator">=</span> element_blank<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
       y <span class="token operator">=</span> element_blank<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span>
  theme<span class="token punctuation">(</span>
    axis.text.x <span class="token operator">=</span> element_blank<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    axis.ticks.x <span class="token operator">=</span> element_blank<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    axis.line.x <span class="token operator">=</span> element_blank<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    axis.line.y <span class="token operator">=</span> element_blank<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    plot.title <span class="token operator">=</span> element_text<span class="token punctuation">(</span>size <span class="token operator">=</span> <span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    plot.subtitle <span class="token operator">=</span> element_text<span class="token punctuation">(</span>size <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    strip.background <span class="token operator">=</span> element_rect<span class="token punctuation">(</span>color <span class="token operator">=</span> <span class="token string">"white"</span><span class="token punctuation">)</span>
  <span class="token punctuation">)</span></code>`}<!-- HTML_TAG_END --></pre>
${validate_component(Image, "Image").$$render($$result, {
      alt: "r version",
      src: "../images/blog/refugee-trends/ref.png"
    }, {}, {})}
<p>I brought that plot to Illustrator and made it a lot prettier. Here\u2019s the final version:</p>
${validate_component(Image, "Image").$$render($$result, {
      alt: "A small multiples map of refugee acceptance over time, across states",
      src: "../images/blog/refugee-trends/featured.png"
    }, {}, {})}
<p>What do we notice? A few key states (Texas, California, Florida, and Michigan) make up the vast majority of refugee acceptance, while other accept almost <em>no</em> <em>refugees</em>. Nearly every state has reduced their refugee acceptance since 2017, but the bulk of this decline has come from these larger states.</p>
<p>While you\u2019re here, take a look at my project <a href="${"https://connorrothschild.github.io/map-missing-migrants/"}" rel="${"nofollow"}"><em>Mapping Missing Migrants.</em></a></p>`
  })}`;
});
var refugeeTrends = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  "default": Refugee_trends,
  metadata: metadata$4
});
var metadata$3 = {
  "layout": "blog",
  "title": "Creating the ultimate scatterplot in Svelte",
  "description": "Svelte + D3, in action",
  "date": "2021-07-09",
  "image": "svelte-and-d3/header.png",
  "draft": true
};
var Svelte_scatter = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign($$props, metadata$3), {}, {
    default: () => `

<p>Earlier this year, I wrote about how I use Svelte to compose beautiful, powerful data visualizations. In that post, I documented how Svelte has gradually replaced D3 as the key tool for creating graphics. </p>
<p>Here, I\u2019ll talk less <em>why</em> and more <em>how</em>. That is, I\u2019ll explain how to create <strong>the ultimate scatterplot</strong> using Svelte.</p>
<p>We\u2019ll be taking <a href="${"https://observablehq.com/@d3/scatterplot"}" rel="${"nofollow"}">this scatterplot</a>, from the team at Observable, and recreating it (sort of). Then, we\u2019ll make it (hopefully) better.</p>
<iframe title="${"An Observable chart of cars data"}" width="${"100%"}" height="${"684"}" frameborder="${"0"}" style="${"background: white"}" src="${"https://observablehq.com/embed/@d3/scatterplot?cells=chart"}"></iframe>
<p>In specific, we\u2019ll be doing the following:</p>
<ol><li>Decide upon and record our chart dimensions</li>
<li>Create a <code>&lt;Scatterplot /&gt;</code> component</li>
<li>Create a <code>&lt;Circle /&gt;</code> component</li>
<li>Create an <code>&lt;XAxis /&gt;</code> and <code>&lt;YAxis /&gt;</code> component</li>
<li>Add interactivity via voronoi hovering</li></ol>
<h2 id="${"chart-dimensions"}"><a href="${"#chart-dimensions"}">Chart dimensions</a></h2>
<p>Our first step is to decide upon and record our chart dimensions. For the sake of our example, lets make our chart\u2019s width <code>100%</code> of its container\u2019s width, and its height <code>600px</code>. In Svelte, we can bind a variable (in our case, <code>containerWidth</code>) to the <code>offsetWidth</code> of a container.</p>
<pre class="${"language-svelte"}"><!-- HTML_TAG_START -->${`<code class="language-svelte"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">let</span> containerWidth<span class="token punctuation">;</span>
  <span class="token keyword">let</span> containerHeight <span class="token operator">=</span> <span class="token number">600</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>chart-container<span class="token punctuation">'</span></span> <span class="token attr-name"><span class="token namespace">bind:</span>offsetWidth=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>containerWidth<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span>
  <span class="token comment">&lt;!-- Chart will go here --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code>`}<!-- HTML_TAG_END --></pre>
<p>Above, we\u2019re binding <code>containerWidth</code> to constantly equal the <a href="${"https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/offsetWidth"}" rel="${"nofollow"}"><code>offsetWidth</code></a> of our <code>chart-container</code> div. This is generally a good decision because it binds the chart width to its <em>container</em>, rather than the <em>window</em>. This allows for the chart to be embedded in any sort of complex layout, and still remain properly sized.</p>
<p>More realistically, we want our <em>chart width</em> to be slightly smaller than our <em>container width</em>, so that we have room for things like axis ticks and labels. </p>
<p>We can record the exact number of pixels we want \u201Con the sides\u201D in an object called <code>margin</code>. Then, we can set a new variable, <code>chartWidth</code> to equal the container width, minus our horizontal margins.</p>
<pre class="${"language-svelte"}"><!-- HTML_TAG_START -->${`<code class="language-svelte"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">let</span> containerWidth<span class="token punctuation">;</span>
  <span class="token keyword">let</span> containerHeight <span class="token operator">=</span> <span class="token number">600</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> margin <span class="token operator">=</span> <span class="token punctuation">&#123;</span>top<span class="token operator">:</span> <span class="token number">30</span><span class="token punctuation">,</span> right<span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span> bottom<span class="token operator">:</span> <span class="token number">50</span><span class="token punctuation">,</span> left<span class="token operator">:</span> <span class="token number">50</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

  $<span class="token operator">:</span> chartWidth <span class="token operator">=</span> containerWidth <span class="token operator">-</span> margin<span class="token punctuation">.</span>left <span class="token operator">-</span> margin<span class="token punctuation">.</span>right<span class="token punctuation">;</span>
  $<span class="token operator">:</span> chartHeight <span class="token operator">=</span> containerHeight <span class="token operator">-</span> margin<span class="token punctuation">.</span>top <span class="token operator">-</span> margin<span class="token punctuation">.</span>bottom<span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>chart-container<span class="token punctuation">'</span></span> <span class="token attr-name"><span class="token namespace">bind:</span>offsetWidth=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>containerWidth<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span>
  <span class="token comment">&lt;!-- Chart will go here --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code>`}<!-- HTML_TAG_END --></pre>
${validate_component(Info, "Info").$$render($$result, {}, {}, {
      default: () => `<p>We\u2019re using the <code>$</code> notation here because <code>chartWidth</code> is <em>reactive</em>; that is, it updates according to another variable, <code>containerWidth</code>, which updates on resize.</p>`
    })}
<p>To see our reactive chart dimensions in action, play around with the width of the playground below:</p>
<iframe src="${"https://svelte.dev/repl/060a2a7847bc479eb4e456c966f096e9?version=3.38.3"}" width="${"100%"}" height="${"600"}" title="${"Responsive chart container"}"></iframe>
<h2 id="${"create-a-ltscatterplot-gt-component"}"><a href="${"#create-a-ltscatterplot-gt-component"}">Create a <code>&lt;Scatterplot /&gt;</code> component</a></h2>
<p>Now that we have our chart dimensions, we can pass those dimensions into a component<more-info content="${"A component is a reusable file that includes integrated markup, styles and functionality."}" href="${"https://v2.svelte.dev/guide"}"></more-info> that will handle the visualization itself.</p>
<p>We\u2019ll want our scatterplot component to receive four properties.<more-info content="${"Props are values passed from one component to another."}" href="${"https://svelte.dev/tutorial/declaring-props"}"></more-info></p>
<ol><li>The data (<code>data</code>)</li>
<li>Our chart width (<code>chartWidth</code>)</li>
<li>Our chart height (<code>chartHeight</code>)</li>
<li>The margins surrounding our chart (<code>margin</code>)</li></ol>
<p>In code, that looks like this:</p>
<pre class="${"language-svelte"}"><!-- HTML_TAG_START -->${`<code class="language-svelte"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>chart-container<span class="token punctuation">'</span></span> <span class="token attr-name"><span class="token namespace">bind:</span>offsetWidth=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>containerWidth<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Scatterplot</span> <span class="token language-javascript"><span class="token punctuation">&#123;</span>data<span class="token punctuation">&#125;</span></span> <span class="token attr-name">width=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>chartWidth<span class="token punctuation">&#125;</span></span> <span class="token attr-name">height=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>chartHeight<span class="token punctuation">&#125;</span></span> <span class="token language-javascript"><span class="token punctuation">&#123;</span>margin<span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code>`}<!-- HTML_TAG_END --></pre>
<p>And in <code>Scatterplot.svelte</code>, we receive our props like this:</p>
<pre class="${"language-svelte"}"><!-- HTML_TAG_START -->${`<code class="language-svelte"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">export</span> <span class="token keyword">let</span> data<span class="token punctuation">;</span>
  <span class="token keyword">export</span> <span class="token keyword">let</span> width<span class="token punctuation">;</span>
  <span class="token keyword">export</span> <span class="token keyword">let</span> height<span class="token punctuation">;</span>
  <span class="token keyword">export</span> <span class="token keyword">let</span> margin<span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code>`}<!-- HTML_TAG_END --></pre>
<p>Now that we have our dimensions, we\u2019ll want to create <em>scales</em> with them.<more-info content="${"Scales map datapoints to positions on the canvas."}" href="${"https://www.d3indepth.com/scales/"}"></more-info></p>
<p>Here, we will leverage the power of D3\u2014in particular, <a href="${"https://github.com/d3/d3-scale"}" rel="${"nofollow"}"><code>d3-scale</code></a>\u2014to map our data\u2019s values to points on our canvas.</p>
<p>We\u2019ll want to make our scales reactive according to our dynamic size variables we referenced earlier. Here, notice how we use <code>$</code> to denote reactivity, and notice how we reference <code>width</code>.</p>
<pre class="${"language-svelte"}"><!-- HTML_TAG_START -->${`<code class="language-svelte"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
<span class="token comment">// Import props...</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> scaleLinear <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"d3-scale"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> extent <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"d3-array"</span><span class="token punctuation">;</span>

$<span class="token operator">:</span> xScale <span class="token operator">=</span> <span class="token function">scaleLinear</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">domain</span><span class="token punctuation">(</span><span class="token function">extent</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">d</span><span class="token punctuation">)</span> <span class="token operator">=></span> d<span class="token punctuation">.</span>mpg<span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">range</span><span class="token punctuation">(</span><span class="token punctuation">[</span>margin<span class="token punctuation">.</span>left<span class="token punctuation">,</span> width <span class="token operator">-</span> margin<span class="token punctuation">.</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

$<span class="token operator">:</span> yScale <span class="token operator">=</span> <span class="token function">scaleLinear</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">domain</span><span class="token punctuation">(</span><span class="token function">extent</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">d</span><span class="token punctuation">)</span> <span class="token operator">=></span> d<span class="token punctuation">.</span>hp<span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">range</span><span class="token punctuation">(</span><span class="token punctuation">[</span>height <span class="token operator">-</span> margin<span class="token punctuation">.</span>top<span class="token punctuation">,</span> margin<span class="token punctuation">.</span>bottom<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code>`}<!-- HTML_TAG_END --></pre>
<p>In the above code, we\u2019re defining the domain <more-info content="${"A domain accepts the range of values to map data from."}" href="${"https://observablehq.com/@d3/introduction-to-d3s-scales#cell-104"}"></more-info> according to each cars\u2019 miles per gallon (<code>mpg</code>) and horsepower (<code>hp</code>). We set the parameters for our range <more-info content="${"A range converts the values from our domain into a specified 'range' of positions."}" href="${"https://observablehq.com/@d3/introduction-to-d3s-scales#cell-104"}"></more-info> to span the starting position (the left/bottom margin) to our chart width/height (minus our right/top margin value).</p>
<p>Now, when we pass a number into a scale, it will result in a point on the canvas. For example, the code <code>xScale(25)</code> would result in a value of <code>__</code>. </p>
<p>We\u2019ll use these scales to define the <code>cx</code> and <code>cy</code> values for each of our circles. To do so, we\u2019ll need to iterate on each datapoint and render something. </p>
<h2 id="${"iterate-with-an-123each125-block"}"><a href="${"#iterate-with-an-123each125-block"}">Iterate with an <code>{#each}</code> block</a></h2>
<p>In Svelte, an <code>{#each}</code> block<more-info content="${"These blocks of code function similarly to a for loop, but in our markup."}" href="${"https://svelte.dev/tutorial/each-blocks"}"></more-info> enables us to render listed content programatically, and include multiple attributes in the resulting markup.</p>
<p>For our data, we\u2019ll want to iterate over each <em>row</em> of our data, and pass each <em>row\u2019</em>s <code>mpg</code> and <code>hp</code> (or whatever value you want to pass to the scatterplot) into a component that will eventually render some SVG.</p>
<p>Lets learn by doing. If we simply iterated on each row and wrote out our MPG and HP values, it would look like this:</p>
<iframe src="${"https://svelte.dev/repl/7e3ec27da41440e880a49f83068fd97a?version=3.42.1\n"}" width="${"100%"}" height="${"600"}" title="${"Simple each block"}"></iframe>
<p>But we don\u2019t want to write out our values, we want to:</p>
<ol><li>Transform those values into points on the canvas</li>
<li>Pass them to a component that will render SVG elements</li></ol>
<p>To transform \u2026</p>

<h2 id="${"create-a-ltcircle-gt-component"}"><a href="${"#create-a-ltcircle-gt-component"}">Create a <code>&lt;Circle /&gt;</code> component</a></h2>
<p>Next, we want to create a <code>&lt;Circle /&gt;</code> component that will take in our mapped data, and display an SVG with the appropriate attributes. We first import our props, like so:</p>
<pre class="${"language-svelte"}"><!-- HTML_TAG_START -->${`<code class="language-svelte"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">export</span> <span class="token keyword">let</span> cx<span class="token punctuation">;</span>
  <span class="token keyword">export</span> <span class="token keyword">let</span> cy<span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code>`}<!-- HTML_TAG_END --></pre>`
  })}`;
});
var svelteScatter = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  "default": Svelte_scatter,
  metadata: metadata$3
});
var css = {
  code: "svg.svelte-1ijjfyd{width:100%;margin:0.5rem 0 1.5rem 0;border-radius:6px}rect.svelte-1ijjfyd{width:100%;height:100%}circle.svelte-1ijjfyd{cursor:crosshair}",
  map: '{"version":3,"file":"svelte-and-d3.md","sources":["svelte-and-d3.md"],"sourcesContent":["<script context=\\"module\\">\\n\\texport const metadata = {\\"layout\\":\\"blog\\",\\"title\\":\\"Making visualizations literally using Svelte + D3\\",\\"description\\":\\"Why Svelte has replaced (and complemented) D3 as my go-to tool for powerful visualizations\\",\\"image\\":\\"lorem\\",\\"date\\":\\"2021-07-02\\",\\"featured\\":true};\\n\\tconst { layout, title, description, image, date, featured } = metadata;\\n<\/script>\\n<script>\\n\\timport Layout_MDSVEX_DEFAULT from \'/Users/connorrothschild/Desktop/Projects/Svelte/new-site/src/routes/blog/layout.svelte\';\\n  // import Counter from \\"$lib/Counter.svelte\\"\\n  // import Code from \\"$lib/global/Code.svelte\\"\\n  import Image from \\"../../lib/global/Image.svelte\\"\\n  import Info from \\"../../lib/global/Info.svelte\\"\\n<\/script>\\n<style>\\nhtml {\\n    scroll-behavior: smooth;\\n}\\n\\nsvg {\\n  width: 100%;\\n  margin: 0.5rem 0 1.5rem 0;\\n  border-radius: 6px;\\n}\\n\\nrect {\\n  width: 100%; \\n  height: 100%;\\n  /* fill: rgb(var(--primary), .5); */\\n}\\n\\ncircle {\\n  cursor: crosshair;\\n}\\n</style>\\n<Layout_MDSVEX_DEFAULT {...$$props} {...metadata}>\\n\\n<p>When I started making data visualizations, I considered <a\\n  href=\\"https://d3js.org/\\"\\n  rel=\\"nofollow\\"\\n>D3</a>\u2014Data Driven Documents\u2014to be the gold standard programming language required to create beautiful graphics on the web.</p>\\n<p>As I progress in my career, I\u2019m realizing that D3 has a more particular (and smaller) role in the visualization lifecycle than I initially envisioned. As I design more visualizations, I\u2019m learning that my most efficient and intuitive development comes when I <strong>program literally</strong>. </p>\\n<p>What does that mean? (To be honest, I\u2019m making up the term.) It means that I\u2019m moving away from <em>pseudo-declarative</em> data visualization in D3, and starting to make my visualizations <em>literally</em>, by simply writing markup in <a\\n  href=\\"https://svelte.dev/\\"\\n  rel=\\"nofollow\\"\\n>Svelte</a>. </p>\\n<p>Although D3 <a href=\\"https://d3js.org/#selections\\" rel=\\"nofollow\\">claims</a> to be declarative, it still uses <a\\n  href=\\"https://www.carlosrendon.me/unfinished_d3_book/d3_method_chaining.html\\"\\n  rel=\\"nofollow\\"\\n>method chaining</a> to provide instructions to render visuals. In Svelte, we don\u2019t provide instructions but instead render our SVG elements directly, using <code>&#123;#each&#125;</code> blocks. By writing my markup literally and appending data inline, my code makes more sense and causes fewer headaches.</p>\\n<h4 id=\\"what-youll-find-in-this-post\\"><a href=\\"#what-youll-find-in-this-post\\">What you\u2019ll find in this post</a></h4>\\n<p>In this post, I\u2019ll <a href=\\"#what-d3-does-3%EF%B8%8F%E2%83%A3\\">1)</a> provide an overview of D3, and how it made the process of creating visualizations so much easier; <a\\n  href=\\"#literal-programming-with-svelte-\\"\\n>2)</a> explain why I\u2019m moving away from D3 for DOM manipulation, and instead using Svelte \u201Cliterally\u201D; and <a\\n  href=\\"#bringing-it-home-with-burgers-\\"\\n>3)</a> provide a funky burger \u{1F354} example to explain my logic.</p>\\n <Info>\\n<p>This is not a comprehensive tutorial about <strong>how to</strong> use D3 and Svelte together. I\u2019ll cover that in the <a\\n  href=\\"https://twitter.com/CL_Rothschild\\"\\n  rel=\\"nofollow\\"\\n>future</a>. In the meantime, check out tutorials from <a\\n  href=\\"https://www.youtube.com/watch?v=bnd64ZrHC0U\\"\\n  rel=\\"nofollow\\"\\n>Matthias Stahl</a>, examples of Svelte and D3 in action on The Pudding\u2019s <a\\n  href=\\"https://github.com/the-pudding/\\"\\n  rel=\\"nofollow\\"\\n>GitHub</a>, and an example of similar framework-driven logic on Amelia Wattenberger\u2019s <a\\n  href=\\"https://wattenberger.com/blog/react-and-d3\\"\\n  rel=\\"nofollow\\"\\n>blog</a>. </p>\\n<p>Want an immediate example? Here\u2019s an (admittedly verbose) <a\\n  href=\\"https://github.com/connorrothschild/bob-ross-art-gallery/blob/master/src/components/ColorViz.svelte\\"\\n  rel=\\"nofollow\\"\\n>Svelte component</a> I used in a recent project about Bob Ross.</p>\\n</Info> \\n<h2 id=\\"what-d3-does-3\uFE0F\u20E3\\"><a href=\\"#what-d3-does-3\uFE0F\u20E3\\">What D3 does 3\uFE0F\u20E3</a></h2>\\n<p>D3 allows for intuitive transformations of the DOM by leveraging easy-to-understand selection syntax. Sound confusing? Let\u2019s learn through an example (adapted from the <a\\n  href=\\"https://d3js.org/#selections\\"\\n  rel=\\"nofollow\\"\\n>D3 homepage</a>). Imagine we had 5 circles and wanted to change the fill of each. </p>\\n<svg>\\n  <rect width=\\"100%\\" height=\\"100%\\"></rect>\\n  <circle cx=\\"10%\\" cy=\\"50%\\" r=\\"10\\" fill=\\"steelblue\\"><title>Hello from the circle!</title></circle>\\n  <circle cx=\\"30%\\" cy=\\"50%\\" r=\\"10\\" fill=\\"steelblue\\"><title>Hello from the circle!</title></circle>\\n  <circle cx=\\"50%\\" cy=\\"50%\\" r=\\"10\\" fill=\\"steelblue\\"><title>Hello from the circle!</title></circle>\\n  <circle cx=\\"70%\\" cy=\\"50%\\" r=\\"10\\" fill=\\"steelblue\\"><title>Hello from the circle!</title></circle>\\n  <circle cx=\\"90%\\" cy=\\"50%\\" r=\\"10\\" fill=\\"steelblue\\"><title>Hello from the circle!</title></circle>\\n</svg>\\n<p>In the traditional <a\\n  href=\\"https://www.w3schools.com/js/js_htmldom.asp\\"\\n  rel=\\"nofollow\\"\\n>HTML DOM model</a>, we would 1) select all circles, 2) loop through each one, and 3) redefine its fill. In code, that would look like this:</p>\\n<pre class=\\"language-js\\">{@html `<code class=\\"language-js\\"><span class=\\"token keyword\\">var</span> circles <span class=\\"token operator\\">=</span> document<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getElementsByTagName</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"circle\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">for</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">var</span> i <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span> i <span class=\\"token operator\\">&lt;</span> circles<span class=\\"token punctuation\\">.</span>length<span class=\\"token punctuation\\">;</span> i<span class=\\"token operator\\">++</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">&#123;</span>\\n  <span class=\\"token keyword\\">var</span> circle <span class=\\"token operator\\">=</span> circles<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">item</span><span class=\\"token punctuation\\">(</span>i<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  circle<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">setAttribute</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"fill\\"</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">\\"white\\"</span><span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">&#125;</span></code>`}</pre>\\n<p>Doing this in D3 would reduce the length of our code by a factor of 5, and allows us to write in a way that <em>just makes sense</em>. Here, we select every circle and change its fill.</p>\\n<pre class=\\"language-js[filewithd3.js]\\">{@html `<code class=\\"language-js[filewithd3.js]\\">d3.selectAll(&quot;circle&quot;).style(&quot;fill&quot;, &quot;white&quot;)</code>`}</pre>\\n<svg>\\n  <rect width=\\"100%\\" height=\\"100%\\"/>\\n  <circle cx=\\"10%\\" cy=\\"50%\\" r=\\"10\\" fill=\\"white\\"><title>Hello from the circle!</title></circle>\\n  <circle cx=\\"30%\\" cy=\\"50%\\" r=\\"10\\" fill=\\"white\\"><title>Hello from the circle!</title></circle>\\n  <circle cx=\\"50%\\" cy=\\"50%\\" r=\\"10\\" fill=\\"white\\"><title>Hello from the circle!</title></circle>\\n  <circle cx=\\"70%\\" cy=\\"50%\\" r=\\"10\\" fill=\\"white\\"><title>Hello from the circle!</title></circle>\\n  <circle cx=\\"90%\\" cy=\\"50%\\" r=\\"10\\" fill=\\"white\\"><title>Hello from the circle!</title></circle>\\n</svg>\\n<p>Imagine if you also wanted to bind data to those circles. That is, you wanted to fill the circle according to some attribute, or size its radius according to some datapoint. In traditional JavaScript, that might look something like this:</p>\\n<pre class=\\"language-js\\">{@html `<code class=\\"language-js\\"><span class=\\"token keyword\\">let</span> data <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">[</span><span class=\\"token number\\">5</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">10</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">15</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">20</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">25</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token keyword\\">var</span> circles <span class=\\"token operator\\">=</span> document<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getElementsByTagName</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"circle\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">for</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">var</span> i <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span> i <span class=\\"token operator\\">&lt;</span> circles<span class=\\"token punctuation\\">.</span>length<span class=\\"token punctuation\\">;</span> i<span class=\\"token operator\\">++</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">&#123;</span>\\n  <span class=\\"token keyword\\">var</span> circle <span class=\\"token operator\\">=</span> circles<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">item</span><span class=\\"token punctuation\\">(</span>i<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  circle<span class=\\"token punctuation\\">.</span>style<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">setProperty</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"r\\"</span><span class=\\"token punctuation\\">,</span> data<span class=\\"token punctuation\\">[</span>i<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">&#125;</span></code>`}</pre>\\n<p>Not too hard\u2014but also, not too easy. D3 simplifies this logic by removing the need for a loop and iterating on your selection for you:</p>\\n<pre class=\\"language-js\\">{@html `<code class=\\"language-js\\"><span class=\\"token keyword\\">let</span> data <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">[</span><span class=\\"token number\\">5</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">10</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">15</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">20</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">25</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">;</span>\\n\\nd3<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">selectAll</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"circle\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">data</span><span class=\\"token punctuation\\">(</span>data<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">attr</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"r\\"</span><span class=\\"token punctuation\\">,</span> <span class=\\"token parameter\\">d</span> <span class=\\"token operator\\">=></span> d<span class=\\"token punctuation\\">)</span></code>`}</pre>\\n<svg>\\n  <rect width=\\"100%\\" height=\\"100%\\" />\\n  <circle cx=\\"10%\\" cy=\\"50%\\" r=\\"5\\"  fill=\\"white\\"><title>Hello from the circle!</title></circle>\\n  <circle cx=\\"30%\\" cy=\\"50%\\" r=\\"10\\" fill=\\"white\\"><title>Hello from the circle!</title></circle>\\n  <circle cx=\\"50%\\" cy=\\"50%\\" r=\\"15\\" fill=\\"white\\"><title>Hello from the circle!</title></circle>\\n  <circle cx=\\"70%\\" cy=\\"50%\\" r=\\"20\\" fill=\\"white\\"><title>Hello from the circle!</title></circle>\\n  <circle cx=\\"90%\\" cy=\\"50%\\" r=\\"25\\" fill=\\"white\\"><title>Hello from the circle!</title></circle>\\n</svg>\\n<p>Again, we reduce the length of our code nearly 5x, and the code just <strong>makes sense</strong>.</p>\\n<p>All that to say, D3 is great. It works, and it works wonderfully. By removing the need to write highly imperative code that is unintuitive in nature, D3 saves developers time and allows for more powerful visualizations.</p>\\n<p>But I\u2019m hardly using it at all recently. Increasingly, I\u2019ve been using the JavaScript <del>framework</del> compiler <a href=\\"https://svelte.dev/\\" rel=\\"nofollow\\">Svelte</a> to <em>write SVG directly</em> rather than <em>tell JavaScript to write SVG</em>. How? Let\u2019s see below.</p>\\n<h2 id=\\"literal-programming-with-svelte-\\"><a href=\\"#literal-programming-with-svelte-\\">\u201CLiteral\u201D programming with Svelte \u{1F5E3}</a></h2>\\n<p>Going back to the above circles, imagine if we could simply bind our data to our app\u2019s markup <strong>directly</strong>, without any intermediate code serving as instructions.</p>\\n<p><strong>We can!</strong> Svelte (and Vue, React and other frameworks) allow for seamless interactions between our app\u2019s logic, data, and markup, so that we can embed data directly into our SVG elements. In this new paradigm, we could replace the set of D3 instructions from earlier with the following Svelte code:</p>\\n<pre class=\\"language-svelte\\">{@html `<code class=\\"language-svelte\\"><span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>script</span><span class=\\"token punctuation\\">></span></span><span class=\\"token script\\"><span class=\\"token language-javascript\\">\\n  <span class=\\"token keyword\\">let</span> data <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">&#123;</span>x<span class=\\"token operator\\">:</span> <span class=\\"token number\\">10</span><span class=\\"token punctuation\\">,</span> r<span class=\\"token operator\\">:</span> <span class=\\"token number\\">5</span> <span class=\\"token punctuation\\">&#125;</span><span class=\\"token punctuation\\">,</span> \\n              <span class=\\"token punctuation\\">&#123;</span>x<span class=\\"token operator\\">:</span> <span class=\\"token number\\">30</span><span class=\\"token punctuation\\">,</span> r<span class=\\"token operator\\">:</span> <span class=\\"token number\\">10</span><span class=\\"token punctuation\\">&#125;</span><span class=\\"token punctuation\\">,</span> \\n              <span class=\\"token punctuation\\">&#123;</span>x<span class=\\"token operator\\">:</span> <span class=\\"token number\\">50</span><span class=\\"token punctuation\\">,</span> r<span class=\\"token operator\\">:</span> <span class=\\"token number\\">15</span><span class=\\"token punctuation\\">&#125;</span><span class=\\"token punctuation\\">,</span> \\n              <span class=\\"token punctuation\\">&#123;</span>x<span class=\\"token operator\\">:</span> <span class=\\"token number\\">70</span><span class=\\"token punctuation\\">,</span> r<span class=\\"token operator\\">:</span> <span class=\\"token number\\">20</span><span class=\\"token punctuation\\">&#125;</span><span class=\\"token punctuation\\">,</span> \\n              <span class=\\"token punctuation\\">&#123;</span>x<span class=\\"token operator\\">:</span> <span class=\\"token number\\">90</span><span class=\\"token punctuation\\">,</span> r<span class=\\"token operator\\">:</span> <span class=\\"token number\\">25</span><span class=\\"token punctuation\\">&#125;</span><span class=\\"token punctuation\\">]</span>\\n</span></span><span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>script</span><span class=\\"token punctuation\\">></span></span>\\n\\n<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>p</span><span class=\\"token punctuation\\">></span></span><span class=\\"token language-javascript\\"><span class=\\"token punctuation\\">&#123;</span>data<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">map</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">x</span> <span class=\\"token operator\\">=></span> x<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">&#125;</span></span><span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>p</span><span class=\\"token punctuation\\">></span></span></code>`}</pre>\\n<svg>\\n  <rect width=\\"100%\\" height=\\"100%\\"/>\\n  <circle cx=\\"10%\\" cy=\\"50%\\" r=\\"5\\"  fill=\\"white\\"><title>Hello from the circle with a radius of 5!</title></circle>\\n  <circle cx=\\"30%\\" cy=\\"50%\\" r=\\"10\\" fill=\\"white\\"><title>Hello from the circle with a radius of 10!</title></circle>\\n  <circle cx=\\"50%\\" cy=\\"50%\\" r=\\"15\\" fill=\\"white\\"><title>Hello from the circle with a radius of 15!</title></circle>\\n  <circle cx=\\"70%\\" cy=\\"50%\\" r=\\"20\\" fill=\\"white\\"><title>Hello from the circle with a radius of 20!</title></circle>\\n  <circle cx=\\"90%\\" cy=\\"50%\\" r=\\"25\\" fill=\\"white\\"><title>Hello from the circle with a radius of 25!</title></circle>\\n</svg>\\n<p>In my view, there are three benefits to writing our code this way:</p>\\n<ol>\\n<li><strong>More intuitive authoring.</strong> It feels much more natural to write our SVG elements <em>directly</em> rather than provide D3 instructions on how to do so.</li>\\n<li><strong>Less friction in translating D3 to the DOM.</strong> By writing SVG directly, we could copy an SVG element from the <a\\n  href=\\"https://developer.mozilla.org/en-US/docs/Web/SVG/Element/circle\\"\\n  rel=\\"nofollow\\"\\n>MDN docs</a>, paste in our values, and see immediate results. Fewer handoffs results in fewer errors.</li>\\n<li><strong>Reusability.</strong> Creating a robust and flexible <code>&lt;Circle /&gt;</code>, <code>&lt;Bar /&gt;</code>, or <code>&lt;Axis /&gt;</code> component permits consistent reuse within and across projects. D3 code is usually written as a series of blocks which lacks a natural structure and becomes difficult to reuse effectively.</li>\\n</ol>\\n<p>The only downside (which is actually just an adjustment) is that this new approach requires you to learn how to <a\\n  href=\\"https://www.w3schools.com/graphics/svg_intro.asp\\"\\n  rel=\\"nofollow\\"\\n>write SVG</a>. But isn\u2019t it a good exercise to learn the anatomy of what we\u2019re actually creating? Having knowledge of SVG elements and attributes will benefit any developer who creates visuals, no matter how they eventually do so.</p>\\n<p>Not convinced? Let me explain the logic one more time, with a tastier example:</p>\\n<h2 id=\\"bringing-it-home-with-burgers-\\"><a href=\\"#bringing-it-home-with-burgers-\\">Bringing it home with burgers \u{1F354}</a></h2>\\n<p>Imagine we want to prepare a burger. We have an array of objects, each with an ingredient and ingredient-specfic instructions. We want to 1) create each item (insert it into the DOM), and 2) carry out its instructions (execute some function).</p>\\n<pre class=\\"language-js\\">{@html `<code class=\\"language-js\\"><span class=\\"token keyword\\">let</span> ingredients <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">[</span>\\n  <span class=\\"token punctuation\\">&#123;</span>item<span class=\\"token operator\\">:</span> <span class=\\"token string\\">\\"Top Bun\\"</span><span class=\\"token punctuation\\">,</span> instruction<span class=\\"token operator\\">:</span> <span class=\\"token string\\">\\"Place at top of burger.\\"</span><span class=\\"token punctuation\\">&#125;</span><span class=\\"token punctuation\\">,</span>\\n  <span class=\\"token punctuation\\">&#123;</span>item<span class=\\"token operator\\">:</span> <span class=\\"token string\\">\\"Pickles\\"</span><span class=\\"token punctuation\\">,</span> instruction<span class=\\"token operator\\">:</span> <span class=\\"token string\\">\\"Three pickles, please.\\"</span><span class=\\"token punctuation\\">&#125;</span><span class=\\"token punctuation\\">,</span>\\n  <span class=\\"token punctuation\\">&#123;</span>item<span class=\\"token operator\\">:</span> <span class=\\"token string\\">\\"Cheese\\"</span><span class=\\"token punctuation\\">,</span> instruction<span class=\\"token operator\\">:</span> <span class=\\"token string\\">\\"Cheese is optional, but it makes the burger better.\\"</span><span class=\\"token punctuation\\">&#125;</span><span class=\\"token punctuation\\">,</span>\\n  <span class=\\"token punctuation\\">&#123;</span>item<span class=\\"token operator\\">:</span> <span class=\\"token string\\">\\"Patty\\"</span><span class=\\"token punctuation\\">,</span> instruction<span class=\\"token operator\\">:</span> <span class=\\"token string\\">\\"Cook to your satisfaction. Optionally, add two patties.\\"</span><span class=\\"token punctuation\\">&#125;</span><span class=\\"token punctuation\\">,</span>\\n  <span class=\\"token punctuation\\">&#123;</span>item<span class=\\"token operator\\">:</span> <span class=\\"token string\\">\\"Tomato\\"</span><span class=\\"token punctuation\\">,</span> instruction<span class=\\"token operator\\">:</span> <span class=\\"token string\\">\\"Should be the same width as bun, and thinly sliced.\\"</span><span class=\\"token punctuation\\">&#125;</span><span class=\\"token punctuation\\">,</span>\\n  <span class=\\"token punctuation\\">&#123;</span>item<span class=\\"token operator\\">:</span> <span class=\\"token string\\">\\"Lettuce\\"</span><span class=\\"token punctuation\\">,</span> instruction<span class=\\"token operator\\">:</span> <span class=\\"token string\\">\\"Should be the same width as bun.\\"</span><span class=\\"token punctuation\\">&#125;</span><span class=\\"token punctuation\\">,</span>\\n  <span class=\\"token punctuation\\">&#123;</span>item<span class=\\"token operator\\">:</span> <span class=\\"token string\\">\\"Bottom Bun\\"</span><span class=\\"token punctuation\\">,</span> instruction<span class=\\"token operator\\">:</span> <span class=\\"token string\\">\\"Place at bottom of burger.\\"</span><span class=\\"token punctuation\\">&#125;</span><span class=\\"token punctuation\\">,</span>\\n<span class=\\"token punctuation\\">]</span></code>`}</pre>\\n<p>There are three ways to make this burger (at least, in our fantasy world where we make burgers via code).</p>\\n<Info>\\n<p>Although I use the Svelte REPL to showcase these three examples, only the last one requires Svelte. The REPL is just a nice place to host (editable!) code \u{1F642}</p>\\n</Info>\\n<p><strong>The first option</strong> (old school) is to tell your app to loop through each ingredient, add it to the others, and stack the ingredients accordingly. For each ingredient in the loop, execute the burger-making according to our ingredient-specific instruction. This is how burgers would have been made, painfully, before D3.</p>\\n<iframe src=\\"https://svelte.dev/repl/4b4eee03981b4450aa08e402aa0ceeb6?version=3.38.3\\" width=\\"100%\\" height=\'600\' title=\\"Old school burger building\\"></iframe>\\n<p><strong>The second option</strong> (new school) is to tell your app to read in each ingredient and instruction through D3 method chaining. We remove the need for our verbose <code>for</code> loop, and use the chain to give D3 a set of sequential instructions.</p>\\n<iframe src=\\"https://svelte.dev/repl/8198de15de314aee860932629370ed09?version=3.38.3\\" width=\\"100%\\" height=\'600\' title=\\"New school burger building\\"></iframe>\\n<p><strong>Our final option</strong> (new new school), we can simply append our instructions directly to the ingredient, <em>literally</em>. Here, we skip <code>for</code> loops and we skip D3 method chaining; instead, we componentize our general \u201Cburger item\u201D and pass each ingredient/instruction directly to that component. Only Svelte enables such burgers:</p>\\n<iframe src=\\"https://svelte.dev/repl/f64bd9dcface42a1a2d544b35638631e?version=3\\" width=\\"100%\\" height=\'600\' title=\\"Literal burger building\\"></iframe>\\n<p>Which do you prefer? It\u2019s much easier to make a burger by <em>just making it</em>, rather than giving instructions, no matter what form they come in. Frameworks allow for the construction of burgers\u2014and visualizations\u2014<strong>literally</strong>. We write our ingredients (or DOM elements) directly, and include our instructions (or data) in our markup. Now that\u2019s a tasty burger.</p>\\n<h2 id=\\"the-big-picture-\\"><a href=\\"#the-big-picture-\\">The big picture \u{1F5BC}</a></h2>\\n<ol>\\n<li>Svelte allows visualization developers to <strong>write SVG directly</strong> (and avoid telling D3 what to do), while using Svelte syntax (<code>&#123;#each&#125;</code>, etc.) to avoid annoying and inefficient <code>for</code> loops. </li>\\n<li>Including logic directly in your markup (<code>&#123;#if&#125;</code>, etc.) removes the need for complex JavaScript/DOM interactions (more on that below). </li>\\n<li>Svelte works to <em>complement</em> D3, not replace it, by continuing to leverage the most powerful parts of its API: <code>d3-scale</code>, <code>d3-array</code>, <code>d3-shape</code>, etc.</li>\\n</ol>\\n<hr/>\\n<h2 id=\\"bonus-perks-\\"><a href=\\"#bonus-perks-\\">Bonus perks \u{1F3C6}</a></h2>\\n<p>Using Svelte to create visualizations has a few other perks:</p>\\n<h3 id=\\"responsiveness\\"><a href=\\"#responsiveness\\">Responsiveness</a></h3>\\n<p>By using Svelte\u2019s <a\\n  href=\\"https://svelte.dev/tutorial/reactive-declarations\\"\\n  rel=\\"nofollow\\"\\n>reactive declarations</a> (the dollar signs \u{1F4B0}), we can make certain variables  \u2018watch\u2019 for state changes and update automatically. One huge benefit of this is that we can bind our scales to updating values such as the window width, and write minimal code to make our charts update on resize.</p>\\n<pre class=\\"language-svelte\\">{@html `<code class=\\"language-svelte\\">import  windowWidth from \\"../stores/store.js\\";\\nimport  scaleLinear from \'d3-scale\';\\n\\n$: xScale = scaleLinear\\n            .domain(data.map(d => d.value))\\n            .range([0, $windowWidth])</code>`}</pre>\\n<p>With some other component watching and responding to resize events (such as <a\\n  href=\\"https://github.com/the-pudding/svelte-starter/blob/master/src/components/helpers/Window.svelte\\"\\n  rel=\\"nofollow\\"\\n>Window.svelte</a>), any SVG property depending on <code>xScale</code> will automatically update when your window resizes. You can also set the chart width itself to equal <code>$windowWidth</code> for a fully resizable, responsive chart.</p>\\n<Info>\\n<p>Another way to achieve easy responsiveness is to <a href=\\"https://svelte.dev/tutorial/dimensions\\" target=\\"_blank\\">bind the SVG\u2019s parent container\u2019s div width</a> to some variable (<code>width</code>) and set the SVG\u2019s width to match.</p>\\n</Info>\\n<h3 id=\\"ifelse-blocks\\"><a href=\\"#ifelse-blocks\\">If/else blocks</a></h3>\\n<p>In regular D3, we often use the <a\\n  href=\\"https://en.wikipedia.org/wiki/%3F:\\"\\n  rel=\\"nofollow\\"\\n>ternary operator</a> to define condition-specific attributes, like this:</p>\\n<pre class=\\"language-js\\">{@html `<code class=\\"language-js\\"><span class=\\"token comment\\">// Circles are filled green if positive, red if negative</span>\\nd3<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">selectAll</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\'circle\'</span><span class=\\"token punctuation\\">)</span>\\n  <span class=\\"token punctuation\\">.</span><span class=\\"token function\\">style</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\'fill\'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token parameter\\">d</span> <span class=\\"token operator\\">=></span> d<span class=\\"token punctuation\\">.</span>value <span class=\\"token operator\\">&lt;</span> <span class=\\"token number\\">0</span> <span class=\\"token operator\\">?</span> <span class=\\"token string\\">\'red\'</span> <span class=\\"token operator\\">:</span> <span class=\\"token string\\">\'green\'</span><span class=\\"token punctuation\\">)</span></code>`}</pre>\\n<p>This is great, but what if we want to make more significant changes based on app-wide state? For example, imagine we want to show three different types of the same visualization on different screen sizes: </p>\\n<ol>\\n<li>Desktop (over 1024px)</li>\\n<li>Tablet (520px to 1024px)</li>\\n<li>Mobile (under 520px)</li>\\n</ol>\\n<p>In D3, we would achieve this by adding a resize event listener, providing custom breakpoints, and rendering different visuals if the updated window width were within a certain range. The complicated part would be having to render a different visual at each breakpoint.</p>\\n<p>One key difference between relying on D3 and leveraging the power of Svelte is that Svelte allows for <a\\n  href=\\"https://svelte.dev/tutorial/if-blocks\\"\\n  rel=\\"nofollow\\"\\n>conditional rendering</a> <em>directly in our markup</em>, not just in our JavaScript logic. In other words, while vanilla JavaScript would approach our problem with the following:</p>\\n<pre class=\\"language-js\\">{@html `<code class=\\"language-js\\">window<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">addEventListener</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\'resize\'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">function</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">event</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">&#123;</span>\\n    <span class=\\"token keyword\\">let</span> newWidth <span class=\\"token operator\\">=</span> window<span class=\\"token punctuation\\">.</span>innerWidth<span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>newWidth <span class=\\"token operator\\">&lt;</span> <span class=\\"token number\\">520</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">&#123;</span> \\n      <span class=\\"token comment\\">// Hide tablet and desktop</span>\\n      document<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getElementById</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"tablet\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span>style<span class=\\"token punctuation\\">.</span>display <span class=\\"token operator\\">=</span> <span class=\\"token string\\">\\"none\\"</span><span class=\\"token punctuation\\">;</span>\\n      document<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getElementById</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"desktop\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span>style<span class=\\"token punctuation\\">.</span>display <span class=\\"token operator\\">=</span> <span class=\\"token string\\">\\"none\\"</span><span class=\\"token punctuation\\">;</span>\\n\\n      <span class=\\"token comment\\">// Show mobile</span>\\n      document<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getElementById</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"mobile\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span>style<span class=\\"token punctuation\\">.</span>display <span class=\\"token operator\\">=</span> <span class=\\"token string\\">\\"block\\"</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">&#125;</span> <span class=\\"token keyword\\">else</span> <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>newWidth <span class=\\"token operator\\">&lt;</span> <span class=\\"token number\\">1024</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">&#123;</span>\\n      <span class=\\"token comment\\">// Hide mobile and desktop</span>\\n      document<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getElementById</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"mobile\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span>style<span class=\\"token punctuation\\">.</span>display <span class=\\"token operator\\">=</span> <span class=\\"token string\\">\\"none\\"</span><span class=\\"token punctuation\\">;</span>\\n      document<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getElementById</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"desktop\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span>style<span class=\\"token punctuation\\">.</span>display <span class=\\"token operator\\">=</span> <span class=\\"token string\\">\\"none\\"</span><span class=\\"token punctuation\\">;</span>\\n\\n      <span class=\\"token comment\\">// Show tablet</span>\\n      document<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getElementById</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"tablet\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span>style<span class=\\"token punctuation\\">.</span>display <span class=\\"token operator\\">=</span> <span class=\\"token string\\">\\"block\\"</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">&#125;</span> <span class=\\"token keyword\\">else</span> <span class=\\"token punctuation\\">&#123;</span>\\n      <span class=\\"token comment\\">// Hide mobile and tablet</span>\\n      document<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getElementById</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"mobile\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span>style<span class=\\"token punctuation\\">.</span>display <span class=\\"token operator\\">=</span> <span class=\\"token string\\">\\"none\\"</span><span class=\\"token punctuation\\">;</span>\\n      document<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getElementById</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"tablet\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span>style<span class=\\"token punctuation\\">.</span>display <span class=\\"token operator\\">=</span> <span class=\\"token string\\">\\"none\\"</span><span class=\\"token punctuation\\">;</span>\\n\\n      <span class=\\"token comment\\">// Show desktop</span>\\n      document<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getElementById</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"desktop\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span>style<span class=\\"token punctuation\\">.</span>display <span class=\\"token operator\\">=</span> <span class=\\"token string\\">\\"block\\"</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">&#125;</span>\\n<span class=\\"token punctuation\\">&#125;</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span></code>`}</pre>\\n<p>Svelte simplifies our logic to:</p>\\n<pre class=\\"language-svelte\\">{@html `<code class=\\"language-svelte\\"><span class=\\"token language-javascript\\"><span class=\\"token punctuation\\">&#123;</span>#<span class=\\"token keyword\\">if</span> $windowWidth <span class=\\"token operator\\">&lt;</span> <span class=\\"token number\\">520</span><span class=\\"token punctuation\\">&#125;</span></span>\\n  <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>Mobile</span> <span class=\\"token punctuation\\">/></span></span>\\n<span class=\\"token language-javascript\\"><span class=\\"token punctuation\\">&#123;</span><span class=\\"token operator\\">:</span><span class=\\"token keyword\\">else</span> <span class=\\"token keyword\\">if</span> $windowWidth <span class=\\"token operator\\">&lt;</span> <span class=\\"token number\\">1024</span><span class=\\"token punctuation\\">&#125;</span></span>\\n  <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>Tablet</span> <span class=\\"token punctuation\\">/></span></span>\\n<span class=\\"token language-javascript\\"><span class=\\"token punctuation\\">&#123;</span><span class=\\"token operator\\">:</span><span class=\\"token keyword\\">else</span><span class=\\"token punctuation\\">&#125;</span></span>\\n  <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>Desktop</span> <span class=\\"token punctuation\\">/></span></span>\\n<span class=\\"token language-javascript\\"><span class=\\"token punctuation\\">&#123;</span><span class=\\"token operator\\">/</span><span class=\\"token keyword\\">if</span><span class=\\"token punctuation\\">&#125;</span></span></code>`}</pre>\\n<p>Hey, thanks for reading. I appreciate you! In the event that you disagree with me or I got something wrong, please message me on <a\\n  href=\\"https://twitter.com/CL_Rothschild\\"\\n  rel=\\"nofollow\\"\\n>Twitter</a>.</p>\\n</Layout_MDSVEX_DEFAULT>"],"names":[],"mappings":"AAgBA,GAAG,eAAC,CAAC,AACH,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CACzB,aAAa,CAAE,GAAG,AACpB,CAAC,AAED,IAAI,eAAC,CAAC,AACJ,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,AAEd,CAAC,AAED,MAAM,eAAC,CAAC,AACN,MAAM,CAAE,SAAS,AACnB,CAAC"}'
};
var metadata$2 = {
  "layout": "blog",
  "title": "Making visualizations literally using Svelte + D3",
  "description": "Why Svelte has replaced (and complemented) D3 as my go-to tool for powerful visualizations",
  "image": "lorem",
  "date": "2021-07-02",
  "featured": true
};
var Svelte_and_d3 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  $$result.css.add(css);
  return `${validate_component(Layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign($$props, metadata$2), {}, {
    default: () => `<p>When I started making data visualizations, I considered <a href="${"https://d3js.org/"}" rel="${"nofollow"}">D3</a>\u2014Data Driven Documents\u2014to be the gold standard programming language required to create beautiful graphics on the web.</p>
<p>As I progress in my career, I\u2019m realizing that D3 has a more particular (and smaller) role in the visualization lifecycle than I initially envisioned. As I design more visualizations, I\u2019m learning that my most efficient and intuitive development comes when I <strong>program literally</strong>. </p>
<p>What does that mean? (To be honest, I\u2019m making up the term.) It means that I\u2019m moving away from <em>pseudo-declarative</em> data visualization in D3, and starting to make my visualizations <em>literally</em>, by simply writing markup in <a href="${"https://svelte.dev/"}" rel="${"nofollow"}">Svelte</a>. </p>
<p>Although D3 <a href="${"https://d3js.org/#selections"}" rel="${"nofollow"}">claims</a> to be declarative, it still uses <a href="${"https://www.carlosrendon.me/unfinished_d3_book/d3_method_chaining.html"}" rel="${"nofollow"}">method chaining</a> to provide instructions to render visuals. In Svelte, we don\u2019t provide instructions but instead render our SVG elements directly, using <code>{#each}</code> blocks. By writing my markup literally and appending data inline, my code makes more sense and causes fewer headaches.</p>
<h4 id="${"what-youll-find-in-this-post"}"><a href="${"#what-youll-find-in-this-post"}">What you\u2019ll find in this post</a></h4>
<p>In this post, I\u2019ll <a href="${"#what-d3-does-3%EF%B8%8F%E2%83%A3"}">1)</a> provide an overview of D3, and how it made the process of creating visualizations so much easier; <a href="${"#literal-programming-with-svelte-"}">2)</a> explain why I\u2019m moving away from D3 for DOM manipulation, and instead using Svelte \u201Cliterally\u201D; and <a href="${"#bringing-it-home-with-burgers-"}">3)</a> provide a funky burger \u{1F354} example to explain my logic.</p>
 ${validate_component(Info, "Info").$$render($$result, {}, {}, {
      default: () => `<p>This is not a comprehensive tutorial about <strong>how to</strong> use D3 and Svelte together. I\u2019ll cover that in the <a href="${"https://twitter.com/CL_Rothschild"}" rel="${"nofollow"}">future</a>. In the meantime, check out tutorials from <a href="${"https://www.youtube.com/watch?v=bnd64ZrHC0U"}" rel="${"nofollow"}">Matthias Stahl</a>, examples of Svelte and D3 in action on The Pudding\u2019s <a href="${"https://github.com/the-pudding/"}" rel="${"nofollow"}">GitHub</a>, and an example of similar framework-driven logic on Amelia Wattenberger\u2019s <a href="${"https://wattenberger.com/blog/react-and-d3"}" rel="${"nofollow"}">blog</a>. </p>
<p>Want an immediate example? Here\u2019s an (admittedly verbose) <a href="${"https://github.com/connorrothschild/bob-ross-art-gallery/blob/master/src/components/ColorViz.svelte"}" rel="${"nofollow"}">Svelte component</a> I used in a recent project about Bob Ross.</p>`
    })} 
<h2 id="${"what-d3-does-3\uFE0F\u20E3"}"><a href="${"#what-d3-does-3\uFE0F\u20E3"}">What D3 does 3\uFE0F\u20E3</a></h2>
<p>D3 allows for intuitive transformations of the DOM by leveraging easy-to-understand selection syntax. Sound confusing? Let\u2019s learn through an example (adapted from the <a href="${"https://d3js.org/#selections"}" rel="${"nofollow"}">D3 homepage</a>). Imagine we had 5 circles and wanted to change the fill of each. </p>
<svg class="${"svelte-1ijjfyd"}"><rect width="${"100%"}" height="${"100%"}" class="${"svelte-1ijjfyd"}"></rect><circle cx="${"10%"}" cy="${"50%"}" r="${"10"}" fill="${"steelblue"}" class="${"svelte-1ijjfyd"}"><title>Hello from the circle!</title></circle><circle cx="${"30%"}" cy="${"50%"}" r="${"10"}" fill="${"steelblue"}" class="${"svelte-1ijjfyd"}"><title>Hello from the circle!</title></circle><circle cx="${"50%"}" cy="${"50%"}" r="${"10"}" fill="${"steelblue"}" class="${"svelte-1ijjfyd"}"><title>Hello from the circle!</title></circle><circle cx="${"70%"}" cy="${"50%"}" r="${"10"}" fill="${"steelblue"}" class="${"svelte-1ijjfyd"}"><title>Hello from the circle!</title></circle><circle cx="${"90%"}" cy="${"50%"}" r="${"10"}" fill="${"steelblue"}" class="${"svelte-1ijjfyd"}"><title>Hello from the circle!</title></circle></svg>
<p>In the traditional <a href="${"https://www.w3schools.com/js/js_htmldom.asp"}" rel="${"nofollow"}">HTML DOM model</a>, we would 1) select all circles, 2) loop through each one, and 3) redefine its fill. In code, that would look like this:</p>
<pre class="${"language-js"}"><!-- HTML_TAG_START -->${`<code class="language-js"><span class="token keyword">var</span> circles <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"circle"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> circles<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">var</span> circle <span class="token operator">=</span> circles<span class="token punctuation">.</span><span class="token function">item</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
  circle<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"fill"</span><span class="token punctuation">,</span> <span class="token string">"white"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`}<!-- HTML_TAG_END --></pre>
<p>Doing this in D3 would reduce the length of our code by a factor of 5, and allows us to write in a way that <em>just makes sense</em>. Here, we select every circle and change its fill.</p>
<pre class="${"language-js[filewithd3.js]"}"><!-- HTML_TAG_START -->${`<code class="language-js[filewithd3.js]">d3.selectAll(&quot;circle&quot;).style(&quot;fill&quot;, &quot;white&quot;)</code>`}<!-- HTML_TAG_END --></pre>
<svg class="${"svelte-1ijjfyd"}"><rect width="${"100%"}" height="${"100%"}" class="${"svelte-1ijjfyd"}"></rect><circle cx="${"10%"}" cy="${"50%"}" r="${"10"}" fill="${"white"}" class="${"svelte-1ijjfyd"}"><title>Hello from the circle!</title></circle><circle cx="${"30%"}" cy="${"50%"}" r="${"10"}" fill="${"white"}" class="${"svelte-1ijjfyd"}"><title>Hello from the circle!</title></circle><circle cx="${"50%"}" cy="${"50%"}" r="${"10"}" fill="${"white"}" class="${"svelte-1ijjfyd"}"><title>Hello from the circle!</title></circle><circle cx="${"70%"}" cy="${"50%"}" r="${"10"}" fill="${"white"}" class="${"svelte-1ijjfyd"}"><title>Hello from the circle!</title></circle><circle cx="${"90%"}" cy="${"50%"}" r="${"10"}" fill="${"white"}" class="${"svelte-1ijjfyd"}"><title>Hello from the circle!</title></circle></svg>
<p>Imagine if you also wanted to bind data to those circles. That is, you wanted to fill the circle according to some attribute, or size its radius according to some datapoint. In traditional JavaScript, that might look something like this:</p>
<pre class="${"language-js"}"><!-- HTML_TAG_START -->${`<code class="language-js"><span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> circles <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"circle"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> circles<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">var</span> circle <span class="token operator">=</span> circles<span class="token punctuation">.</span><span class="token function">item</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
  circle<span class="token punctuation">.</span>style<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"r"</span><span class="token punctuation">,</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`}<!-- HTML_TAG_END --></pre>
<p>Not too hard\u2014but also, not too easy. D3 simplifies this logic by removing the need for a loop and iterating on your selection for you:</p>
<pre class="${"language-js"}"><!-- HTML_TAG_START -->${`<code class="language-js"><span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

d3<span class="token punctuation">.</span><span class="token function">selectAll</span><span class="token punctuation">(</span><span class="token string">"circle"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"r"</span><span class="token punctuation">,</span> <span class="token parameter">d</span> <span class="token operator">=></span> d<span class="token punctuation">)</span></code>`}<!-- HTML_TAG_END --></pre>
<svg class="${"svelte-1ijjfyd"}"><rect width="${"100%"}" height="${"100%"}" class="${"svelte-1ijjfyd"}"></rect><circle cx="${"10%"}" cy="${"50%"}" r="${"5"}" fill="${"white"}" class="${"svelte-1ijjfyd"}"><title>Hello from the circle!</title></circle><circle cx="${"30%"}" cy="${"50%"}" r="${"10"}" fill="${"white"}" class="${"svelte-1ijjfyd"}"><title>Hello from the circle!</title></circle><circle cx="${"50%"}" cy="${"50%"}" r="${"15"}" fill="${"white"}" class="${"svelte-1ijjfyd"}"><title>Hello from the circle!</title></circle><circle cx="${"70%"}" cy="${"50%"}" r="${"20"}" fill="${"white"}" class="${"svelte-1ijjfyd"}"><title>Hello from the circle!</title></circle><circle cx="${"90%"}" cy="${"50%"}" r="${"25"}" fill="${"white"}" class="${"svelte-1ijjfyd"}"><title>Hello from the circle!</title></circle></svg>
<p>Again, we reduce the length of our code nearly 5x, and the code just <strong>makes sense</strong>.</p>
<p>All that to say, D3 is great. It works, and it works wonderfully. By removing the need to write highly imperative code that is unintuitive in nature, D3 saves developers time and allows for more powerful visualizations.</p>
<p>But I\u2019m hardly using it at all recently. Increasingly, I\u2019ve been using the JavaScript <del>framework</del> compiler <a href="${"https://svelte.dev/"}" rel="${"nofollow"}">Svelte</a> to <em>write SVG directly</em> rather than <em>tell JavaScript to write SVG</em>. How? Let\u2019s see below.</p>
<h2 id="${"literal-programming-with-svelte-"}"><a href="${"#literal-programming-with-svelte-"}">\u201CLiteral\u201D programming with Svelte \u{1F5E3}</a></h2>
<p>Going back to the above circles, imagine if we could simply bind our data to our app\u2019s markup <strong>directly</strong>, without any intermediate code serving as instructions.</p>
<p><strong>We can!</strong> Svelte (and Vue, React and other frameworks) allow for seamless interactions between our app\u2019s logic, data, and markup, so that we can embed data directly into our SVG elements. In this new paradigm, we could replace the set of D3 instructions from earlier with the following Svelte code:</p>
<pre class="${"language-svelte"}"><!-- HTML_TAG_START -->${`<code class="language-svelte"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span>x<span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span> r<span class="token operator">:</span> <span class="token number">5</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> 
              <span class="token punctuation">&#123;</span>x<span class="token operator">:</span> <span class="token number">30</span><span class="token punctuation">,</span> r<span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> 
              <span class="token punctuation">&#123;</span>x<span class="token operator">:</span> <span class="token number">50</span><span class="token punctuation">,</span> r<span class="token operator">:</span> <span class="token number">15</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> 
              <span class="token punctuation">&#123;</span>x<span class="token operator">:</span> <span class="token number">70</span><span class="token punctuation">,</span> r<span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> 
              <span class="token punctuation">&#123;</span>x<span class="token operator">:</span> <span class="token number">90</span><span class="token punctuation">,</span> r<span class="token operator">:</span> <span class="token number">25</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token language-javascript"><span class="token punctuation">&#123;</span>data<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=></span> x<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></code>`}<!-- HTML_TAG_END --></pre>
<svg class="${"svelte-1ijjfyd"}"><rect width="${"100%"}" height="${"100%"}" class="${"svelte-1ijjfyd"}"></rect><circle cx="${"10%"}" cy="${"50%"}" r="${"5"}" fill="${"white"}" class="${"svelte-1ijjfyd"}"><title>Hello from the circle with a radius of 5!</title></circle><circle cx="${"30%"}" cy="${"50%"}" r="${"10"}" fill="${"white"}" class="${"svelte-1ijjfyd"}"><title>Hello from the circle with a radius of 10!</title></circle><circle cx="${"50%"}" cy="${"50%"}" r="${"15"}" fill="${"white"}" class="${"svelte-1ijjfyd"}"><title>Hello from the circle with a radius of 15!</title></circle><circle cx="${"70%"}" cy="${"50%"}" r="${"20"}" fill="${"white"}" class="${"svelte-1ijjfyd"}"><title>Hello from the circle with a radius of 20!</title></circle><circle cx="${"90%"}" cy="${"50%"}" r="${"25"}" fill="${"white"}" class="${"svelte-1ijjfyd"}"><title>Hello from the circle with a radius of 25!</title></circle></svg>
<p>In my view, there are three benefits to writing our code this way:</p>
<ol><li><strong>More intuitive authoring.</strong> It feels much more natural to write our SVG elements <em>directly</em> rather than provide D3 instructions on how to do so.</li>
<li><strong>Less friction in translating D3 to the DOM.</strong> By writing SVG directly, we could copy an SVG element from the <a href="${"https://developer.mozilla.org/en-US/docs/Web/SVG/Element/circle"}" rel="${"nofollow"}">MDN docs</a>, paste in our values, and see immediate results. Fewer handoffs results in fewer errors.</li>
<li><strong>Reusability.</strong> Creating a robust and flexible <code>&lt;Circle /&gt;</code>, <code>&lt;Bar /&gt;</code>, or <code>&lt;Axis /&gt;</code> component permits consistent reuse within and across projects. D3 code is usually written as a series of blocks which lacks a natural structure and becomes difficult to reuse effectively.</li></ol>
<p>The only downside (which is actually just an adjustment) is that this new approach requires you to learn how to <a href="${"https://www.w3schools.com/graphics/svg_intro.asp"}" rel="${"nofollow"}">write SVG</a>. But isn\u2019t it a good exercise to learn the anatomy of what we\u2019re actually creating? Having knowledge of SVG elements and attributes will benefit any developer who creates visuals, no matter how they eventually do so.</p>
<p>Not convinced? Let me explain the logic one more time, with a tastier example:</p>
<h2 id="${"bringing-it-home-with-burgers-"}"><a href="${"#bringing-it-home-with-burgers-"}">Bringing it home with burgers \u{1F354}</a></h2>
<p>Imagine we want to prepare a burger. We have an array of objects, each with an ingredient and ingredient-specfic instructions. We want to 1) create each item (insert it into the DOM), and 2) carry out its instructions (execute some function).</p>
<pre class="${"language-js"}"><!-- HTML_TAG_START -->${`<code class="language-js"><span class="token keyword">let</span> ingredients <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token punctuation">&#123;</span>item<span class="token operator">:</span> <span class="token string">"Top Bun"</span><span class="token punctuation">,</span> instruction<span class="token operator">:</span> <span class="token string">"Place at top of burger."</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span>item<span class="token operator">:</span> <span class="token string">"Pickles"</span><span class="token punctuation">,</span> instruction<span class="token operator">:</span> <span class="token string">"Three pickles, please."</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span>item<span class="token operator">:</span> <span class="token string">"Cheese"</span><span class="token punctuation">,</span> instruction<span class="token operator">:</span> <span class="token string">"Cheese is optional, but it makes the burger better."</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span>item<span class="token operator">:</span> <span class="token string">"Patty"</span><span class="token punctuation">,</span> instruction<span class="token operator">:</span> <span class="token string">"Cook to your satisfaction. Optionally, add two patties."</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span>item<span class="token operator">:</span> <span class="token string">"Tomato"</span><span class="token punctuation">,</span> instruction<span class="token operator">:</span> <span class="token string">"Should be the same width as bun, and thinly sliced."</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span>item<span class="token operator">:</span> <span class="token string">"Lettuce"</span><span class="token punctuation">,</span> instruction<span class="token operator">:</span> <span class="token string">"Should be the same width as bun."</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span>item<span class="token operator">:</span> <span class="token string">"Bottom Bun"</span><span class="token punctuation">,</span> instruction<span class="token operator">:</span> <span class="token string">"Place at bottom of burger."</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span></code>`}<!-- HTML_TAG_END --></pre>
<p>There are three ways to make this burger (at least, in our fantasy world where we make burgers via code).</p>
${validate_component(Info, "Info").$$render($$result, {}, {}, {
      default: () => `<p>Although I use the Svelte REPL to showcase these three examples, only the last one requires Svelte. The REPL is just a nice place to host (editable!) code \u{1F642}</p>`
    })}
<p><strong>The first option</strong> (old school) is to tell your app to loop through each ingredient, add it to the others, and stack the ingredients accordingly. For each ingredient in the loop, execute the burger-making according to our ingredient-specific instruction. This is how burgers would have been made, painfully, before D3.</p>
<iframe src="${"https://svelte.dev/repl/4b4eee03981b4450aa08e402aa0ceeb6?version=3.38.3"}" width="${"100%"}" height="${"600"}" title="${"Old school burger building"}"></iframe>
<p><strong>The second option</strong> (new school) is to tell your app to read in each ingredient and instruction through D3 method chaining. We remove the need for our verbose <code>for</code> loop, and use the chain to give D3 a set of sequential instructions.</p>
<iframe src="${"https://svelte.dev/repl/8198de15de314aee860932629370ed09?version=3.38.3"}" width="${"100%"}" height="${"600"}" title="${"New school burger building"}"></iframe>
<p><strong>Our final option</strong> (new new school), we can simply append our instructions directly to the ingredient, <em>literally</em>. Here, we skip <code>for</code> loops and we skip D3 method chaining; instead, we componentize our general \u201Cburger item\u201D and pass each ingredient/instruction directly to that component. Only Svelte enables such burgers:</p>
<iframe src="${"https://svelte.dev/repl/f64bd9dcface42a1a2d544b35638631e?version=3"}" width="${"100%"}" height="${"600"}" title="${"Literal burger building"}"></iframe>
<p>Which do you prefer? It\u2019s much easier to make a burger by <em>just making it</em>, rather than giving instructions, no matter what form they come in. Frameworks allow for the construction of burgers\u2014and visualizations\u2014<strong>literally</strong>. We write our ingredients (or DOM elements) directly, and include our instructions (or data) in our markup. Now that\u2019s a tasty burger.</p>
<h2 id="${"the-big-picture-"}"><a href="${"#the-big-picture-"}">The big picture \u{1F5BC}</a></h2>
<ol><li>Svelte allows visualization developers to <strong>write SVG directly</strong> (and avoid telling D3 what to do), while using Svelte syntax (<code>{#each}</code>, etc.) to avoid annoying and inefficient <code>for</code> loops. </li>
<li>Including logic directly in your markup (<code>{#if}</code>, etc.) removes the need for complex JavaScript/DOM interactions (more on that below). </li>
<li>Svelte works to <em>complement</em> D3, not replace it, by continuing to leverage the most powerful parts of its API: <code>d3-scale</code>, <code>d3-array</code>, <code>d3-shape</code>, etc.</li></ol>
<hr>
<h2 id="${"bonus-perks-"}"><a href="${"#bonus-perks-"}">Bonus perks \u{1F3C6}</a></h2>
<p>Using Svelte to create visualizations has a few other perks:</p>
<h3 id="${"responsiveness"}"><a href="${"#responsiveness"}">Responsiveness</a></h3>
<p>By using Svelte\u2019s <a href="${"https://svelte.dev/tutorial/reactive-declarations"}" rel="${"nofollow"}">reactive declarations</a> (the dollar signs \u{1F4B0}), we can make certain variables  \u2018watch\u2019 for state changes and update automatically. One huge benefit of this is that we can bind our scales to updating values such as the window width, and write minimal code to make our charts update on resize.</p>
<pre class="${"language-svelte"}"><!-- HTML_TAG_START -->${`<code class="language-svelte">import  windowWidth from "../stores/store.js";
import  scaleLinear from 'd3-scale';

$: xScale = scaleLinear
            .domain(data.map(d => d.value))
            .range([0, $windowWidth])</code>`}<!-- HTML_TAG_END --></pre>
<p>With some other component watching and responding to resize events (such as <a href="${"https://github.com/the-pudding/svelte-starter/blob/master/src/components/helpers/Window.svelte"}" rel="${"nofollow"}">Window.svelte</a>), any SVG property depending on <code>xScale</code> will automatically update when your window resizes. You can also set the chart width itself to equal <code>$windowWidth</code> for a fully resizable, responsive chart.</p>
${validate_component(Info, "Info").$$render($$result, {}, {}, {
      default: () => `<p>Another way to achieve easy responsiveness is to <a href="${"https://svelte.dev/tutorial/dimensions"}" target="${"_blank"}">bind the SVG\u2019s parent container\u2019s div width</a> to some variable (<code>width</code>) and set the SVG\u2019s width to match.</p>`
    })}
<h3 id="${"ifelse-blocks"}"><a href="${"#ifelse-blocks"}">If/else blocks</a></h3>
<p>In regular D3, we often use the <a href="${"https://en.wikipedia.org/wiki/%3F:"}" rel="${"nofollow"}">ternary operator</a> to define condition-specific attributes, like this:</p>
<pre class="${"language-js"}"><!-- HTML_TAG_START -->${`<code class="language-js"><span class="token comment">// Circles are filled green if positive, red if negative</span>
d3<span class="token punctuation">.</span><span class="token function">selectAll</span><span class="token punctuation">(</span><span class="token string">'circle'</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">style</span><span class="token punctuation">(</span><span class="token string">'fill'</span><span class="token punctuation">,</span> <span class="token parameter">d</span> <span class="token operator">=></span> d<span class="token punctuation">.</span>value <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token string">'red'</span> <span class="token operator">:</span> <span class="token string">'green'</span><span class="token punctuation">)</span></code>`}<!-- HTML_TAG_END --></pre>
<p>This is great, but what if we want to make more significant changes based on app-wide state? For example, imagine we want to show three different types of the same visualization on different screen sizes: </p>
<ol><li>Desktop (over 1024px)</li>
<li>Tablet (520px to 1024px)</li>
<li>Mobile (under 520px)</li></ol>
<p>In D3, we would achieve this by adding a resize event listener, providing custom breakpoints, and rendering different visuals if the updated window width were within a certain range. The complicated part would be having to render a different visual at each breakpoint.</p>
<p>One key difference between relying on D3 and leveraging the power of Svelte is that Svelte allows for <a href="${"https://svelte.dev/tutorial/if-blocks"}" rel="${"nofollow"}">conditional rendering</a> <em>directly in our markup</em>, not just in our JavaScript logic. In other words, while vanilla JavaScript would approach our problem with the following:</p>
<pre class="${"language-js"}"><!-- HTML_TAG_START -->${`<code class="language-js">window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'resize'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">let</span> newWidth <span class="token operator">=</span> window<span class="token punctuation">.</span>innerWidth<span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>newWidth <span class="token operator">&lt;</span> <span class="token number">520</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> 
      <span class="token comment">// Hide tablet and desktop</span>
      document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"tablet"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">"none"</span><span class="token punctuation">;</span>
      document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"desktop"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">"none"</span><span class="token punctuation">;</span>

      <span class="token comment">// Show mobile</span>
      document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"mobile"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">"block"</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>newWidth <span class="token operator">&lt;</span> <span class="token number">1024</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token comment">// Hide mobile and desktop</span>
      document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"mobile"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">"none"</span><span class="token punctuation">;</span>
      document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"desktop"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">"none"</span><span class="token punctuation">;</span>

      <span class="token comment">// Show tablet</span>
      document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"tablet"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">"block"</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
      <span class="token comment">// Hide mobile and tablet</span>
      document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"mobile"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">"none"</span><span class="token punctuation">;</span>
      document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"tablet"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">"none"</span><span class="token punctuation">;</span>

      <span class="token comment">// Show desktop</span>
      document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"desktop"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">"block"</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>`}<!-- HTML_TAG_END --></pre>
<p>Svelte simplifies our logic to:</p>
<pre class="${"language-svelte"}"><!-- HTML_TAG_START -->${`<code class="language-svelte"><span class="token language-javascript"><span class="token punctuation">&#123;</span>#<span class="token keyword">if</span> $windowWidth <span class="token operator">&lt;</span> <span class="token number">520</span><span class="token punctuation">&#125;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Mobile</span> <span class="token punctuation">/></span></span>
<span class="token language-javascript"><span class="token punctuation">&#123;</span><span class="token operator">:</span><span class="token keyword">else</span> <span class="token keyword">if</span> $windowWidth <span class="token operator">&lt;</span> <span class="token number">1024</span><span class="token punctuation">&#125;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Tablet</span> <span class="token punctuation">/></span></span>
<span class="token language-javascript"><span class="token punctuation">&#123;</span><span class="token operator">:</span><span class="token keyword">else</span><span class="token punctuation">&#125;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Desktop</span> <span class="token punctuation">/></span></span>
<span class="token language-javascript"><span class="token punctuation">&#123;</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token punctuation">&#125;</span></span></code>`}<!-- HTML_TAG_END --></pre>
<p>Hey, thanks for reading. I appreciate you! In the event that you disagree with me or I got something wrong, please message me on <a href="${"https://twitter.com/CL_Rothschild"}" rel="${"nofollow"}">Twitter</a>.</p>`
  })}`;
});
var svelteAndD3 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  "default": Svelte_and_d3,
  metadata: metadata$2
});
var metadata$1 = {
  "layout": "blog",
  "title": "COVID-19 Posts: A Novel Dataset",
  "description": "Making hundreds of COVID-19 blog posts from the R community available for public use",
  "date": "2020-11-02",
  "image": "covid-posts/header.png",
  "archived": true
};
var Covid_posts = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign($$props, metadata$1), {}, {
    default: () => `<p>Over the last few months, we\u2019ve been collecting hundreds of COVID-19
blog posts from the R community. Today, we are excited to share this
dataset publicly, to help bloggers who want to analyze COVID-19 data by
unleashing R and the resources of its community by being able to
research such posts.</p>
<p>So far, we have found and recorded 423 COVID posts in English. In an
effort to encourage others to explore such posts, we\u2019ve published a <a href="${"https://connorrothschild.shinyapps.io/covid-posts/"}" target="${"_blank"}">Shiny web app</a>
which allow users to find the names of the 231 bloggers who wrote those
posts, their roles, and their country of focus. The app also lets users
interactively search the collection of posts by primary topic, post
title, date, and whether the post uses a particular mathematical
technique or data source. To learn more about the evolution of this
dataset, one of the authors (Rees) has published nine articles on
Medium, which you can find <a href="${"https://medium.com/@rees_32356"}" target="${"_blank"}">here</a>.</p>
<p>We encourage users to submit their own posts\u2013or others\u2019 posts\u2013for
inclusion, which can be done on this <a href="${"https://docs.google.com/forms/d/e/1FAIpQLScfob3uBoumXIRcSW83T0GhXCfi-KI_psGxIqtl_rQ5VHu9ZQ/viewform?usp=sf_link"}" target="${"_blank"}">Google Form</a>.
Our dataset, as well as the code for the Shiny app, is available on <a href="${"https://github.com/connorrothschild/covid-posts"}" target="${"_blank"}">GitHub</a>.
If anyone has corrections to the dataset, please write Rees (at)
ReesMorrison (dot) com.</p>
<p>The remainder of this post highlights some of the findings from the
dataset of COVID-19 posts. As will be made evident by the plots that
follow, this is by no means a comprehensive review of <em>every</em> COVID-19 R
blog post, but rather an overview of the data <em>that we have found</em>.</p>
<h3 id="${"posts-over-time"}"><a href="${"#posts-over-time"}">Posts over time</a></h3>
<p>As the pandemic has progressed, fewer bloggers have engaged with
COVID-related data, as we notice that blog posts peaked in March of 2020.</p>
${validate_component(Image, "Image").$$render($$result, {
      alt: "COVID-19 blog posts by week. There is a peak in mid March (40 posts).",
      src: "../images/blog/covid-posts/weekly-1.png"
    }, {}, {})}
<p>Some bloggers have been prolific; many more have been one and done. The
plot below shows the names and posts of the 23 bloggers who have so far
published at least four posts. For an example of how to read the plot,
Tim Churches, at the bottom of the y-axis, has published a total of nine
posts, but none after early April.</p>
<p>The color of the points corresponds to the work role of the blogger as
explained in the legend at the bottom. It is immediately apparent that
professors and academic researchers predominate in this group of
bloggers. If you include the postgraduate students, universities writ
large account for nearly all of the prolific bloggers.</p>
${validate_component(Image, "Image").$$render($$result, {
      alt: "A dumbbell chart showcasing the timing of posts among 'prolific authors' (4 or more total posts). It shows temporally when these individuals post. ",
      src: "../images/blog/covid-posts/prolificVer2-1.png"
    }, {}, {})}
<h3 id="${"roles-of-authors"}"><a href="${"#roles-of-authors"}">Roles of authors</a></h3>
<p>The bloggers in our dataset describe their work-day roles in a variety
of ways. One of the authors (Rees) standardized these job roles by
categorizing the multitude of terms and descriptions, but it is quite
possible that this effort misrepresented what some of these bloggers do
for a living. We welcome corrections.</p>
<p>We\u2019ve further categorized roles into a broad typology where professions
fall into one of five categories: <em>university</em>, <em>corporate</em>,
<em>professional</em>, <em>government</em>, and <em>nonprofit</em>. Those broader categories
are represented as columns in the following chart.</p>
${validate_component(Image, "Image").$$render($$result, {
      alt: "A barchart showcasing the roles of authors in our dataset. The most common is university (205) followed by corporate (140).",
      src: "../images/blog/covid-posts/authorVer2-1.png"
    }, {}, {})}
<h3 id="${"data-sources"}"><a href="${"#data-sources"}">Data sources</a></h3>
<p>A greater number of data sources related to COVID-19 will yield richer
insights. Combining different datasets can shed new light on an issue,
yield improvements, and allow authors to contruct better indices and
measures. For that reason, one of the authors (Rees) extracted <em>dataset
information</em> from our collection of blog posts.</p>
<p>For the most part, bloggers identified the data source they drew on for
their analysis. On occasion, we had to apply some effort to standardize
the 140 data sources.</p>
<p>By far the most prevalent data source is Johns Hopkins University, who
early, comprehensively and consistently has set the standard for
COVID-19 data collection and dissemination to the public.</p>
${validate_component(Image, "Image").$$render($$result, {
      alt: "A barchart showcasing the most common data sources in our dataset. John Hopkins leads the pack at 51.",
      src: "../images/blog/covid-posts/dataTable-1.png"
    }, {}, {})}
<p>Below, you can look at <em>all</em> data sources and how often they were
referenced in COVID-19 blog posts.</p>
<div class="${"table-container"}"><table><thead><tr><th align="${"left"}">Data Source</th>
<th align="${"right"}">Count</th></tr></thead>
<tbody><tr><td align="${"left"}">Johns Hopkins University</td>
<td align="${"right"}">51</td></tr>
<tr><td align="${"left"}">New York Times</td>
<td align="${"right"}">14</td></tr>
<tr><td align="${"left"}">Wikipedia</td>
<td align="${"right"}">13</td></tr>
<tr><td align="${"left"}">Apple Mobility</td>
<td align="${"right"}">8</td></tr>
<tr><td align="${"left"}">COVID Tracking Project</td>
<td align="${"right"}">8</td></tr>
<tr><td align="${"left"}">World Bank</td>
<td align="${"right"}">7</td></tr>
<tr><td align="${"left"}">European Centre for Disease Control (ECDC)</td>
<td align="${"right"}">6</td></tr>
<tr><td align="${"left"}">U.S. Census Bureau</td>
<td align="${"right"}">6</td></tr>
<tr><td align="${"left"}">Our World in Data</td>
<td align="${"right"}">5</td></tr>
<tr><td align="${"left"}">Twitter</td>
<td align="${"right"}">5</td></tr>
<tr><td align="${"left"}">Assessment Capacities Project (ACAPS)</td>
<td align="${"right"}">4</td></tr>
<tr><td align="${"left"}">COVID19 package</td>
<td align="${"right"}">4</td></tr></tbody></table></div>
<h3 id="${"blog-post-topics"}"><a href="${"#blog-post-topics"}">Blog post topics</a></h3>
<p>It may also be the case that readers want a summary of blogs, or to only
look at posts that pertain to a certain topic. Assigning each blog post
a primary topic introduces a fair amount of subjectivity, to be sure,
but the hope is that these broad topics will help researchers find
content and colleagues who share similar interests.</p>
<p>Here, a balloon plot shows various categories that the 423 posts address
as their primary topic. Topics fall on the y axis and the blogger\u2019s
category of employment is on the x axis. The size (and opacity) of each
bubble represents the count of posts that match that combination.
Epidemiology leads the way, as might be expected, but quite a few posts
seem to use COVID data to showcase something else, or apply R in novel
ways.</p>
${validate_component(Image, "Image").$$render($$result, {
      alt: "A balloon plot shows the number of posts by topic and employment category. The most common is university/epidemiology (107 posts).",
      src: "../images/blog/covid-posts/topicsVer2-1.png"
    }, {}, {})}
<h2 id="${"concluding-thoughts"}"><a href="${"#concluding-thoughts"}">Concluding thoughts</a></h2>
<p>We encourage you to use our <a href="${"https://connorrothschild.shinyapps.io/covid-posts/"}" target="${"_blank"}">Shiny application</a>
to explore the data for yourself. If you\u2019d like to submit your post to
be included, fill out this <a href="${"https://docs.google.com/forms/d/e/1FAIpQLScfob3uBoumXIRcSW83T0GhXCfi-KI_psGxIqtl_rQ5VHu9ZQ/viewform?usp=sf_link"}" target="${"_blank"}">Google Form</a>.</p>
<p>As we note in the footer of the application, the R community is
intelligent and produces interesting content, but not all of us are
experts when it comes to COVID-19. Engaging with these posts will allow
you to better understand the application of R to our current moment, and
perhaps provide feedback to post authors. We do not endorse the findings
of any particular author and encourage you to find accurate, relevant,
and recent information from reputable sources such as the <a href="${"https://www.cdc.gov/"}" target="${"_blank"}">CDC</a> and the <a href="${"https://www.who.int/"}" target="${"_blank"}">WHO</a>.</p>
<p>As always, thanks for reading.</p>`
  })}`;
});
var covidPosts = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  "default": Covid_posts,
  metadata: metadata$1
});
var metadata = {
  "layout": "blog",
  "title": "Including R in your Flat Data Workflow",
  "description": "Fetch and clean data automatically with GitHub Actions + R",
  "image": "flat-data-r/header.png",
  "date": "2021-05-02",
  "featured": true
};
var Flat_data_r = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign($$props, metadata), {}, {
    default: () => `<p>The <a href="${"https://octo.github.com/"}" rel="${"nofollow"}">GitHub OCTO team</a> recently released their first project: <a href="${"https://octo.github.com/projects/flat-data"}" rel="${"nofollow"}"><strong>Flat Data</strong></a>. The project aims to offer \u201Ca simple pattern for bringing working datasets into your repositories and versioning them.\u201D And it succeeds in doing so! I recently incorporated Flat Data into <a href="${"https://github.com/connorrothschild/police-killings"}" rel="${"nofollow"}">one of my projects</a>, allowing me to finally stop manually updating the data on a semiregular basis (yikes!). While working, I couldn\u2019t find any documentation on using R with Flat Data. Here, I\u2019ll explain the steps I took to incorporate R scripts into a Flat Data pipeline.</p>
${validate_component(Info, "Info").$$render($$result, {}, {}, {
      default: () => `<p><strong>Note:</strong> If you want to follow along, the GitHub repo can be found <a href="${"https://github.com/connorrothschild/flat-demo-r-processing/"}" rel="${"nofollow"}">here</a>.</p>`
    })}
<h2 id="${"whats-flat-data"}"><a href="${"#whats-flat-data"}">What\u2019s Flat Data?</a></h2>
<p><a href="${"https://octo.github.com/projects/flat-data"}" rel="${"nofollow"}">Flat Data</a> solves the problem of carrying out the same repetitive tasks\u2014retrieving, cleaning, and then republishing data\u2014that commonly affects developers who want to present rapidly updating data (for example, COVID-19 data that updates daily). And although alternative solutions exist, Flat Data is easy, intuitive, and integrated directly with your GitHub repository (via <a href="${"https://octo.github.com/projects/flat-data"}" rel="${"nofollow"}">GitHub</a>):</p>
${validate_component(Image, "Image").$$render($$result, {
      src: "../images/blog/flat-data-r/flat-diagram.png",
      alt: "A diagram showcasing a common Flat Data workflow"
    }, {}, {})}
<p>The idea, as seen above, is essentially to read in data (<em>data.json</em>), conduct some postprocessing (<em>process.js</em>), and output some better data (<em>processed-data.json</em>).</p>
<h2 id="${"doing-it-in-r"}"><a href="${"#doing-it-in-r"}">Doing it in R</a></h2>
<p>The most essential step of a Flat Data project is <em>postprocessing</em>. This occurs <strong>after data retrieval</strong> and <strong>before data output</strong>, and it can be done in a few different languages. By default, the OCTO team\u2019s <a href="${"https://github.com/githubocto/flat-postprocessing/tree/main/examples"}" rel="${"nofollow"}">examples</a> are done in JavaScript/TypeScript, and one user has given an example of postprocessing in <a href="${"https://github.com/pierrotsmnrd/flat_data_py_example"}" rel="${"nofollow"}">Python</a>. To the best of my knowledge, though, there aren\u2019t any examples of including R in the postprocessing stage, hence the reason for this post! </p>
<p><strong>Using R in a Flat Data pipeline is as simple as installing the necessary packages and then sourcing your R cleaning script from a postprocessing TypeScript file.</strong> Let\u2019s explore how that works.</p>
<p>We\u2019ll be grabbing data from the <a href="${"https://mappingpoliceviolence.org/"}" rel="${"nofollow"}">Mapping Police Violence</a> homepage, tidying it up, and then republishing it. (This cleaned data is the source for my <a href="${"https://connorrothschild.github.io/police-killings/"}" rel="${"nofollow"}">visualization</a> on police violence.)  Here\u2019s a sample of the final data output:</p>
<iframe title="${"Flat GitHub data table"}" src="${"https://flatgithub.com/connorrothschild/flat-demo-r-processing?filename=sample.csv&sha=585d7221d2712494195dea616bac68dc864025b1"}" loading="${"lazy"}" style="${"height: 90vh;"}" width="${"100%"}"></iframe>
<h3 id="${"01-setup-flatyml"}"><a href="${"#01-setup-flatyml"}">01. Setup <code>flat.yml</code></a></h3>
<p>The first step in any Flat Data pipeline is to create <code>.github/workflows/flat.yml</code>, which will include the configuration for your project. You can do so by using GitHub\u2019s <a href="${"https://marketplace.visualstudio.com/items?itemName=GitHubOCTO.flat"}" rel="${"nofollow"}">VSCode extension</a>, or by creating your own YAML file manually. The YAML file we use in this project is remarkably similar to the <a href="${"https://github.com/marketplace/actions/flat-data"}" rel="${"nofollow"}">boilerplate</a> file, with a few differences:</p>
<pre class="${"language-yaml[flat.yml]"}"><!-- HTML_TAG_START -->${`<code class="language-yaml[flat.yml]">name: Update data
on:
  schedule:
    - cron: 0 0 * * * # Runs daily. See https://crontab.cronhub.io/
  workflow_dispatch: &#123;&#125;
  push:
    branches:
      - main # Or master, or whatever branch you&#39;d like to &#39;watch&#39;
jobs:
  scheduled:
    runs-on: ubuntu-latest
    steps:
      # This step installs Deno, which is a Javascript runtime
      - name: Setup deno
        uses: denoland/setup-deno@main
        with:
          deno-version: v1.x
      # Check out the repository so it can read the files inside of it and do other operations
      - name: Check out repo
        uses: actions/checkout@v2
      # The Flat Action step. We fetch the data in the http_url and save it as downloaded_filename
      - name: Fetch data
        uses: githubocto/flat@v2
        with:
          http_url: https://mappingpoliceviolence.org/s/MPVDatasetDownload.xlsx # File to download
          downloaded_filename: raw.xlsx # Name of downloaded file
          postprocess: ./postprocess.ts # Script to run upon download completion</code>`}<!-- HTML_TAG_END --></pre>
<p>The tweaks you would make to this workflow are most likely in <code>http_url</code> and <code>schedule</code>. To confirm, visit GitHub\u2019s <a href="${"https://github.com/marketplace/actions/flat-data"}" rel="${"nofollow"}">documentation</a>. </p>
<h2 id="${"02-postprocess"}"><a href="${"#02-postprocess"}">02. Postprocess</a></h2>
<p>We pick up at the last line of code in the previous chunk:</p>
<pre class="${"language-yaml[flat.yml]"}"><!-- HTML_TAG_START -->${`<code class="language-yaml[flat.yml]">postprocess: ./postprocess.ts </code>`}<!-- HTML_TAG_END --></pre>
<p>Here, we reference a TypeScript file titled <code>postprocess.ts</code>. Upon completion of the data download, GitHub will run <em>this script</em> for any additional processing steps. This file must be a <code>.js</code> or <code>.ts</code> file.</p>
<p>Those who are skilled in data wrangling with JavaScript might be able to write their additional processing <em>in JavaScript itself</em>, but few of us are skilled in data wrangling with JavaScript. Moreover, some users want to migrate their existing projects and workflows to Flat Data, and so including languages other than JavaScript (in this case, R) is essential. </p>
<p>The <code>postprocess.ts</code> file I use in my workflow looks like this (it might help to see how <a href="${"https://deno.land/manual@v1.10.2/examples/subprocess"}" rel="${"nofollow"}">Deno works</a>):</p>
<pre class="${"language-js[postprocess.ts]"}"><!-- HTML_TAG_START -->${`<code class="language-js[postprocess.ts]">// 1. Install necessary packages
const r_install = Deno.run(&#123;
    cmd: [&#39;sudo&#39;, &#39;Rscript&#39;, &#39;-e&#39;, &quot;install.packages(c(&#39;dplyr&#39;, &#39;readxl&#39;, &#39;readr&#39;, &#39;lubridate&#39;, &#39;stringr&#39;))&quot;]
&#125;);

await r_install.status();

// 2. Forward the execution to the R script
const r_run = Deno.run(&#123;
    cmd: [&#39;Rscript&#39;, &#39;./clean.R&#39;]
&#125;);

await r_run.status();</code>`}<!-- HTML_TAG_END --></pre>
<p>The above script is rather simple: it 1) installs packages, and 2) runs the processing script, titled <code>clean.R</code>.</p>
<p>The first step is important.  <strong>Package management was the biggest issue I ran into while setting up this workflow; if you\u2019re having issues, pay attention to this step.</strong> You\u2019ll need to identify all the packages that are required in your R processing script, but you can\u2019t install those packages <em>in the script itself</em>, due to virtual machine permissions. You instead have to run them via the command line, using <code>sudo Rscript -e</code>, as I do above (in step 1). </p>
<p>The command <code>sudo Rscript -e</code> precedes any regular function or command that you would run in an R script. It executes those commands via the command line, rather than within a script. (We add sudo to overcome system user permission problems.) For more, see <a href="${"https://stackoverflow.com/questions/18306362/run-r-script-from-command-line"}" rel="${"nofollow"}">this page</a>. </p>
<h2 id="${"03-clean-the-data"}"><a href="${"#03-clean-the-data"}">03. Clean the data!</a></h2>
<p>My <code>clean.R</code> script, which I reference at the bottom of <code>postprocess.ts</code> looks like this:</p>
<pre class="${"language-r[clean.r]"}"><!-- HTML_TAG_START -->${`<code class="language-r[clean.r]"># Load libraries
library(dplyr)
library(stringr)

# Read in data, with the same name that we specified in &#96;flat.yml&#96;
raw_data &lt;- readxl::read_excel(&quot;./raw.xlsx&quot;)

# All the processing!
clean_data &lt;- raw_data %&gt;% 
  rename(&quot;Date&quot; = &#96;Date of Incident (month/day/year)&#96;,
         &quot;Link&quot; = &#96;Link to news article or photo of official document&#96;,
         &quot;Armed Status&quot; = &#96;Armed/Unarmed Status&#96;, 
         &quot;Age&quot; = &#96;Victim&#39;s age&#96; , 
         &quot;Race&quot; = &#96;Victim&#39;s race&#96;, 
         &quot;Sex&quot; = &#96;Victim&#39;s gender&#96;, 
         &quot;Image&quot; = &#96;URL of image of victim&#96;, 
         &quot;Name&quot; = &#96;Victim&#39;s name&#96;) %&gt;% 
  mutate(Zipcode = as.character(Zipcode),
         Year = lubridate::year(Date),
         Sex = ifelse(is.na(Sex), &#39;Unknown&#39;, Sex)) %&gt;% 
  arrange(Date)

### Additional processing goes here...

# Output data
readr::write_csv(clean_data, &quot;./output.csv&quot;)</code>`}<!-- HTML_TAG_END --></pre>
<p>Obviously, the content in the above cleaning script is irrelevant. It functions as any other R script would: it reads in data (based on the data we downloaded in <code>postprocess.ts</code>), does some cleaning, and then outputs the new data. The <a href="${"https://github.com/connorrothschild/flat-demo-r-processing/blob/master/clean.R"}" rel="${"nofollow"}">real script</a> is around 55 lines. Now you know why keeping the postprocessing in R was preferable!</p>
<h2 id="${"in-sum"}"><a href="${"#in-sum"}">In sum</a></h2>
<p>Upon completing these steps and pushing the above to a repository, GitHub will automatically set up the action and run it on a daily basis. You can then examine the logs for each run in the <strong>Actions</strong> tab. This tab will be helpful for debugging, and you can force workflow executions manually here as well. In sum, the process of carrying out a GitHub Flat Data workflow, with the addition of an R postprocessing script, looks something like this:</p>
${validate_component(Image, "Image").$$render($$result, {
      src: "../images/blog/flat-data-r/header.png",
      alt: "Diagram of flat data processing in R"
    }, {}, {})}
<p>Thanks for reading! You might learn more by perusing the <a href="${"https://github.com/connorrothschild/flat-demo-r-processing"}" rel="${"nofollow"}">GitHub repository</a> that accompanies this post; otherwise, please send any questions via <a href="${"https://twitter.com/CL_Rothschild"}" rel="${"nofollow"}">Twitter</a> \u{1F642}</p>`
  })}`;
});
var flatDataR = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  "default": Flat_data_r,
  metadata
});

// .svelte-kit/netlify/entry.js
init();
async function handler(event) {
  const { path, httpMethod, headers, rawQuery, body, isBase64Encoded } = event;
  const query = new URLSearchParams(rawQuery);
  const encoding = isBase64Encoded ? "base64" : headers["content-encoding"] || "utf-8";
  const rawBody = typeof body === "string" ? Buffer.from(body, encoding) : body;
  const rendered = await render({
    method: httpMethod,
    headers,
    path,
    query,
    rawBody
  });
  if (rendered) {
    return {
      isBase64Encoded: false,
      statusCode: rendered.status,
      ...splitHeaders(rendered.headers),
      body: rendered.body
    };
  }
  return {
    statusCode: 404,
    body: "Not found"
  };
}
function splitHeaders(headers) {
  const h = {};
  const m = {};
  for (const key in headers) {
    const value = headers[key];
    const target = Array.isArray(value) ? m : h;
    target[key] = value;
  }
  return {
    headers: h,
    multiValueHeaders: m
  };
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  handler
});
