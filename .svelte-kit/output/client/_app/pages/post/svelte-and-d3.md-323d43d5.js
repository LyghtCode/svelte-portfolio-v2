import{S as Jc,i as Uc,s as Yc,B as Br,j as H,m as T,o as A,p as Zc,q as Vc,x as P,u as j,v as O,ak as Nc,e as i,t as a,k as d,R as w,c,a as l,g as n,d as s,n as h,T as k,b as o,ae as Cr,f as u,L as t,D as xe}from"../../chunks/vendor-dfb9df3e.js";import Kc from"./layout.svelte-b65b887a.js";import{C as Se}from"../../chunks/Code-46ee5f1b.js";/* empty css                                                       */import{I as Vr}from"../../chunks/Info-a85e8c05.js";import"../../chunks/BackTo-f09ad798.js";import"../../chunks/global-164a8ca5.js";import"../../chunks/utils-419e8671.js";import"../../chunks/CornerTitle-3a53cda1.js";import"../../chunks/store-b0ba4c19.js";/* empty css                                                      */function Qc(g){let p,v,f,m,_,b,E,J,$,I,ee,q,S,lt,M,ot,rt,te,G,it,x,ct,pt;return{c(){p=i("p"),v=a("This is not a comprehensive tutorial about "),f=i("strong"),m=a("how to"),_=a(" use D3 and Svelte together. I\u2019ll cover that in the "),b=i("a"),E=a("future"),J=a(". In the meantime, check out tutorials from "),$=i("a"),I=a("Matthias Stahl"),ee=a(", examples of Svelte and D3 in action on The Pudding\u2019s "),q=i("a"),S=a("GitHub"),lt=a(", and an example of similar framework-driven logic on Amelia Wattenberger\u2019s "),M=i("a"),ot=a("blog"),rt=a("."),te=d(),G=i("p"),it=a("Want an immediate example? Here\u2019s an (admittedly verbose) "),x=i("a"),ct=a("Svelte component"),pt=a(" I used in a recent project about Bob Ross."),this.h()},l(D){p=c(D,"P",{});var y=l(p);v=n(y,"This is not a comprehensive tutorial about "),f=c(y,"STRONG",{});var Gt=l(f);m=n(Gt,"how to"),Gt.forEach(s),_=n(y," use D3 and Svelte together. I\u2019ll cover that in the "),b=c(y,"A",{href:!0,rel:!0});var se=l(b);E=n(se,"future"),se.forEach(s),J=n(y,". In the meantime, check out tutorials from "),$=c(y,"A",{href:!0,rel:!0});var Rt=l($);I=n(Rt,"Matthias Stahl"),Rt.forEach(s),ee=n(y,", examples of Svelte and D3 in action on The Pudding\u2019s "),q=c(y,"A",{href:!0,rel:!0});var Wt=l(q);S=n(Wt,"GitHub"),Wt.forEach(s),lt=n(y,", and an example of similar framework-driven logic on Amelia Wattenberger\u2019s "),M=c(y,"A",{href:!0,rel:!0});var ae=l(M);ot=n(ae,"blog"),ae.forEach(s),rt=n(y,"."),y.forEach(s),te=h(D),G=c(D,"P",{});var ze=l(G);it=n(ze,"Want an immediate example? Here\u2019s an (admittedly verbose) "),x=c(ze,"A",{href:!0,rel:!0});var Bt=l(x);ct=n(Bt,"Svelte component"),Bt.forEach(s),pt=n(ze," I used in a recent project about Bob Ross."),ze.forEach(s),this.h()},h(){o(b,"href","https://twitter.com/CL_Rothschild"),o(b,"rel","nofollow"),o($,"href","https://www.youtube.com/watch?v=bnd64ZrHC0U"),o($,"rel","nofollow"),o(q,"href","https://github.com/the-pudding/"),o(q,"rel","nofollow"),o(M,"href","https://wattenberger.com/post/react-and-d3"),o(M,"rel","nofollow"),o(x,"href","https://github.com/connorrothschild/bob-ross-art-gallery/blob/master/src/components/ColorViz.svelte"),o(x,"rel","nofollow")},m(D,y){u(D,p,y),t(p,v),t(p,f),t(f,m),t(p,_),t(p,b),t(b,E),t(p,J),t(p,$),t($,I),t(p,ee),t(p,q),t(q,S),t(p,lt),t(p,M),t(M,ot),t(p,rt),u(D,te,y),u(D,G,y),t(G,it),t(G,x),t(x,ct),t(G,pt)},d(D){D&&s(p),D&&s(te),D&&s(G)}}}function Xc(g){let p,v=`<code class="language-undefined">var circles = document.getElementsByTagName(&quot;circle&quot;);
for (var i = 0; i &lt; circles.length; i++) &#123;
  var circle = circles.item(i);
  circle.setAttribute(&quot;fill&quot;, &quot;white&quot;, null);
&#125;</code>`;return{c(){p=i("pre"),this.h()},l(f){p=c(f,"PRE",{class:!0});var m=l(p);m.forEach(s),this.h()},h(){o(p,"class","language-undefined")},m(f,m){u(f,p,m),p.innerHTML=v},p:xe,d(f){f&&s(p)}}}function ep(g){let p;return{c(){p=a('d3.selectAll("circle").style("fill", "white")')},l(v){p=n(v,'d3.selectAll("circle").style("fill", "white")')},m(v,f){u(v,p,f)},d(v){v&&s(p)}}}function tp(g){let p,v=`<code class="language-undefined">let data = [5, 10, 15, 20, 25];

var circles = document.getElementsByTagName(&quot;circle&quot;);
for (var i = 0; i &lt; circles.length; i++) &#123;
  var circle = circles.item(i);
  circle.style.setProperty(&quot;r&quot;, data[i], null);
&#125;</code>`;return{c(){p=i("pre"),this.h()},l(f){p=c(f,"PRE",{class:!0});var m=l(p);m.forEach(s),this.h()},h(){o(p,"class","language-undefined")},m(f,m){u(f,p,m),p.innerHTML=v},p:xe,d(f){f&&s(p)}}}function sp(g){let p,v=`<code class="language-js"><span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

d3<span class="token punctuation">.</span><span class="token function">selectAll</span><span class="token punctuation">(</span><span class="token string">"circle"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"r"</span><span class="token punctuation">,</span> <span class="token parameter">d</span> <span class="token operator">=></span> d<span class="token punctuation">)</span></code>`;return{c(){p=i("pre"),this.h()},l(f){p=c(f,"PRE",{class:!0});var m=l(p);m.forEach(s),this.h()},h(){o(p,"class","language-js")},m(f,m){u(f,p,m),p.innerHTML=v},p:xe,d(f){f&&s(p)}}}function ap(g){let p,v=`<code class="language-undefined">&lt;script&gt;
  let data = [&#123;x: 10, r: 5 &#125;, 
              &#123;x: 30, r: 10&#125;, 
              &#123;x: 50, r: 15&#125;, 
              &#123;x: 70, r: 20&#125;, 
              &#123;x: 90, r: 25&#125;]
&lt;/script&gt;

&lt;p&gt;&#123;data.map(x =&gt; x)&#125;&lt;/p&gt;</code>`;return{c(){p=i("pre"),this.h()},l(f){p=c(f,"PRE",{class:!0});var m=l(p);m.forEach(s),this.h()},h(){o(p,"class","language-undefined")},m(f,m){u(f,p,m),p.innerHTML=v},p:xe,d(f){f&&s(p)}}}function np(g){let p,v=`<code class="language-undefined">let ingredients = [
  &#123;item: &quot;Top Bun&quot;, instruction: &quot;Place at top of burger.&quot;&#125;,
  &#123;item: &quot;Pickles&quot;, instruction: &quot;Three pickles, please.&quot;&#125;,
  &#123;item: &quot;Cheese&quot;, instruction: &quot;Cheese is optional, but it makes the burger better.&quot;&#125;,
  &#123;item: &quot;Patty&quot;, instruction: &quot;Cook to your satisfaction. Optionally, add two patties.&quot;&#125;,
  &#123;item: &quot;Tomato&quot;, instruction: &quot;Should be the same width as bun, and thinly sliced.&quot;&#125;,
  &#123;item: &quot;Lettuce&quot;, instruction: &quot;Should be the same width as bun.&quot;&#125;,
  &#123;item: &quot;Bottom Bun&quot;, instruction: &quot;Place at bottom of burger.&quot;&#125;,
]</code>`;return{c(){p=i("pre"),this.h()},l(f){p=c(f,"PRE",{class:!0});var m=l(p);m.forEach(s),this.h()},h(){o(p,"class","language-undefined")},m(f,m){u(f,p,m),p.innerHTML=v},p:xe,d(f){f&&s(p)}}}function lp(g){let p,v;return{c(){p=i("p"),v=a("Although I use the Svelte REPL to showcase these three examples, only the last one requires Svelte. The REPL is just a nice place to host (editable!) code \u{1F642}")},l(f){p=c(f,"P",{});var m=l(p);v=n(m,"Although I use the Svelte REPL to showcase these three examples, only the last one requires Svelte. The REPL is just a nice place to host (editable!) code \u{1F642}"),m.forEach(s)},m(f,m){u(f,p,m),t(p,v)},d(f){f&&s(p)}}}function op(g){let p,v=`<code class="language-undefined">&lt;script&gt;
import  windowWidth from &quot;../stores/store.js&quot;;
import  scaleLinear from &#39;d3-scale&#39;;

$: xScale = scaleLinear
            .domain(data.map(d =&gt; d.value))
            .range([0, $windowWidth])
&lt;/script&gt;</code>`;return{c(){p=i("pre"),this.h()},l(f){p=c(f,"PRE",{class:!0});var m=l(p);m.forEach(s),this.h()},h(){o(p,"class","language-undefined")},m(f,m){u(f,p,m),p.innerHTML=v},p:xe,d(f){f&&s(p)}}}function rp(g){let p,v,f,m,_,b,E,J;return{c(){p=i("p"),v=a("Another way to achieve easy responsiveness is to "),f=i("a"),m=a("bind the SVG\u2019s parent container\u2019s div width"),_=a(" to some variable ("),b=i("code"),E=a("width"),J=a(") and set the SVG\u2019s width to match."),this.h()},l($){p=c($,"P",{});var I=l(p);v=n(I,"Another way to achieve easy responsiveness is to "),f=c(I,"A",{href:!0,target:!0,rel:!0});var ee=l(f);m=n(ee,"bind the SVG\u2019s parent container\u2019s div width"),ee.forEach(s),_=n(I," to some variable ("),b=c(I,"CODE",{});var q=l(b);E=n(q,"width"),q.forEach(s),J=n(I,") and set the SVG\u2019s width to match."),I.forEach(s),this.h()},h(){o(f,"href","https://svelte.dev/tutorial/dimensions"),o(f,"target","_blank"),o(f,"rel","noopener noreferrer")},m($,I){u($,p,I),t(p,v),t(p,f),t(f,m),t(p,_),t(p,b),t(b,E),t(p,J)},d($){$&&s(p)}}}function ip(g){let p,v=`<code class="language-js"><span class="token comment">// Circles are filled green if positive, red if negative</span>
d3<span class="token punctuation">.</span><span class="token function">selectAll</span><span class="token punctuation">(</span><span class="token string">'circle'</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">style</span><span class="token punctuation">(</span><span class="token string">'fill'</span><span class="token punctuation">,</span> <span class="token parameter">d</span> <span class="token operator">=></span> d<span class="token punctuation">.</span>value <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token string">'red'</span> <span class="token operator">:</span> <span class="token string">'green'</span><span class="token punctuation">)</span></code>`;return{c(){p=i("pre"),this.h()},l(f){p=c(f,"PRE",{class:!0});var m=l(p);m.forEach(s),this.h()},h(){o(p,"class","language-js")},m(f,m){u(f,p,m),p.innerHTML=v},p:xe,d(f){f&&s(p)}}}function cp(g){let p,v=`<code class="language-js">window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'resize'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">let</span> newWidth <span class="token operator">=</span> window<span class="token punctuation">.</span>innerWidth<span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>newWidth <span class="token operator">&lt;</span> <span class="token number">520</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> 
      <span class="token comment">// Hide tablet and desktop</span>
      document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"tablet"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">"none"</span><span class="token punctuation">;</span>
      document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"desktop"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">"none"</span><span class="token punctuation">;</span>

      <span class="token comment">// Show mobile</span>
      document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"mobile"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">"block"</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>newWidth <span class="token operator">&lt;</span> <span class="token number">1024</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token comment">// Hide mobile and desktop</span>
      document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"mobile"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">"none"</span><span class="token punctuation">;</span>
      document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"desktop"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">"none"</span><span class="token punctuation">;</span>

      <span class="token comment">// Show tablet</span>
      document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"tablet"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">"block"</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
      <span class="token comment">// Hide mobile and tablet</span>
      document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"mobile"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">"none"</span><span class="token punctuation">;</span>
      document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"tablet"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">"none"</span><span class="token punctuation">;</span>

      <span class="token comment">// Show desktop</span>
      document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"desktop"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">"block"</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>`;return{c(){p=i("pre"),this.h()},l(f){p=c(f,"PRE",{class:!0});var m=l(p);m.forEach(s),this.h()},h(){o(p,"class","language-js")},m(f,m){u(f,p,m),p.innerHTML=v},p:xe,d(f){f&&s(p)}}}function pp(g){let p,v=`<code class="language-svelte"><span class="token language-javascript"><span class="token punctuation">&#123;</span>#<span class="token keyword">if</span> $windowWidth <span class="token operator">&lt;</span> <span class="token number">520</span><span class="token punctuation">&#125;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Mobile</span> <span class="token punctuation">/></span></span>
<span class="token language-javascript"><span class="token punctuation">&#123;</span><span class="token operator">:</span><span class="token keyword">else</span> <span class="token keyword">if</span> $windowWidth <span class="token operator">&lt;</span> <span class="token number">1024</span><span class="token punctuation">&#125;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Tablet</span> <span class="token punctuation">/></span></span>
<span class="token language-javascript"><span class="token punctuation">&#123;</span><span class="token operator">:</span><span class="token keyword">else</span><span class="token punctuation">&#125;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Desktop</span> <span class="token punctuation">/></span></span>
<span class="token language-javascript"><span class="token punctuation">&#123;</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token punctuation">&#125;</span></span></code>`;return{c(){p=i("pre"),this.h()},l(f){p=c(f,"PRE",{class:!0});var m=l(p);m.forEach(s),this.h()},h(){o(p,"class","language-svelte")},m(f,m){u(f,p,m),p.innerHTML=v},p:xe,d(f){f&&s(p)}}}function up(g){let p,v,f,m,_,b,E,J,$,I,ee,q,S,lt,M,ot,rt,te,G,it,x,ct,pt,D,y,Gt,se,Rt,Wt,ae,ze,Bt,vs,Fn,Jn,Da,ut,Ct,Un,qa,R,Yn,Vt,Zn,Kn,Nt,Qn,Xn,Ft,el,tl,xa,He,za,ft,Jt,sl,Ha,Te,al,dt,nl,ll,Ta,W,ht,ne,ws,ol,le,ks,rl,oe,gs,il,re,ys,cl,ie,_s,pl,Aa,Ae,ul,mt,fl,dl,Pa,Pe,ja,je,hl,bs,ml,vl,Oa,Oe,Ma,B,vt,ce,Es,wl,pe,$s,kl,ue,Is,gl,fe,Ss,yl,de,Ds,_l,La,Ut,bl,Ga,Me,Ra,Yt,El,Wa,Le,Ba,C,wt,he,qs,$l,me,xs,Il,ve,zs,Sl,we,Hs,Dl,ke,Ts,ql,Ca,Ge,xl,As,zl,Hl,Va,Zt,Tl,Na,z,Al,Ps,Pl,jl,kt,Ol,Ml,js,Ll,Gl,Os,Rl,Wl,Fa,gt,Kt,Bl,Ja,Re,Cl,Ms,Vl,Nl,Ua,yt,Ls,Fl,Jl,Ya,We,Za,Qt,Ul,Ka,ge,Be,Gs,Yl,Zl,Rs,Kl,Ql,Xl,Ce,Ws,eo,to,_t,so,ao,no,V,Bs,lo,oo,Cs,ro,io,Vs,co,po,Ns,uo,fo,Qa,Ve,ho,bt,mo,vo,Xa,Xt,wo,en,Et,es,ko,tn,ts,go,sn,Ne,an,ss,yo,nn,Fe,ln,$t,Fs,_o,bo,on,U,Nr,rn,De,Js,Eo,$o,Us,Io,So,cn,Y,Fr,pn,N,Do,Ys,qo,xo,Zs,zo,Ho,Ks,To,Ao,un,Z,Jr,fn,ye,Po,Qs,jo,Oo,Xs,Mo,Lo,dn,It,as,Go,hn,_e,K,Ro,ea,Wo,Bo,ta,Co,Vo,sa,No,Fo,Jo,St,Uo,aa,Yo,Zo,Ko,L,Qo,na,Xo,er,la,tr,sr,oa,ar,nr,ra,lr,or,mn,vn,wn,Dt,ns,rr,kn,ls,ir,gn,qt,os,cr,yn,Je,pr,xt,ur,fr,_n,Ue,bn,F,dr,zt,hr,mr,ia,vr,wr,ca,kr,gr,En,Ye,$n,Ht,rs,yr,In,Ze,_r,Tt,br,Er,Sn,Ke,Dn,is,$r,qn,be,pa,Ir,Sr,ua,Dr,qr,fa,xr,xn,cs,zr,zn,Ee,Hr,At,Tr,Ar,da,Pr,jr,Hn,Qe,Tn,ps,Or,An,Xe,Pn,et,Mr,Pt,Lr,Gr,jn;return He=new Vr({props:{$$slots:{default:[Qc]},$$scope:{ctx:g}}}),Pe=new Se({props:{language:"js",$$slots:{default:[Xc]},$$scope:{ctx:g}}}),Oe=new Se({props:{language:"js",$$slots:{default:[ep]},$$scope:{ctx:g}}}),Me=new Se({props:{language:"js",$$slots:{default:[tp]},$$scope:{ctx:g}}}),Le=new Se({props:{language:"js",$$slots:{default:[sp]},$$scope:{ctx:g}}}),We=new Se({props:{language:"svelte",$$slots:{default:[ap]},$$scope:{ctx:g}}}),Ne=new Se({props:{language:"js",$$slots:{default:[np]},$$scope:{ctx:g}}}),Fe=new Vr({props:{$$slots:{default:[lp]},$$scope:{ctx:g}}}),Ue=new Se({props:{language:"svelte",$$slots:{default:[op]},$$scope:{ctx:g}}}),Ye=new Vr({props:{$$slots:{default:[rp]},$$scope:{ctx:g}}}),Ke=new Se({props:{language:"js",$$slots:{default:[ip]},$$scope:{ctx:g}}}),Qe=new Se({props:{language:"js",$$slots:{default:[cp]},$$scope:{ctx:g}}}),Xe=new Se({props:{language:"svelte",$$slots:{default:[pp]},$$scope:{ctx:g}}}),{c(){p=i("p"),v=a("When I started making data visualizations, I considered "),f=i("a"),m=a("D3"),_=a("\u2014Data Driven Documents\u2014to be the gold standard programming language required to create beautiful graphics on the web."),b=d(),E=i("p"),J=a("As I progress in my career, I\u2019m realizing that D3 has a more particular (and smaller) role in the visualization lifecycle than I initially envisioned. As I design more visualizations, I\u2019m learning that my most efficient and intuitive development comes when I "),$=i("strong"),I=a("program literally"),ee=a("."),q=d(),S=i("p"),lt=a("What does that mean? (To be honest, I\u2019m making up the term.) It means that I\u2019m moving away from "),M=i("em"),ot=a("pseudo-declarative"),rt=a(" data visualization in D3, and starting to make my visualizations "),te=i("em"),G=a("literally"),it=a(", by simply writing markup in "),x=i("a"),ct=a("Svelte"),pt=a("."),D=d(),y=i("p"),Gt=a("Although D3 "),se=i("a"),Rt=a("claims"),Wt=a(" to be declarative, it still uses "),ae=i("a"),ze=a("method chaining"),Bt=a(" to provide instructions to render visuals. In Svelte, we don\u2019t provide instructions but instead render our SVG elements directly, using "),vs=i("code"),Fn=a("{#each}"),Jn=a(" blocks. By writing my markup literally and appending data inline, my code makes more sense and causes fewer headaches."),Da=d(),ut=i("h3"),Ct=i("a"),Un=a("What you\u2019ll find in this post"),qa=d(),R=i("p"),Yn=a("In this post, I\u2019ll "),Vt=i("a"),Zn=a("1)"),Kn=a(" provide an overview of D3, and how it made the process of creating visualizations so much easier; "),Nt=i("a"),Qn=a("2)"),Xn=a(" explain why I\u2019m moving away from D3 for DOM manipulation, and instead using Svelte \u201Cliterally\u201D; and "),Ft=i("a"),el=a("3)"),tl=a(" provide a funky burger \u{1F354} example to explain my logic."),xa=d(),H(He.$$.fragment),za=d(),ft=i("h2"),Jt=i("a"),sl=a("What D3 does 3\uFE0F\u20E3"),Ha=d(),Te=i("p"),al=a("D3 allows for intuitive transformations of the DOM by leveraging easy-to-understand selection syntax. Sound confusing? Let\u2019s learn through an example (adapted from the "),dt=i("a"),nl=a("D3 homepage"),ll=a("). Imagine we had 5 circles and wanted to change the fill of each."),Ta=d(),W=w("svg"),ht=w("rect"),ne=w("circle"),ws=w("title"),ol=a("Hello from the circle!"),le=w("circle"),ks=w("title"),rl=a("Hello from the circle!"),oe=w("circle"),gs=w("title"),il=a("Hello from the circle!"),re=w("circle"),ys=w("title"),cl=a("Hello from the circle!"),ie=w("circle"),_s=w("title"),pl=a("Hello from the circle!"),Aa=d(),Ae=i("p"),ul=a("In the traditional "),mt=i("a"),fl=a("HTML DOM model"),dl=a(", we would 1) select all circles, 2) loop through each one, and 3) redefine its fill. In code, that would look like this:"),Pa=d(),H(Pe.$$.fragment),ja=d(),je=i("p"),hl=a("Doing this in D3 would reduce the length of our code by a factor of 5, and allows us to write in a way that "),bs=i("em"),ml=a("just makes sense"),vl=a(". Here, we select every circle and change its fill."),Oa=d(),H(Oe.$$.fragment),Ma=d(),B=w("svg"),vt=w("rect"),ce=w("circle"),Es=w("title"),wl=a("Hello from the circle!"),pe=w("circle"),$s=w("title"),kl=a("Hello from the circle!"),ue=w("circle"),Is=w("title"),gl=a("Hello from the circle!"),fe=w("circle"),Ss=w("title"),yl=a("Hello from the circle!"),de=w("circle"),Ds=w("title"),_l=a("Hello from the circle!"),La=d(),Ut=i("p"),bl=a("Imagine if you also wanted to bind data to those circles. That is, you wanted to fill the circle according to some attribute, or size its radius according to some datapoint. In traditional JavaScript, that might look something like this:"),Ga=d(),H(Me.$$.fragment),Ra=d(),Yt=i("p"),El=a("Not too hard\u2014but also, not too easy. D3 simplifies this logic by removing the need for a loop and iterating on your selection for you:"),Wa=d(),H(Le.$$.fragment),Ba=d(),C=w("svg"),wt=w("rect"),he=w("circle"),qs=w("title"),$l=a("Hello from the circle!"),me=w("circle"),xs=w("title"),Il=a("Hello from the circle!"),ve=w("circle"),zs=w("title"),Sl=a("Hello from the circle!"),we=w("circle"),Hs=w("title"),Dl=a("Hello from the circle!"),ke=w("circle"),Ts=w("title"),ql=a("Hello from the circle!"),Ca=d(),Ge=i("p"),xl=a("Again, we reduce the length of our code nearly 5x, and the code just "),As=i("strong"),zl=a("makes sense"),Hl=a("."),Va=d(),Zt=i("p"),Tl=a("All that to say, D3 is great. It works, and it works wonderfully. By removing the need to write highly imperative code that is unintuitive in nature, D3 saves developers time and allows for more powerful visualizations."),Na=d(),z=i("p"),Al=a("But I\u2019m hardly using it at all recently. Increasingly, I\u2019ve been using the JavaScript "),Ps=i("del"),Pl=a("framework"),jl=a(" compiler "),kt=i("a"),Ol=a("Svelte"),Ml=a(" to "),js=i("em"),Ll=a("write SVG directly"),Gl=a(" rather than "),Os=i("em"),Rl=a("tell JavaScript to write SVG"),Wl=a(". How? Let\u2019s see below."),Fa=d(),gt=i("h2"),Kt=i("a"),Bl=a("\u201CLiteral\u201D programming with Svelte \u{1F5E3}"),Ja=d(),Re=i("p"),Cl=a("Going back to the above circles, imagine if we could simply bind our data to our app\u2019s markup "),Ms=i("strong"),Vl=a("directly"),Nl=a(", without any intermediate code serving as instructions."),Ua=d(),yt=i("p"),Ls=i("strong"),Fl=a("We can!"),Jl=a(" Svelte (and Vue, React and other frameworks) allow for seamless interactions between our app\u2019s logic, data, and markup, so that we can embed data directly into our SVG elements. In this new paradigm, we could replace the set of D3 instructions from earlier with the following Svelte code:"),Ya=d(),H(We.$$.fragment),Za=d(),Qt=i("p"),Ul=a("In my view, there are three benefits to writing our code this way:"),Ka=d(),ge=i("ol"),Be=i("li"),Gs=i("strong"),Yl=a("More intuitive authoring."),Zl=a(" It feels much more natural to write our SVG elements "),Rs=i("em"),Kl=a("directly"),Ql=a(" rather than provide D3 instructions on how to do so."),Xl=d(),Ce=i("li"),Ws=i("strong"),eo=a("Less friction in translating D3 to the DOM."),to=a(" By writing SVG directly, we could copy an SVG element from the "),_t=i("a"),so=a("MDN docs"),ao=a(", paste in our values, and see immediate results. Fewer handoffs results in fewer errors."),no=d(),V=i("li"),Bs=i("strong"),lo=a("Reusability."),oo=a(" Creating a robust and flexible "),Cs=i("code"),ro=a("<Circle />"),io=a(", "),Vs=i("code"),co=a("<Bar />"),po=a(", or "),Ns=i("code"),uo=a("<Axis />"),fo=a(" component permits consistent reuse within and across projects. D3 code is usually written as a series of blocks which lacks a natural structure and becomes difficult to reuse effectively."),Qa=d(),Ve=i("p"),ho=a("The only downside (which is actually just an adjustment) is that this new approach requires you to learn how to "),bt=i("a"),mo=a("write SVG"),vo=a(". But isn\u2019t it a good exercise to learn the anatomy of what we\u2019re actually creating? Having knowledge of SVG elements and attributes will benefit any developer who creates visuals, no matter how they eventually do so."),Xa=d(),Xt=i("p"),wo=a("Not convinced? Let me explain the logic one more time, with a tastier example:"),en=d(),Et=i("h2"),es=i("a"),ko=a("Bringing it home with burgers \u{1F354}"),tn=d(),ts=i("p"),go=a("Imagine we want to prepare a burger. We have an array of objects, each with an ingredient and ingredient-specfic instructions. We want to 1) create each item (insert it into the DOM), and 2) carry out its instructions (execute some function)."),sn=d(),H(Ne.$$.fragment),an=d(),ss=i("p"),yo=a("There are three ways to make this burger (at least, in our fantasy world where we make burgers via code)."),nn=d(),H(Fe.$$.fragment),ln=d(),$t=i("p"),Fs=i("strong"),_o=a("The first option"),bo=a(" (old school) is to tell your app to loop through each ingredient, add it to the others, and stack the ingredients accordingly. For each ingredient in the loop, execute the burger-making according to our ingredient-specific instruction. This is how burgers would have been made, painfully, before D3."),on=d(),U=i("iframe"),rn=d(),De=i("p"),Js=i("strong"),Eo=a("The second option"),$o=a(" (new school) is to tell your app to read in each ingredient and instruction through D3 method chaining. We remove the need for our verbose "),Us=i("code"),Io=a("for"),So=a(" loop, and use the chain to give D3 a set of sequential instructions."),cn=d(),Y=i("iframe"),pn=d(),N=i("p"),Do=a("In "),Ys=i("strong"),qo=a("our final option"),xo=a(" (new new school), we can simply append our instructions directly to the ingredient, "),Zs=i("em"),zo=a("literally"),Ho=a(". Here, we skip "),Ks=i("code"),To=a("for"),Ao=a(" loops and we skip D3 method chaining; instead, we componentize our general \u201Cburger item\u201D and pass each ingredient/instruction directly to that component. Only Svelte enables such burgers:"),un=d(),Z=i("iframe"),fn=d(),ye=i("p"),Po=a("Which do you prefer? It\u2019s much easier to make a burger by "),Qs=i("em"),jo=a("just making it"),Oo=a(", rather than giving instructions, no matter what form they come in. Frameworks allow for the construction of burgers\u2014and visualizations\u2014"),Xs=i("strong"),Mo=a("literally"),Lo=a(". We write our ingredients (or DOM elements) directly, and include our instructions (or data) in our markup. Now that\u2019s a tasty burger."),dn=d(),It=i("h2"),as=i("a"),Go=a("The big picture \u{1F5BC}"),hn=d(),_e=i("ol"),K=i("li"),Ro=a("Svelte allows visualization developers to "),ea=i("strong"),Wo=a("write SVG directly"),Bo=a(" (and avoid telling D3 what to do), while using Svelte syntax ("),ta=i("code"),Co=a("{#each}"),Vo=a(", etc.) to avoid annoying and inefficient "),sa=i("code"),No=a("for"),Fo=a(" loops."),Jo=d(),St=i("li"),Uo=a("Including logic directly in your markup ("),aa=i("code"),Yo=a("{#if}"),Zo=a(", etc.) removes the need for complex JavaScript/DOM interactions (more on that below)."),Ko=d(),L=i("li"),Qo=a("Svelte works to "),na=i("em"),Xo=a("complement"),er=a(" D3, not replace it, by continuing to leverage the most powerful parts of its API: "),la=i("code"),tr=a("d3-scale"),sr=a(", "),oa=i("code"),ar=a("d3-array"),nr=a(", "),ra=i("code"),lr=a("d3-shape"),or=a(", etc."),mn=d(),vn=i("hr"),wn=d(),Dt=i("h2"),ns=i("a"),rr=a("Bonus perks \u{1F3C6}"),kn=d(),ls=i("p"),ir=a("Using Svelte to create visualizations has a few other perks:"),gn=d(),qt=i("h3"),os=i("a"),cr=a("Responsiveness"),yn=d(),Je=i("p"),pr=a("By using Svelte\u2019s "),xt=i("a"),ur=a("reactive declarations"),fr=a(" (the dollar signs \u{1F4B0}), we can make certain variables  \u2018watch\u2019 for state changes and update automatically. One huge benefit of this is that we can bind our scales to updating values such as the window width, and write minimal code to make our charts update on resize."),_n=d(),H(Ue.$$.fragment),bn=d(),F=i("p"),dr=a("With some other component watching and responding to resize events (such as "),zt=i("a"),hr=a("Window.svelte"),mr=a("), any SVG property depending on "),ia=i("code"),vr=a("xScale"),wr=a(" will automatically update when your window resizes. You can also set the chart width itself to equal "),ca=i("code"),kr=a("$windowWidth"),gr=a(" for a fully resizable, responsive chart."),En=d(),H(Ye.$$.fragment),$n=d(),Ht=i("h3"),rs=i("a"),yr=a("If/else blocks"),In=d(),Ze=i("p"),_r=a("In regular D3, we often use the "),Tt=i("a"),br=a("ternary operator"),Er=a(" to define condition-specific attributes, like this:"),Sn=d(),H(Ke.$$.fragment),Dn=d(),is=i("p"),$r=a("This is great, but what if we want to make more significant changes based on app-wide state? For example, imagine we want to show three different types of the same visualization on different screen sizes:"),qn=d(),be=i("ol"),pa=i("li"),Ir=a("Desktop (over 1024px)"),Sr=d(),ua=i("li"),Dr=a("Tablet (520px to 1024px)"),qr=d(),fa=i("li"),xr=a("Mobile (under 520px)"),xn=d(),cs=i("p"),zr=a("In D3, we would achieve this by adding a resize event listener, providing custom breakpoints, and rendering different visuals if the updated window width were within a certain range. The complicated part would be having to render a different visual at each breakpoint."),zn=d(),Ee=i("p"),Hr=a("One key difference between relying on D3 and leveraging the power of Svelte is that Svelte allows for "),At=i("a"),Tr=a("conditional rendering"),Ar=d(),da=i("em"),Pr=a("directly in our markup"),jr=a(", not just in our JavaScript logic. In other words, while vanilla JavaScript would approach our problem with the following:"),Hn=d(),H(Qe.$$.fragment),Tn=d(),ps=i("p"),Or=a("Svelte simplifies our logic to:"),An=d(),H(Xe.$$.fragment),Pn=d(),et=i("p"),Mr=a("Hey, thanks for reading. I appreciate you! In the event that you disagree with me or I got something wrong, please message me on "),Pt=i("a"),Lr=a("Twitter"),Gr=a("."),this.h()},l(e){p=c(e,"P",{});var r=l(p);v=n(r,"When I started making data visualizations, I considered "),f=c(r,"A",{href:!0,rel:!0});var ha=l(f);m=n(ha,"D3"),ha.forEach(s),_=n(r,"\u2014Data Driven Documents\u2014to be the gold standard programming language required to create beautiful graphics on the web."),r.forEach(s),b=h(e),E=c(e,"P",{});var jt=l(E);J=n(jt,"As I progress in my career, I\u2019m realizing that D3 has a more particular (and smaller) role in the visualization lifecycle than I initially envisioned. As I design more visualizations, I\u2019m learning that my most efficient and intuitive development comes when I "),$=c(jt,"STRONG",{});var ma=l($);I=n(ma,"program literally"),ma.forEach(s),ee=n(jt,"."),jt.forEach(s),q=h(e),S=c(e,"P",{});var Q=l(S);lt=n(Q,"What does that mean? (To be honest, I\u2019m making up the term.) It means that I\u2019m moving away from "),M=c(Q,"EM",{});var va=l(M);ot=n(va,"pseudo-declarative"),va.forEach(s),rt=n(Q," data visualization in D3, and starting to make my visualizations "),te=c(Q,"EM",{});var wa=l(te);G=n(wa,"literally"),wa.forEach(s),it=n(Q,", by simply writing markup in "),x=c(Q,"A",{href:!0,rel:!0});var ka=l(x);ct=n(ka,"Svelte"),ka.forEach(s),pt=n(Q,"."),Q.forEach(s),D=h(e),y=c(e,"P",{});var X=l(y);Gt=n(X,"Although D3 "),se=c(X,"A",{href:!0,rel:!0});var ga=l(se);Rt=n(ga,"claims"),ga.forEach(s),Wt=n(X," to be declarative, it still uses "),ae=c(X,"A",{href:!0,rel:!0});var ya=l(ae);ze=n(ya,"method chaining"),ya.forEach(s),Bt=n(X," to provide instructions to render visuals. In Svelte, we don\u2019t provide instructions but instead render our SVG elements directly, using "),vs=c(X,"CODE",{});var _a=l(vs);Fn=n(_a,"{#each}"),_a.forEach(s),Jn=n(X," blocks. By writing my markup literally and appending data inline, my code makes more sense and causes fewer headaches."),X.forEach(s),Da=h(e),ut=c(e,"H3",{id:!0});var ba=l(ut);Ct=c(ba,"A",{href:!0});var Ea=l(Ct);Un=n(Ea,"What you\u2019ll find in this post"),Ea.forEach(s),ba.forEach(s),qa=h(e),R=c(e,"P",{});var tt=l(R);Yn=n(tt,"In this post, I\u2019ll "),Vt=c(tt,"A",{href:!0});var Ur=l(Vt);Zn=n(Ur,"1)"),Ur.forEach(s),Kn=n(tt," provide an overview of D3, and how it made the process of creating visualizations so much easier; "),Nt=c(tt,"A",{href:!0});var Yr=l(Nt);Qn=n(Yr,"2)"),Yr.forEach(s),Xn=n(tt," explain why I\u2019m moving away from D3 for DOM manipulation, and instead using Svelte \u201Cliterally\u201D; and "),Ft=c(tt,"A",{href:!0});var Zr=l(Ft);el=n(Zr,"3)"),Zr.forEach(s),tl=n(tt," provide a funky burger \u{1F354} example to explain my logic."),tt.forEach(s),xa=h(e),T(He.$$.fragment,e),za=h(e),ft=c(e,"H2",{id:!0});var Kr=l(ft);Jt=c(Kr,"A",{href:!0});var Qr=l(Jt);sl=n(Qr,"What D3 does 3\uFE0F\u20E3"),Qr.forEach(s),Kr.forEach(s),Ha=h(e),Te=c(e,"P",{});var On=l(Te);al=n(On,"D3 allows for intuitive transformations of the DOM by leveraging easy-to-understand selection syntax. Sound confusing? Let\u2019s learn through an example (adapted from the "),dt=c(On,"A",{href:!0,rel:!0});var Xr=l(dt);nl=n(Xr,"D3 homepage"),Xr.forEach(s),ll=n(On,"). Imagine we had 5 circles and wanted to change the fill of each."),On.forEach(s),Ta=h(e),W=k(e,"svg",{class:!0});var Ot=l(W);ht=k(Ot,"rect",{width:!0,height:!0,class:!0}),l(ht).forEach(s),ne=k(Ot,"circle",{cx:!0,cy:!0,r:!0,fill:!0,class:!0});var ei=l(ne);ws=k(ei,"title",{});var ti=l(ws);ol=n(ti,"Hello from the circle!"),ti.forEach(s),ei.forEach(s),le=k(Ot,"circle",{cx:!0,cy:!0,r:!0,fill:!0,class:!0});var si=l(le);ks=k(si,"title",{});var ai=l(ks);rl=n(ai,"Hello from the circle!"),ai.forEach(s),si.forEach(s),oe=k(Ot,"circle",{cx:!0,cy:!0,r:!0,fill:!0,class:!0});var ni=l(oe);gs=k(ni,"title",{});var li=l(gs);il=n(li,"Hello from the circle!"),li.forEach(s),ni.forEach(s),re=k(Ot,"circle",{cx:!0,cy:!0,r:!0,fill:!0,class:!0});var oi=l(re);ys=k(oi,"title",{});var ri=l(ys);cl=n(ri,"Hello from the circle!"),ri.forEach(s),oi.forEach(s),ie=k(Ot,"circle",{cx:!0,cy:!0,r:!0,fill:!0,class:!0});var ii=l(ie);_s=k(ii,"title",{});var ci=l(_s);pl=n(ci,"Hello from the circle!"),ci.forEach(s),ii.forEach(s),Ot.forEach(s),Aa=h(e),Ae=c(e,"P",{});var Mn=l(Ae);ul=n(Mn,"In the traditional "),mt=c(Mn,"A",{href:!0,rel:!0});var pi=l(mt);fl=n(pi,"HTML DOM model"),pi.forEach(s),dl=n(Mn,", we would 1) select all circles, 2) loop through each one, and 3) redefine its fill. In code, that would look like this:"),Mn.forEach(s),Pa=h(e),T(Pe.$$.fragment,e),ja=h(e),je=c(e,"P",{});var Ln=l(je);hl=n(Ln,"Doing this in D3 would reduce the length of our code by a factor of 5, and allows us to write in a way that "),bs=c(Ln,"EM",{});var ui=l(bs);ml=n(ui,"just makes sense"),ui.forEach(s),vl=n(Ln,". Here, we select every circle and change its fill."),Ln.forEach(s),Oa=h(e),T(Oe.$$.fragment,e),Ma=h(e),B=k(e,"svg",{class:!0});var Mt=l(B);vt=k(Mt,"rect",{width:!0,height:!0,class:!0}),l(vt).forEach(s),ce=k(Mt,"circle",{cx:!0,cy:!0,r:!0,fill:!0,class:!0});var fi=l(ce);Es=k(fi,"title",{});var di=l(Es);wl=n(di,"Hello from the circle!"),di.forEach(s),fi.forEach(s),pe=k(Mt,"circle",{cx:!0,cy:!0,r:!0,fill:!0,class:!0});var hi=l(pe);$s=k(hi,"title",{});var mi=l($s);kl=n(mi,"Hello from the circle!"),mi.forEach(s),hi.forEach(s),ue=k(Mt,"circle",{cx:!0,cy:!0,r:!0,fill:!0,class:!0});var vi=l(ue);Is=k(vi,"title",{});var wi=l(Is);gl=n(wi,"Hello from the circle!"),wi.forEach(s),vi.forEach(s),fe=k(Mt,"circle",{cx:!0,cy:!0,r:!0,fill:!0,class:!0});var ki=l(fe);Ss=k(ki,"title",{});var gi=l(Ss);yl=n(gi,"Hello from the circle!"),gi.forEach(s),ki.forEach(s),de=k(Mt,"circle",{cx:!0,cy:!0,r:!0,fill:!0,class:!0});var yi=l(de);Ds=k(yi,"title",{});var _i=l(Ds);_l=n(_i,"Hello from the circle!"),_i.forEach(s),yi.forEach(s),Mt.forEach(s),La=h(e),Ut=c(e,"P",{});var bi=l(Ut);bl=n(bi,"Imagine if you also wanted to bind data to those circles. That is, you wanted to fill the circle according to some attribute, or size its radius according to some datapoint. In traditional JavaScript, that might look something like this:"),bi.forEach(s),Ga=h(e),T(Me.$$.fragment,e),Ra=h(e),Yt=c(e,"P",{});var Ei=l(Yt);El=n(Ei,"Not too hard\u2014but also, not too easy. D3 simplifies this logic by removing the need for a loop and iterating on your selection for you:"),Ei.forEach(s),Wa=h(e),T(Le.$$.fragment,e),Ba=h(e),C=k(e,"svg",{class:!0});var Lt=l(C);wt=k(Lt,"rect",{width:!0,height:!0,class:!0}),l(wt).forEach(s),he=k(Lt,"circle",{cx:!0,cy:!0,r:!0,fill:!0,class:!0});var $i=l(he);qs=k($i,"title",{});var Ii=l(qs);$l=n(Ii,"Hello from the circle!"),Ii.forEach(s),$i.forEach(s),me=k(Lt,"circle",{cx:!0,cy:!0,r:!0,fill:!0,class:!0});var Si=l(me);xs=k(Si,"title",{});var Di=l(xs);Il=n(Di,"Hello from the circle!"),Di.forEach(s),Si.forEach(s),ve=k(Lt,"circle",{cx:!0,cy:!0,r:!0,fill:!0,class:!0});var qi=l(ve);zs=k(qi,"title",{});var xi=l(zs);Sl=n(xi,"Hello from the circle!"),xi.forEach(s),qi.forEach(s),we=k(Lt,"circle",{cx:!0,cy:!0,r:!0,fill:!0,class:!0});var zi=l(we);Hs=k(zi,"title",{});var Hi=l(Hs);Dl=n(Hi,"Hello from the circle!"),Hi.forEach(s),zi.forEach(s),ke=k(Lt,"circle",{cx:!0,cy:!0,r:!0,fill:!0,class:!0});var Ti=l(ke);Ts=k(Ti,"title",{});var Ai=l(Ts);ql=n(Ai,"Hello from the circle!"),Ai.forEach(s),Ti.forEach(s),Lt.forEach(s),Ca=h(e),Ge=c(e,"P",{});var Gn=l(Ge);xl=n(Gn,"Again, we reduce the length of our code nearly 5x, and the code just "),As=c(Gn,"STRONG",{});var Pi=l(As);zl=n(Pi,"makes sense"),Pi.forEach(s),Hl=n(Gn,"."),Gn.forEach(s),Va=h(e),Zt=c(e,"P",{});var ji=l(Zt);Tl=n(ji,"All that to say, D3 is great. It works, and it works wonderfully. By removing the need to write highly imperative code that is unintuitive in nature, D3 saves developers time and allows for more powerful visualizations."),ji.forEach(s),Na=h(e),z=c(e,"P",{});var $e=l(z);Al=n($e,"But I\u2019m hardly using it at all recently. Increasingly, I\u2019ve been using the JavaScript "),Ps=c($e,"DEL",{});var Oi=l(Ps);Pl=n(Oi,"framework"),Oi.forEach(s),jl=n($e," compiler "),kt=c($e,"A",{href:!0,rel:!0});var Mi=l(kt);Ol=n(Mi,"Svelte"),Mi.forEach(s),Ml=n($e," to "),js=c($e,"EM",{});var Li=l(js);Ll=n(Li,"write SVG directly"),Li.forEach(s),Gl=n($e," rather than "),Os=c($e,"EM",{});var Gi=l(Os);Rl=n(Gi,"tell JavaScript to write SVG"),Gi.forEach(s),Wl=n($e,". How? Let\u2019s see below."),$e.forEach(s),Fa=h(e),gt=c(e,"H2",{id:!0});var Ri=l(gt);Kt=c(Ri,"A",{href:!0});var Wi=l(Kt);Bl=n(Wi,"\u201CLiteral\u201D programming with Svelte \u{1F5E3}"),Wi.forEach(s),Ri.forEach(s),Ja=h(e),Re=c(e,"P",{});var Rn=l(Re);Cl=n(Rn,"Going back to the above circles, imagine if we could simply bind our data to our app\u2019s markup "),Ms=c(Rn,"STRONG",{});var Bi=l(Ms);Vl=n(Bi,"directly"),Bi.forEach(s),Nl=n(Rn,", without any intermediate code serving as instructions."),Rn.forEach(s),Ua=h(e),yt=c(e,"P",{});var Rr=l(yt);Ls=c(Rr,"STRONG",{});var Ci=l(Ls);Fl=n(Ci,"We can!"),Ci.forEach(s),Jl=n(Rr," Svelte (and Vue, React and other frameworks) allow for seamless interactions between our app\u2019s logic, data, and markup, so that we can embed data directly into our SVG elements. In this new paradigm, we could replace the set of D3 instructions from earlier with the following Svelte code:"),Rr.forEach(s),Ya=h(e),T(We.$$.fragment,e),Za=h(e),Qt=c(e,"P",{});var Vi=l(Qt);Ul=n(Vi,"In my view, there are three benefits to writing our code this way:"),Vi.forEach(s),Ka=h(e),ge=c(e,"OL",{});var us=l(ge);Be=c(us,"LI",{});var $a=l(Be);Gs=c($a,"STRONG",{});var Ni=l(Gs);Yl=n(Ni,"More intuitive authoring."),Ni.forEach(s),Zl=n($a," It feels much more natural to write our SVG elements "),Rs=c($a,"EM",{});var Fi=l(Rs);Kl=n(Fi,"directly"),Fi.forEach(s),Ql=n($a," rather than provide D3 instructions on how to do so."),$a.forEach(s),Xl=h(us),Ce=c(us,"LI",{});var Ia=l(Ce);Ws=c(Ia,"STRONG",{});var Ji=l(Ws);eo=n(Ji,"Less friction in translating D3 to the DOM."),Ji.forEach(s),to=n(Ia," By writing SVG directly, we could copy an SVG element from the "),_t=c(Ia,"A",{href:!0,rel:!0});var Ui=l(_t);so=n(Ui,"MDN docs"),Ui.forEach(s),ao=n(Ia,", paste in our values, and see immediate results. Fewer handoffs results in fewer errors."),Ia.forEach(s),no=h(us),V=c(us,"LI",{});var qe=l(V);Bs=c(qe,"STRONG",{});var Yi=l(Bs);lo=n(Yi,"Reusability."),Yi.forEach(s),oo=n(qe," Creating a robust and flexible "),Cs=c(qe,"CODE",{});var Zi=l(Cs);ro=n(Zi,"<Circle />"),Zi.forEach(s),io=n(qe,", "),Vs=c(qe,"CODE",{});var Ki=l(Vs);co=n(Ki,"<Bar />"),Ki.forEach(s),po=n(qe,", or "),Ns=c(qe,"CODE",{});var Qi=l(Ns);uo=n(Qi,"<Axis />"),Qi.forEach(s),fo=n(qe," component permits consistent reuse within and across projects. D3 code is usually written as a series of blocks which lacks a natural structure and becomes difficult to reuse effectively."),qe.forEach(s),us.forEach(s),Qa=h(e),Ve=c(e,"P",{});var Wn=l(Ve);ho=n(Wn,"The only downside (which is actually just an adjustment) is that this new approach requires you to learn how to "),bt=c(Wn,"A",{href:!0,rel:!0});var Xi=l(bt);mo=n(Xi,"write SVG"),Xi.forEach(s),vo=n(Wn,". But isn\u2019t it a good exercise to learn the anatomy of what we\u2019re actually creating? Having knowledge of SVG elements and attributes will benefit any developer who creates visuals, no matter how they eventually do so."),Wn.forEach(s),Xa=h(e),Xt=c(e,"P",{});var ec=l(Xt);wo=n(ec,"Not convinced? Let me explain the logic one more time, with a tastier example:"),ec.forEach(s),en=h(e),Et=c(e,"H2",{id:!0});var tc=l(Et);es=c(tc,"A",{href:!0});var sc=l(es);ko=n(sc,"Bringing it home with burgers \u{1F354}"),sc.forEach(s),tc.forEach(s),tn=h(e),ts=c(e,"P",{});var ac=l(ts);go=n(ac,"Imagine we want to prepare a burger. We have an array of objects, each with an ingredient and ingredient-specfic instructions. We want to 1) create each item (insert it into the DOM), and 2) carry out its instructions (execute some function)."),ac.forEach(s),sn=h(e),T(Ne.$$.fragment,e),an=h(e),ss=c(e,"P",{});var nc=l(ss);yo=n(nc,"There are three ways to make this burger (at least, in our fantasy world where we make burgers via code)."),nc.forEach(s),nn=h(e),T(Fe.$$.fragment,e),ln=h(e),$t=c(e,"P",{});var Wr=l($t);Fs=c(Wr,"STRONG",{});var lc=l(Fs);_o=n(lc,"The first option"),lc.forEach(s),bo=n(Wr," (old school) is to tell your app to loop through each ingredient, add it to the others, and stack the ingredients accordingly. For each ingredient in the loop, execute the burger-making according to our ingredient-specific instruction. This is how burgers would have been made, painfully, before D3."),Wr.forEach(s),on=h(e),U=c(e,"IFRAME",{loading:!0,src:!0,width:!0,height:!0,title:!0}),l(U).forEach(s),rn=h(e),De=c(e,"P",{});var Sa=l(De);Js=c(Sa,"STRONG",{});var oc=l(Js);Eo=n(oc,"The second option"),oc.forEach(s),$o=n(Sa," (new school) is to tell your app to read in each ingredient and instruction through D3 method chaining. We remove the need for our verbose "),Us=c(Sa,"CODE",{});var rc=l(Us);Io=n(rc,"for"),rc.forEach(s),So=n(Sa," loop, and use the chain to give D3 a set of sequential instructions."),Sa.forEach(s),cn=h(e),Y=c(e,"IFRAME",{loading:!0,src:!0,width:!0,height:!0,title:!0}),l(Y).forEach(s),pn=h(e),N=c(e,"P",{});var st=l(N);Do=n(st,"In "),Ys=c(st,"STRONG",{});var ic=l(Ys);qo=n(ic,"our final option"),ic.forEach(s),xo=n(st," (new new school), we can simply append our instructions directly to the ingredient, "),Zs=c(st,"EM",{});var cc=l(Zs);zo=n(cc,"literally"),cc.forEach(s),Ho=n(st,". Here, we skip "),Ks=c(st,"CODE",{});var pc=l(Ks);To=n(pc,"for"),pc.forEach(s),Ao=n(st," loops and we skip D3 method chaining; instead, we componentize our general \u201Cburger item\u201D and pass each ingredient/instruction directly to that component. Only Svelte enables such burgers:"),st.forEach(s),un=h(e),Z=c(e,"IFRAME",{loading:!0,src:!0,width:!0,height:!0,title:!0}),l(Z).forEach(s),fn=h(e),ye=c(e,"P",{});var fs=l(ye);Po=n(fs,"Which do you prefer? It\u2019s much easier to make a burger by "),Qs=c(fs,"EM",{});var uc=l(Qs);jo=n(uc,"just making it"),uc.forEach(s),Oo=n(fs,", rather than giving instructions, no matter what form they come in. Frameworks allow for the construction of burgers\u2014and visualizations\u2014"),Xs=c(fs,"STRONG",{});var fc=l(Xs);Mo=n(fc,"literally"),fc.forEach(s),Lo=n(fs,". We write our ingredients (or DOM elements) directly, and include our instructions (or data) in our markup. Now that\u2019s a tasty burger."),fs.forEach(s),dn=h(e),It=c(e,"H2",{id:!0});var dc=l(It);as=c(dc,"A",{href:!0});var hc=l(as);Go=n(hc,"The big picture \u{1F5BC}"),hc.forEach(s),dc.forEach(s),hn=h(e),_e=c(e,"OL",{});var ds=l(_e);K=c(ds,"LI",{});var at=l(K);Ro=n(at,"Svelte allows visualization developers to "),ea=c(at,"STRONG",{});var mc=l(ea);Wo=n(mc,"write SVG directly"),mc.forEach(s),Bo=n(at," (and avoid telling D3 what to do), while using Svelte syntax ("),ta=c(at,"CODE",{});var vc=l(ta);Co=n(vc,"{#each}"),vc.forEach(s),Vo=n(at,", etc.) to avoid annoying and inefficient "),sa=c(at,"CODE",{});var wc=l(sa);No=n(wc,"for"),wc.forEach(s),Fo=n(at," loops."),at.forEach(s),Jo=h(ds),St=c(ds,"LI",{});var Bn=l(St);Uo=n(Bn,"Including logic directly in your markup ("),aa=c(Bn,"CODE",{});var kc=l(aa);Yo=n(kc,"{#if}"),kc.forEach(s),Zo=n(Bn,", etc.) removes the need for complex JavaScript/DOM interactions (more on that below)."),Bn.forEach(s),Ko=h(ds),L=c(ds,"LI",{});var Ie=l(L);Qo=n(Ie,"Svelte works to "),na=c(Ie,"EM",{});var gc=l(na);Xo=n(gc,"complement"),gc.forEach(s),er=n(Ie," D3, not replace it, by continuing to leverage the most powerful parts of its API: "),la=c(Ie,"CODE",{});var yc=l(la);tr=n(yc,"d3-scale"),yc.forEach(s),sr=n(Ie,", "),oa=c(Ie,"CODE",{});var _c=l(oa);ar=n(_c,"d3-array"),_c.forEach(s),nr=n(Ie,", "),ra=c(Ie,"CODE",{});var bc=l(ra);lr=n(bc,"d3-shape"),bc.forEach(s),or=n(Ie,", etc."),Ie.forEach(s),ds.forEach(s),mn=h(e),vn=c(e,"HR",{}),wn=h(e),Dt=c(e,"H2",{id:!0});var Ec=l(Dt);ns=c(Ec,"A",{href:!0});var $c=l(ns);rr=n($c,"Bonus perks \u{1F3C6}"),$c.forEach(s),Ec.forEach(s),kn=h(e),ls=c(e,"P",{});var Ic=l(ls);ir=n(Ic,"Using Svelte to create visualizations has a few other perks:"),Ic.forEach(s),gn=h(e),qt=c(e,"H3",{id:!0});var Sc=l(qt);os=c(Sc,"A",{href:!0});var Dc=l(os);cr=n(Dc,"Responsiveness"),Dc.forEach(s),Sc.forEach(s),yn=h(e),Je=c(e,"P",{});var Cn=l(Je);pr=n(Cn,"By using Svelte\u2019s "),xt=c(Cn,"A",{href:!0,rel:!0});var qc=l(xt);ur=n(qc,"reactive declarations"),qc.forEach(s),fr=n(Cn," (the dollar signs \u{1F4B0}), we can make certain variables  \u2018watch\u2019 for state changes and update automatically. One huge benefit of this is that we can bind our scales to updating values such as the window width, and write minimal code to make our charts update on resize."),Cn.forEach(s),_n=h(e),T(Ue.$$.fragment,e),bn=h(e),F=c(e,"P",{});var nt=l(F);dr=n(nt,"With some other component watching and responding to resize events (such as "),zt=c(nt,"A",{href:!0,rel:!0});var xc=l(zt);hr=n(xc,"Window.svelte"),xc.forEach(s),mr=n(nt,"), any SVG property depending on "),ia=c(nt,"CODE",{});var zc=l(ia);vr=n(zc,"xScale"),zc.forEach(s),wr=n(nt," will automatically update when your window resizes. You can also set the chart width itself to equal "),ca=c(nt,"CODE",{});var Hc=l(ca);kr=n(Hc,"$windowWidth"),Hc.forEach(s),gr=n(nt," for a fully resizable, responsive chart."),nt.forEach(s),En=h(e),T(Ye.$$.fragment,e),$n=h(e),Ht=c(e,"H3",{id:!0});var Tc=l(Ht);rs=c(Tc,"A",{href:!0});var Ac=l(rs);yr=n(Ac,"If/else blocks"),Ac.forEach(s),Tc.forEach(s),In=h(e),Ze=c(e,"P",{});var Vn=l(Ze);_r=n(Vn,"In regular D3, we often use the "),Tt=c(Vn,"A",{href:!0,rel:!0});var Pc=l(Tt);br=n(Pc,"ternary operator"),Pc.forEach(s),Er=n(Vn," to define condition-specific attributes, like this:"),Vn.forEach(s),Sn=h(e),T(Ke.$$.fragment,e),Dn=h(e),is=c(e,"P",{});var jc=l(is);$r=n(jc,"This is great, but what if we want to make more significant changes based on app-wide state? For example, imagine we want to show three different types of the same visualization on different screen sizes:"),jc.forEach(s),qn=h(e),be=c(e,"OL",{});var hs=l(be);pa=c(hs,"LI",{});var Oc=l(pa);Ir=n(Oc,"Desktop (over 1024px)"),Oc.forEach(s),Sr=h(hs),ua=c(hs,"LI",{});var Mc=l(ua);Dr=n(Mc,"Tablet (520px to 1024px)"),Mc.forEach(s),qr=h(hs),fa=c(hs,"LI",{});var Lc=l(fa);xr=n(Lc,"Mobile (under 520px)"),Lc.forEach(s),hs.forEach(s),xn=h(e),cs=c(e,"P",{});var Gc=l(cs);zr=n(Gc,"In D3, we would achieve this by adding a resize event listener, providing custom breakpoints, and rendering different visuals if the updated window width were within a certain range. The complicated part would be having to render a different visual at each breakpoint."),Gc.forEach(s),zn=h(e),Ee=c(e,"P",{});var ms=l(Ee);Hr=n(ms,"One key difference between relying on D3 and leveraging the power of Svelte is that Svelte allows for "),At=c(ms,"A",{href:!0,rel:!0});var Rc=l(At);Tr=n(Rc,"conditional rendering"),Rc.forEach(s),Ar=h(ms),da=c(ms,"EM",{});var Wc=l(da);Pr=n(Wc,"directly in our markup"),Wc.forEach(s),jr=n(ms,", not just in our JavaScript logic. In other words, while vanilla JavaScript would approach our problem with the following:"),ms.forEach(s),Hn=h(e),T(Qe.$$.fragment,e),Tn=h(e),ps=c(e,"P",{});var Bc=l(ps);Or=n(Bc,"Svelte simplifies our logic to:"),Bc.forEach(s),An=h(e),T(Xe.$$.fragment,e),Pn=h(e),et=c(e,"P",{});var Nn=l(et);Mr=n(Nn,"Hey, thanks for reading. I appreciate you! In the event that you disagree with me or I got something wrong, please message me on "),Pt=c(Nn,"A",{href:!0,rel:!0});var Cc=l(Pt);Lr=n(Cc,"Twitter"),Cc.forEach(s),Gr=n(Nn,"."),Nn.forEach(s),this.h()},h(){o(f,"href","https://d3js.org/"),o(f,"rel","nofollow"),o(x,"href","https://svelte.dev/"),o(x,"rel","nofollow"),o(se,"href","https://d3js.org/#selections"),o(se,"rel","nofollow"),o(ae,"href","https://www.carlosrendon.me/unfinished_d3_book/d3_method_chaining.html"),o(ae,"rel","nofollow"),o(Ct,"href","#what-youll-find-in-this-post"),o(ut,"id","what-youll-find-in-this-post"),o(Vt,"href","#what-d3-does-3%EF%B8%8F%E2%83%A3"),o(Nt,"href","#literal-programming-with-svelte-"),o(Ft,"href","#bringing-it-home-with-burgers-"),o(Jt,"href","#what-d3-does-3\uFE0F\u20E3"),o(ft,"id","what-d3-does-3\uFE0F\u20E3"),o(dt,"href","https://d3js.org/#selections"),o(dt,"rel","nofollow"),o(ht,"width","100%"),o(ht,"height","100%"),o(ht,"class","svelte-1qkbzqf"),o(ne,"cx","10%"),o(ne,"cy","50%"),o(ne,"r","10"),o(ne,"fill","steelblue"),o(ne,"class","svelte-1qkbzqf"),o(le,"cx","30%"),o(le,"cy","50%"),o(le,"r","10"),o(le,"fill","steelblue"),o(le,"class","svelte-1qkbzqf"),o(oe,"cx","50%"),o(oe,"cy","50%"),o(oe,"r","10"),o(oe,"fill","steelblue"),o(oe,"class","svelte-1qkbzqf"),o(re,"cx","70%"),o(re,"cy","50%"),o(re,"r","10"),o(re,"fill","steelblue"),o(re,"class","svelte-1qkbzqf"),o(ie,"cx","90%"),o(ie,"cy","50%"),o(ie,"r","10"),o(ie,"fill","steelblue"),o(ie,"class","svelte-1qkbzqf"),o(W,"class","svelte-1qkbzqf"),o(mt,"href","https://www.w3schools.com/js/js_htmldom.asp"),o(mt,"rel","nofollow"),o(vt,"width","100%"),o(vt,"height","100%"),o(vt,"class","svelte-1qkbzqf"),o(ce,"cx","10%"),o(ce,"cy","50%"),o(ce,"r","10"),o(ce,"fill","white"),o(ce,"class","svelte-1qkbzqf"),o(pe,"cx","30%"),o(pe,"cy","50%"),o(pe,"r","10"),o(pe,"fill","white"),o(pe,"class","svelte-1qkbzqf"),o(ue,"cx","50%"),o(ue,"cy","50%"),o(ue,"r","10"),o(ue,"fill","white"),o(ue,"class","svelte-1qkbzqf"),o(fe,"cx","70%"),o(fe,"cy","50%"),o(fe,"r","10"),o(fe,"fill","white"),o(fe,"class","svelte-1qkbzqf"),o(de,"cx","90%"),o(de,"cy","50%"),o(de,"r","10"),o(de,"fill","white"),o(de,"class","svelte-1qkbzqf"),o(B,"class","svelte-1qkbzqf"),o(wt,"width","100%"),o(wt,"height","100%"),o(wt,"class","svelte-1qkbzqf"),o(he,"cx","10%"),o(he,"cy","50%"),o(he,"r","5"),o(he,"fill","white"),o(he,"class","svelte-1qkbzqf"),o(me,"cx","30%"),o(me,"cy","50%"),o(me,"r","10"),o(me,"fill","white"),o(me,"class","svelte-1qkbzqf"),o(ve,"cx","50%"),o(ve,"cy","50%"),o(ve,"r","15"),o(ve,"fill","white"),o(ve,"class","svelte-1qkbzqf"),o(we,"cx","70%"),o(we,"cy","50%"),o(we,"r","20"),o(we,"fill","white"),o(we,"class","svelte-1qkbzqf"),o(ke,"cx","90%"),o(ke,"cy","50%"),o(ke,"r","25"),o(ke,"fill","white"),o(ke,"class","svelte-1qkbzqf"),o(C,"class","svelte-1qkbzqf"),o(kt,"href","https://svelte.dev/"),o(kt,"rel","nofollow"),o(Kt,"href","#literal-programming-with-svelte-"),o(gt,"id","literal-programming-with-svelte-"),o(_t,"href","https://developer.mozilla.org/en-US/docs/Web/SVG/Element/circle"),o(_t,"rel","nofollow"),o(bt,"href","https://www.w3schools.com/graphics/svg_intro.asp"),o(bt,"rel","nofollow"),o(es,"href","#bringing-it-home-with-burgers-"),o(Et,"id","bringing-it-home-with-burgers-"),o(U,"loading","lazy"),Cr(U.src,Nr="https://svelte.dev/repl/4b4eee03981b4450aa08e402aa0ceeb6?version=3.38.3")||o(U,"src",Nr),o(U,"width","100%"),o(U,"height","600"),o(U,"title","Old school burger building"),o(Y,"loading","lazy"),Cr(Y.src,Fr="https://svelte.dev/repl/8198de15de314aee860932629370ed09?version=3.38.3")||o(Y,"src",Fr),o(Y,"width","100%"),o(Y,"height","600"),o(Y,"title","New school burger building"),o(Z,"loading","lazy"),Cr(Z.src,Jr="https://svelte.dev/repl/f64bd9dcface42a1a2d544b35638631e?version=3")||o(Z,"src",Jr),o(Z,"width","100%"),o(Z,"height","600"),o(Z,"title","Literal burger building"),o(as,"href","#the-big-picture-"),o(It,"id","the-big-picture-"),o(ns,"href","#bonus-perks-"),o(Dt,"id","bonus-perks-"),o(os,"href","#responsiveness"),o(qt,"id","responsiveness"),o(xt,"href","https://svelte.dev/tutorial/reactive-declarations"),o(xt,"rel","nofollow"),o(zt,"href","https://github.com/the-pudding/svelte-starter/blob/master/src/components/helpers/Window.svelte"),o(zt,"rel","nofollow"),o(rs,"href","#ifelse-blocks"),o(Ht,"id","ifelse-blocks"),o(Tt,"href","https://en.wikipedia.org/wiki/%3F:"),o(Tt,"rel","nofollow"),o(At,"href","https://svelte.dev/tutorial/if-blocks"),o(At,"rel","nofollow"),o(Pt,"href","https://twitter.com/CL_Rothschild"),o(Pt,"rel","nofollow")},m(e,r){u(e,p,r),t(p,v),t(p,f),t(f,m),t(p,_),u(e,b,r),u(e,E,r),t(E,J),t(E,$),t($,I),t(E,ee),u(e,q,r),u(e,S,r),t(S,lt),t(S,M),t(M,ot),t(S,rt),t(S,te),t(te,G),t(S,it),t(S,x),t(x,ct),t(S,pt),u(e,D,r),u(e,y,r),t(y,Gt),t(y,se),t(se,Rt),t(y,Wt),t(y,ae),t(ae,ze),t(y,Bt),t(y,vs),t(vs,Fn),t(y,Jn),u(e,Da,r),u(e,ut,r),t(ut,Ct),t(Ct,Un),u(e,qa,r),u(e,R,r),t(R,Yn),t(R,Vt),t(Vt,Zn),t(R,Kn),t(R,Nt),t(Nt,Qn),t(R,Xn),t(R,Ft),t(Ft,el),t(R,tl),u(e,xa,r),A(He,e,r),u(e,za,r),u(e,ft,r),t(ft,Jt),t(Jt,sl),u(e,Ha,r),u(e,Te,r),t(Te,al),t(Te,dt),t(dt,nl),t(Te,ll),u(e,Ta,r),u(e,W,r),t(W,ht),t(W,ne),t(ne,ws),t(ws,ol),t(W,le),t(le,ks),t(ks,rl),t(W,oe),t(oe,gs),t(gs,il),t(W,re),t(re,ys),t(ys,cl),t(W,ie),t(ie,_s),t(_s,pl),u(e,Aa,r),u(e,Ae,r),t(Ae,ul),t(Ae,mt),t(mt,fl),t(Ae,dl),u(e,Pa,r),A(Pe,e,r),u(e,ja,r),u(e,je,r),t(je,hl),t(je,bs),t(bs,ml),t(je,vl),u(e,Oa,r),A(Oe,e,r),u(e,Ma,r),u(e,B,r),t(B,vt),t(B,ce),t(ce,Es),t(Es,wl),t(B,pe),t(pe,$s),t($s,kl),t(B,ue),t(ue,Is),t(Is,gl),t(B,fe),t(fe,Ss),t(Ss,yl),t(B,de),t(de,Ds),t(Ds,_l),u(e,La,r),u(e,Ut,r),t(Ut,bl),u(e,Ga,r),A(Me,e,r),u(e,Ra,r),u(e,Yt,r),t(Yt,El),u(e,Wa,r),A(Le,e,r),u(e,Ba,r),u(e,C,r),t(C,wt),t(C,he),t(he,qs),t(qs,$l),t(C,me),t(me,xs),t(xs,Il),t(C,ve),t(ve,zs),t(zs,Sl),t(C,we),t(we,Hs),t(Hs,Dl),t(C,ke),t(ke,Ts),t(Ts,ql),u(e,Ca,r),u(e,Ge,r),t(Ge,xl),t(Ge,As),t(As,zl),t(Ge,Hl),u(e,Va,r),u(e,Zt,r),t(Zt,Tl),u(e,Na,r),u(e,z,r),t(z,Al),t(z,Ps),t(Ps,Pl),t(z,jl),t(z,kt),t(kt,Ol),t(z,Ml),t(z,js),t(js,Ll),t(z,Gl),t(z,Os),t(Os,Rl),t(z,Wl),u(e,Fa,r),u(e,gt,r),t(gt,Kt),t(Kt,Bl),u(e,Ja,r),u(e,Re,r),t(Re,Cl),t(Re,Ms),t(Ms,Vl),t(Re,Nl),u(e,Ua,r),u(e,yt,r),t(yt,Ls),t(Ls,Fl),t(yt,Jl),u(e,Ya,r),A(We,e,r),u(e,Za,r),u(e,Qt,r),t(Qt,Ul),u(e,Ka,r),u(e,ge,r),t(ge,Be),t(Be,Gs),t(Gs,Yl),t(Be,Zl),t(Be,Rs),t(Rs,Kl),t(Be,Ql),t(ge,Xl),t(ge,Ce),t(Ce,Ws),t(Ws,eo),t(Ce,to),t(Ce,_t),t(_t,so),t(Ce,ao),t(ge,no),t(ge,V),t(V,Bs),t(Bs,lo),t(V,oo),t(V,Cs),t(Cs,ro),t(V,io),t(V,Vs),t(Vs,co),t(V,po),t(V,Ns),t(Ns,uo),t(V,fo),u(e,Qa,r),u(e,Ve,r),t(Ve,ho),t(Ve,bt),t(bt,mo),t(Ve,vo),u(e,Xa,r),u(e,Xt,r),t(Xt,wo),u(e,en,r),u(e,Et,r),t(Et,es),t(es,ko),u(e,tn,r),u(e,ts,r),t(ts,go),u(e,sn,r),A(Ne,e,r),u(e,an,r),u(e,ss,r),t(ss,yo),u(e,nn,r),A(Fe,e,r),u(e,ln,r),u(e,$t,r),t($t,Fs),t(Fs,_o),t($t,bo),u(e,on,r),u(e,U,r),u(e,rn,r),u(e,De,r),t(De,Js),t(Js,Eo),t(De,$o),t(De,Us),t(Us,Io),t(De,So),u(e,cn,r),u(e,Y,r),u(e,pn,r),u(e,N,r),t(N,Do),t(N,Ys),t(Ys,qo),t(N,xo),t(N,Zs),t(Zs,zo),t(N,Ho),t(N,Ks),t(Ks,To),t(N,Ao),u(e,un,r),u(e,Z,r),u(e,fn,r),u(e,ye,r),t(ye,Po),t(ye,Qs),t(Qs,jo),t(ye,Oo),t(ye,Xs),t(Xs,Mo),t(ye,Lo),u(e,dn,r),u(e,It,r),t(It,as),t(as,Go),u(e,hn,r),u(e,_e,r),t(_e,K),t(K,Ro),t(K,ea),t(ea,Wo),t(K,Bo),t(K,ta),t(ta,Co),t(K,Vo),t(K,sa),t(sa,No),t(K,Fo),t(_e,Jo),t(_e,St),t(St,Uo),t(St,aa),t(aa,Yo),t(St,Zo),t(_e,Ko),t(_e,L),t(L,Qo),t(L,na),t(na,Xo),t(L,er),t(L,la),t(la,tr),t(L,sr),t(L,oa),t(oa,ar),t(L,nr),t(L,ra),t(ra,lr),t(L,or),u(e,mn,r),u(e,vn,r),u(e,wn,r),u(e,Dt,r),t(Dt,ns),t(ns,rr),u(e,kn,r),u(e,ls,r),t(ls,ir),u(e,gn,r),u(e,qt,r),t(qt,os),t(os,cr),u(e,yn,r),u(e,Je,r),t(Je,pr),t(Je,xt),t(xt,ur),t(Je,fr),u(e,_n,r),A(Ue,e,r),u(e,bn,r),u(e,F,r),t(F,dr),t(F,zt),t(zt,hr),t(F,mr),t(F,ia),t(ia,vr),t(F,wr),t(F,ca),t(ca,kr),t(F,gr),u(e,En,r),A(Ye,e,r),u(e,$n,r),u(e,Ht,r),t(Ht,rs),t(rs,yr),u(e,In,r),u(e,Ze,r),t(Ze,_r),t(Ze,Tt),t(Tt,br),t(Ze,Er),u(e,Sn,r),A(Ke,e,r),u(e,Dn,r),u(e,is,r),t(is,$r),u(e,qn,r),u(e,be,r),t(be,pa),t(pa,Ir),t(be,Sr),t(be,ua),t(ua,Dr),t(be,qr),t(be,fa),t(fa,xr),u(e,xn,r),u(e,cs,r),t(cs,zr),u(e,zn,r),u(e,Ee,r),t(Ee,Hr),t(Ee,At),t(At,Tr),t(Ee,Ar),t(Ee,da),t(da,Pr),t(Ee,jr),u(e,Hn,r),A(Qe,e,r),u(e,Tn,r),u(e,ps,r),t(ps,Or),u(e,An,r),A(Xe,e,r),u(e,Pn,r),u(e,et,r),t(et,Mr),t(et,Pt),t(Pt,Lr),t(et,Gr),jn=!0},p(e,r){const ha={};r&2&&(ha.$$scope={dirty:r,ctx:e}),He.$set(ha);const jt={};r&2&&(jt.$$scope={dirty:r,ctx:e}),Pe.$set(jt);const ma={};r&2&&(ma.$$scope={dirty:r,ctx:e}),Oe.$set(ma);const Q={};r&2&&(Q.$$scope={dirty:r,ctx:e}),Me.$set(Q);const va={};r&2&&(va.$$scope={dirty:r,ctx:e}),Le.$set(va);const wa={};r&2&&(wa.$$scope={dirty:r,ctx:e}),We.$set(wa);const ka={};r&2&&(ka.$$scope={dirty:r,ctx:e}),Ne.$set(ka);const X={};r&2&&(X.$$scope={dirty:r,ctx:e}),Fe.$set(X);const ga={};r&2&&(ga.$$scope={dirty:r,ctx:e}),Ue.$set(ga);const ya={};r&2&&(ya.$$scope={dirty:r,ctx:e}),Ye.$set(ya);const _a={};r&2&&(_a.$$scope={dirty:r,ctx:e}),Ke.$set(_a);const ba={};r&2&&(ba.$$scope={dirty:r,ctx:e}),Qe.$set(ba);const Ea={};r&2&&(Ea.$$scope={dirty:r,ctx:e}),Xe.$set(Ea)},i(e){jn||(P(He.$$.fragment,e),P(Pe.$$.fragment,e),P(Oe.$$.fragment,e),P(Me.$$.fragment,e),P(Le.$$.fragment,e),P(We.$$.fragment,e),P(Ne.$$.fragment,e),P(Fe.$$.fragment,e),P(Ue.$$.fragment,e),P(Ye.$$.fragment,e),P(Ke.$$.fragment,e),P(Qe.$$.fragment,e),P(Xe.$$.fragment,e),jn=!0)},o(e){j(He.$$.fragment,e),j(Pe.$$.fragment,e),j(Oe.$$.fragment,e),j(Me.$$.fragment,e),j(Le.$$.fragment,e),j(We.$$.fragment,e),j(Ne.$$.fragment,e),j(Fe.$$.fragment,e),j(Ue.$$.fragment,e),j(Ye.$$.fragment,e),j(Ke.$$.fragment,e),j(Qe.$$.fragment,e),j(Xe.$$.fragment,e),jn=!1},d(e){e&&s(p),e&&s(b),e&&s(E),e&&s(q),e&&s(S),e&&s(D),e&&s(y),e&&s(Da),e&&s(ut),e&&s(qa),e&&s(R),e&&s(xa),O(He,e),e&&s(za),e&&s(ft),e&&s(Ha),e&&s(Te),e&&s(Ta),e&&s(W),e&&s(Aa),e&&s(Ae),e&&s(Pa),O(Pe,e),e&&s(ja),e&&s(je),e&&s(Oa),O(Oe,e),e&&s(Ma),e&&s(B),e&&s(La),e&&s(Ut),e&&s(Ga),O(Me,e),e&&s(Ra),e&&s(Yt),e&&s(Wa),O(Le,e),e&&s(Ba),e&&s(C),e&&s(Ca),e&&s(Ge),e&&s(Va),e&&s(Zt),e&&s(Na),e&&s(z),e&&s(Fa),e&&s(gt),e&&s(Ja),e&&s(Re),e&&s(Ua),e&&s(yt),e&&s(Ya),O(We,e),e&&s(Za),e&&s(Qt),e&&s(Ka),e&&s(ge),e&&s(Qa),e&&s(Ve),e&&s(Xa),e&&s(Xt),e&&s(en),e&&s(Et),e&&s(tn),e&&s(ts),e&&s(sn),O(Ne,e),e&&s(an),e&&s(ss),e&&s(nn),O(Fe,e),e&&s(ln),e&&s($t),e&&s(on),e&&s(U),e&&s(rn),e&&s(De),e&&s(cn),e&&s(Y),e&&s(pn),e&&s(N),e&&s(un),e&&s(Z),e&&s(fn),e&&s(ye),e&&s(dn),e&&s(It),e&&s(hn),e&&s(_e),e&&s(mn),e&&s(vn),e&&s(wn),e&&s(Dt),e&&s(kn),e&&s(ls),e&&s(gn),e&&s(qt),e&&s(yn),e&&s(Je),e&&s(_n),O(Ue,e),e&&s(bn),e&&s(F),e&&s(En),O(Ye,e),e&&s($n),e&&s(Ht),e&&s(In),e&&s(Ze),e&&s(Sn),O(Ke,e),e&&s(Dn),e&&s(is),e&&s(qn),e&&s(be),e&&s(xn),e&&s(cs),e&&s(zn),e&&s(Ee),e&&s(Hn),O(Qe,e),e&&s(Tn),e&&s(ps),e&&s(An),O(Xe,e),e&&s(Pn),e&&s(et)}}}function fp(g){let p,v;const f=[g[0],Fc];let m={$$slots:{default:[up]},$$scope:{ctx:g}};for(let _=0;_<f.length;_+=1)m=Br(m,f[_]);return p=new Kc({props:m}),{c(){H(p.$$.fragment)},l(_){T(p.$$.fragment,_)},m(_,b){A(p,_,b),v=!0},p(_,[b]){const E=b&1?Zc(f,[b&1&&Vc(_[0]),b&0&&Vc(Fc)]):{};b&2&&(E.$$scope={dirty:b,ctx:_}),p.$set(E)},i(_){v||(P(p.$$.fragment,_),v=!0)},o(_){j(p.$$.fragment,_),v=!1},d(_){O(p,_)}}}const Fc={layout:"blog",title:"Making visualizations literally using Svelte + D3",description:"Why Svelte has replaced (and complemented) D3 as my go-to tool for powerful visualizations",image:"svelte-and-d3/header.png",date:"2021-07-02",featured:!0,tags:["svelte","d3","tutorial"]};function dp(g,p,v){return g.$$set=f=>{v(0,p=Br(Br({},p),Nc(f)))},p=Nc(p),[p]}class Ip extends Jc{constructor(p){super();Uc(this,p,dp,fp,Yc,{})}}export{Ip as default,Fc as metadata};
