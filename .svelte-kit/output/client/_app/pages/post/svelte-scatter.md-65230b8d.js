import{S as Ql,i as Zl,s as tp,B as wo,j as Sl,m as Tl,o as $l,p as ep,q as Ml,x as Ll,u as jl,v as Hl,ak as Al,e as o,t as s,k as i,c as l,a as p,g as n,d as a,n as u,b as f,aa as ap,ae as Eo,ar as W,f as r,L as e}from"../../chunks/vendor-dfb9df3e.js";import sp from"./layout.svelte-b65b887a.js";/* empty css                                                       */import{I as np}from"../../chunks/Info-a85e8c05.js";import"../../chunks/BackTo-f09ad798.js";import"../../chunks/global-164a8ca5.js";import"../../chunks/utils-419e8671.js";import"../../chunks/CornerTitle-3a53cda1.js";import"../../chunks/store-b0ba4c19.js";/* empty css                                                      */function op(U){let d,_,w,m,h,v,M,lt,D,pt,ct,P,rt,it;return{c(){d=o("p"),_=s("We\u2019re using the "),w=o("code"),m=s("$"),h=s(" notation here because "),v=o("code"),M=s("chartWidth"),lt=s(" is "),D=o("em"),pt=s("reactive"),ct=s("; that is, it updates according to another variable, "),P=o("code"),rt=s("containerWidth"),it=s(", which updates on resize.")},l(L){d=l(L,"P",{});var k=p(d);_=n(k,"We\u2019re using the "),w=l(k,"CODE",{});var Pt=p(w);m=n(Pt,"$"),Pt.forEach(a),h=n(k," notation here because "),v=l(k,"CODE",{});var j=p(v);M=n(j,"chartWidth"),j.forEach(a),lt=n(k," is "),D=l(k,"EM",{});var St=p(D);pt=n(St,"reactive"),St.forEach(a),ct=n(k,"; that is, it updates according to another variable, "),P=l(k,"CODE",{});var Tt=p(P);rt=n(Tt,"containerWidth"),Tt.forEach(a),it=n(k,", which updates on resize."),k.forEach(a)},m(L,k){r(L,d,k),e(d,_),e(d,w),e(w,m),e(d,h),e(d,v),e(v,M),e(d,lt),e(d,D),e(D,pt),e(d,ct),e(d,P),e(P,rt),e(d,it)},d(L){L&&a(d)}}}function lp(U){let d,_,w,m,h,v,M,lt,D,pt,ct,P,rt,it,L,k,Pt,j,St,Tt,Ve,C,_o,Be,$t,Ba,Xe,b,Zt,Xa,Ya,ut,Ua,te,Ja,Ka,Qa,dt,Za,ee,ts,es,as,X,ss,ae,ns,os,se,ls,ps,cs,ne,rs,Ye,ft,Mt,is,Ue,y,us,oe,ds,fs,le,hs,ks,pe,ms,vs,ce,ws,Es,Je,ht,zl=`<code class="language-svelte"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">let</span> containerWidth<span class="token punctuation">;</span>
  <span class="token keyword">let</span> containerHeight <span class="token operator">=</span> <span class="token number">600</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>chart-container<span class="token punctuation">'</span></span> <span class="token attr-name"><span class="token namespace">bind:</span>offsetWidth=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>containerWidth<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span>
  <span class="token comment">&lt;!-- Chart will go here --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code>`,Ke,E,_s,re,bs,ys,kt,ie,gs,Os,ue,Cs,Is,de,xs,Ws,fe,Ds,Ps,Qe,H,Ss,he,Ts,$s,ke,Ms,Ls,Ze,A,js,me,Hs,As,ve,Rs,zs,ta,mt,Fl=`<code class="language-svelte"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">let</span> containerWidth<span class="token punctuation">;</span>
  <span class="token keyword">let</span> containerHeight <span class="token operator">=</span> <span class="token number">600</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> margin <span class="token operator">=</span> <span class="token punctuation">&#123;</span>top<span class="token operator">:</span> <span class="token number">30</span><span class="token punctuation">,</span> right<span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span> bottom<span class="token operator">:</span> <span class="token number">50</span><span class="token punctuation">,</span> left<span class="token operator">:</span> <span class="token number">50</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

  $<span class="token operator">:</span> chartWidth <span class="token operator">=</span> containerWidth <span class="token operator">-</span> margin<span class="token punctuation">.</span>left <span class="token operator">-</span> margin<span class="token punctuation">.</span>right<span class="token punctuation">;</span>
  $<span class="token operator">:</span> chartHeight <span class="token operator">=</span> containerHeight <span class="token operator">-</span> margin<span class="token punctuation">.</span>top <span class="token operator">-</span> margin<span class="token punctuation">.</span>bottom<span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>chart-container<span class="token punctuation">'</span></span> <span class="token attr-name"><span class="token namespace">bind:</span>offsetWidth=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>containerWidth<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span>
  <span class="token comment">&lt;!-- Chart will go here --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code>`,ea,J,aa,Lt,Fs,sa,S,bo,na,vt,K,Ns,we,qs,Gs,oa,Q,Vs,jt,Bs,la,wt,Xs,Ht,pa,I,Et,Ys,Ee,Us,Js,Ks,_t,Qs,_e,Zs,tn,en,bt,an,be,sn,nn,on,yt,ln,ye,pn,cn,ca,At,rn,ra,gt,Nl=`<code class="language-svelte"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>chart-container<span class="token punctuation">'</span></span> <span class="token attr-name"><span class="token namespace">bind:</span>offsetWidth=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>containerWidth<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Scatterplot</span> <span class="token language-javascript"><span class="token punctuation">&#123;</span>data<span class="token punctuation">&#125;</span></span> <span class="token attr-name">width=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>chartWidth<span class="token punctuation">&#125;</span></span> <span class="token attr-name">height=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>chartHeight<span class="token punctuation">&#125;</span></span> <span class="token language-javascript"><span class="token punctuation">&#123;</span>margin<span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code>`,ia,Z,un,ge,dn,fn,ua,Ot,ql=`<code class="language-svelte"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">export</span> <span class="token keyword">let</span> data<span class="token punctuation">;</span>
  <span class="token keyword">export</span> <span class="token keyword">let</span> width<span class="token punctuation">;</span>
  <span class="token keyword">export</span> <span class="token keyword">let</span> height<span class="token punctuation">;</span>
  <span class="token keyword">export</span> <span class="token keyword">let</span> margin<span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code>`,da,Y,hn,Oe,kn,mn,Rt,fa,tt,vn,Ct,Ce,wn,En,ha,R,_n,Ie,bn,yn,xe,gn,On,ka,It,Gl=`<code class="language-svelte"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
<span class="token comment">// Import props...</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> scaleLinear <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"d3-scale"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> extent <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"d3-array"</span><span class="token punctuation">;</span>

$<span class="token operator">:</span> xScale <span class="token operator">=</span> <span class="token function">scaleLinear</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">domain</span><span class="token punctuation">(</span><span class="token function">extent</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">d</span><span class="token punctuation">)</span> <span class="token operator">=></span> d<span class="token punctuation">.</span>mpg<span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">range</span><span class="token punctuation">(</span><span class="token punctuation">[</span>margin<span class="token punctuation">.</span>left<span class="token punctuation">,</span> width <span class="token operator">-</span> margin<span class="token punctuation">.</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

$<span class="token operator">:</span> yScale <span class="token operator">=</span> <span class="token function">scaleLinear</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">domain</span><span class="token punctuation">(</span><span class="token function">extent</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">d</span><span class="token punctuation">)</span> <span class="token operator">=></span> d<span class="token punctuation">.</span>hp<span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">range</span><span class="token punctuation">(</span><span class="token punctuation">[</span>height <span class="token operator">-</span> margin<span class="token punctuation">.</span>top<span class="token punctuation">,</span> margin<span class="token punctuation">.</span>bottom<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code>`,ma,g,Cn,zt,In,We,xn,Wn,De,Dn,Pn,Ft,Sn,va,z,Tn,Pe,$n,Mn,Se,Ln,jn,wa,F,Hn,Te,An,Rn,$e,zn,Fn,Ea,xt,et,Nn,Me,qn,Gn,_a,N,Vn,Le,Bn,Xn,Nt,Yn,ba,O,Un,je,Jn,Kn,He,Qn,Zn,Ae,to,eo,Re,ao,so,ya,qt,no,ga,T,yo,Oa,Gt,oo,Ca,at,ze,lo,po,Fe,co,Ia,Vt,ro,xa,Wt,st,io,Ne,uo,fo,Wa,nt,ho,qe,ko,mo,Da,Dt,Vl=`<code class="language-svelte"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">export</span> <span class="token keyword">let</span> cx<span class="token punctuation">;</span>
  <span class="token keyword">export</span> <span class="token keyword">let</span> cy<span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code>`,Pa;return J=new np({props:{$$slots:{default:[op]},$$scope:{ctx:U}}}),{c(){d=o("p"),_=s("Earlier this year, I wrote about how I use Svelte to compose beautiful, powerful data visualizations. In that post, I documented how Svelte has gradually replaced D3 as the key tool for creating graphics."),w=i(),m=o("p"),h=s("Here, I\u2019ll talk less "),v=o("em"),M=s("why"),lt=s(" and more "),D=o("em"),pt=s("how"),ct=s(". That is, I\u2019ll explain how to create "),P=o("strong"),rt=s("the ultimate scatterplot"),it=s(" using Svelte."),L=i(),k=o("p"),Pt=s("We\u2019ll be taking "),j=o("a"),St=s("this scatterplot"),Tt=s(", from the team at Observable, and recreating it (sort of). Then, we\u2019ll make it (hopefully) better."),Ve=i(),C=o("iframe"),Be=i(),$t=o("p"),Ba=s("In specific, we\u2019ll be doing the following:"),Xe=i(),b=o("ol"),Zt=o("li"),Xa=s("Decide upon and record our chart dimensions"),Ya=i(),ut=o("li"),Ua=s("Create a "),te=o("code"),Ja=s("<Scatterplot />"),Ka=s(" component"),Qa=i(),dt=o("li"),Za=s("Create a "),ee=o("code"),ts=s("<Circle />"),es=s(" component"),as=i(),X=o("li"),ss=s("Create an "),ae=o("code"),ns=s("<XAxis />"),os=s(" and "),se=o("code"),ls=s("<YAxis />"),ps=s(" component"),cs=i(),ne=o("li"),rs=s("Add interactivity via voronoi hovering"),Ye=i(),ft=o("h2"),Mt=o("a"),is=s("Chart dimensions"),Ue=i(),y=o("p"),us=s("Our first step is to decide upon and record our chart dimensions. For the sake of our example, lets make our chart\u2019s width "),oe=o("code"),ds=s("100%"),fs=s(" of its container\u2019s width, and its height "),le=o("code"),hs=s("600px"),ks=s(". In Svelte, we can bind a variable (in our case, "),pe=o("code"),ms=s("containerWidth"),vs=s(") to the "),ce=o("code"),ws=s("offsetWidth"),Es=s(" of a container."),Je=i(),ht=o("pre"),Ke=i(),E=o("p"),_s=s("Above, we\u2019re binding "),re=o("code"),bs=s("containerWidth"),ys=s(" to constantly equal the "),kt=o("a"),ie=o("code"),gs=s("offsetWidth"),Os=s(" of our "),ue=o("code"),Cs=s("chart-container"),Is=s(" div. This is generally a good decision because it binds the chart width to its "),de=o("em"),xs=s("container"),Ws=s(", rather than the "),fe=o("em"),Ds=s("window"),Ps=s(". This allows for the chart to be embedded in any sort of complex layout, and still remain properly sized."),Qe=i(),H=o("p"),Ss=s("More realistically, we want our "),he=o("em"),Ts=s("chart width"),$s=s(" to be slightly smaller than our "),ke=o("em"),Ms=s("container width"),Ls=s(", so that we have room for things like axis ticks and labels."),Ze=i(),A=o("p"),js=s("We can record the exact number of pixels we want \u201Con the sides\u201D in an object called "),me=o("code"),Hs=s("margin"),As=s(". Then, we can set a new variable, "),ve=o("code"),Rs=s("chartWidth"),zs=s(" to equal the container width, minus our horizontal margins."),ta=i(),mt=o("pre"),ea=i(),Sl(J.$$.fragment),aa=i(),Lt=o("p"),Fs=s("To see our reactive chart dimensions in action, play around with the width of the playground below:"),sa=i(),S=o("iframe"),na=i(),vt=o("h2"),K=o("a"),Ns=s("Create a "),we=o("code"),qs=s("<Scatterplot />"),Gs=s(" component"),oa=i(),Q=o("p"),Vs=s("Now that we have our chart dimensions, we can pass those dimensions into a component"),jt=o("more-info"),Bs=s(" that will handle the visualization itself."),la=i(),wt=o("p"),Xs=s("We\u2019ll want our scatterplot component to receive four properties."),Ht=o("more-info"),pa=i(),I=o("ol"),Et=o("li"),Ys=s("The data ("),Ee=o("code"),Us=s("data"),Js=s(")"),Ks=i(),_t=o("li"),Qs=s("Our chart width ("),_e=o("code"),Zs=s("chartWidth"),tn=s(")"),en=i(),bt=o("li"),an=s("Our chart height ("),be=o("code"),sn=s("chartHeight"),nn=s(")"),on=i(),yt=o("li"),ln=s("The margins surrounding our chart ("),ye=o("code"),pn=s("margin"),cn=s(")"),ca=i(),At=o("p"),rn=s("In code, that looks like this:"),ra=i(),gt=o("pre"),ia=i(),Z=o("p"),un=s("And in "),ge=o("code"),dn=s("Scatterplot.svelte"),fn=s(", we receive our props like this:"),ua=i(),Ot=o("pre"),da=i(),Y=o("p"),hn=s("Now that we have our dimensions, we\u2019ll want to create "),Oe=o("em"),kn=s("scales"),mn=s(" with them."),Rt=o("more-info"),fa=i(),tt=o("p"),vn=s("Here, we will leverage the power of D3\u2014in particular, "),Ct=o("a"),Ce=o("code"),wn=s("d3-scale"),En=s("\u2014to map our data\u2019s values to points on our canvas."),ha=i(),R=o("p"),_n=s("We\u2019ll want to make our scales reactive according to our dynamic size variables we referenced earlier. Here, notice how we use "),Ie=o("code"),bn=s("$"),yn=s(" to denote reactivity, and notice how we reference "),xe=o("code"),gn=s("width"),On=s("."),ka=i(),It=o("pre"),ma=i(),g=o("p"),Cn=s("In the above code, we\u2019re defining the domain "),zt=o("more-info"),In=s(" according to each cars\u2019 miles per gallon ("),We=o("code"),xn=s("mpg"),Wn=s(") and horsepower ("),De=o("code"),Dn=s("hp"),Pn=s("). We set the parameters for our range "),Ft=o("more-info"),Sn=s(" to span the starting position (the left/bottom margin) to our chart width/height (minus our right/top margin value)."),va=i(),z=o("p"),Tn=s("Now, when we pass a number into a scale, it will result in a point on the canvas. For example, the code "),Pe=o("code"),$n=s("xScale(25)"),Mn=s(" would result in a value of "),Se=o("code"),Ln=s("__"),jn=s("."),wa=i(),F=o("p"),Hn=s("We\u2019ll use these scales to define the "),Te=o("code"),An=s("cx"),Rn=s(" and "),$e=o("code"),zn=s("cy"),Fn=s(" values for each of our circles. To do so, we\u2019ll need to iterate on each datapoint and render something."),Ea=i(),xt=o("h2"),et=o("a"),Nn=s("Iterate with an "),Me=o("code"),qn=s("{#each}"),Gn=s(" block"),_a=i(),N=o("p"),Vn=s("In Svelte, an "),Le=o("code"),Bn=s("{#each}"),Xn=s(" block"),Nt=o("more-info"),Yn=s(" enables us to render listed content programatically, and include multiple attributes in the resulting markup."),ba=i(),O=o("p"),Un=s("For our data, we\u2019ll want to iterate over each "),je=o("em"),Jn=s("row"),Kn=s(" of our data, and pass each "),He=o("em"),Qn=s("row\u2019"),Zn=s("s "),Ae=o("code"),to=s("mpg"),eo=s(" and "),Re=o("code"),ao=s("hp"),so=s(" (or whatever value you want to pass to the scatterplot) into a component that will eventually render some SVG."),ya=i(),qt=o("p"),no=s("Lets learn by doing. If we simply iterated on each row and wrote out our MPG and HP values, it would look like this:"),ga=i(),T=o("iframe"),Oa=i(),Gt=o("p"),oo=s("But we don\u2019t want to write out our values, we want to:"),Ca=i(),at=o("ol"),ze=o("li"),lo=s("Transform those values into points on the canvas"),po=i(),Fe=o("li"),co=s("Pass them to a component that will render SVG elements"),Ia=i(),Vt=o("p"),ro=s("To transform \u2026"),xa=i(),Wt=o("h2"),st=o("a"),io=s("Create a "),Ne=o("code"),uo=s("<Circle />"),fo=s(" component"),Wa=i(),nt=o("p"),ho=s("Next, we want to create a "),qe=o("code"),ko=s("<Circle />"),mo=s(" component that will take in our mapped data, and display an SVG with the appropriate attributes. We first import our props, like so:"),Da=i(),Dt=o("pre"),this.h()},l(t){d=l(t,"P",{});var c=p(d);_=n(c,"Earlier this year, I wrote about how I use Svelte to compose beautiful, powerful data visualizations. In that post, I documented how Svelte has gradually replaced D3 as the key tool for creating graphics."),c.forEach(a),w=u(t),m=l(t,"P",{});var $=p(m);h=n($,"Here, I\u2019ll talk less "),v=l($,"EM",{});var go=p(v);M=n(go,"why"),go.forEach(a),lt=n($," and more "),D=l($,"EM",{});var Oo=p(D);pt=n(Oo,"how"),Oo.forEach(a),ct=n($,". That is, I\u2019ll explain how to create "),P=l($,"STRONG",{});var Co=p(P);rt=n(Co,"the ultimate scatterplot"),Co.forEach(a),it=n($," using Svelte."),$.forEach(a),L=u(t),k=l(t,"P",{});var Sa=p(k);Pt=n(Sa,"We\u2019ll be taking "),j=l(Sa,"A",{href:!0,rel:!0});var Io=p(j);St=n(Io,"this scatterplot"),Io.forEach(a),Tt=n(Sa,", from the team at Observable, and recreating it (sort of). Then, we\u2019ll make it (hopefully) better."),Sa.forEach(a),Ve=u(t),C=l(t,"IFRAME",{loading:!0,title:!0,width:!0,height:!0,frameborder:!0,style:!0,src:!0}),p(C).forEach(a),Be=u(t),$t=l(t,"P",{});var xo=p($t);Ba=n(xo,"In specific, we\u2019ll be doing the following:"),xo.forEach(a),Xe=u(t),b=l(t,"OL",{});var q=p(b);Zt=l(q,"LI",{});var Wo=p(Zt);Xa=n(Wo,"Decide upon and record our chart dimensions"),Wo.forEach(a),Ya=u(q),ut=l(q,"LI",{});var Ta=p(ut);Ua=n(Ta,"Create a "),te=l(Ta,"CODE",{});var Do=p(te);Ja=n(Do,"<Scatterplot />"),Do.forEach(a),Ka=n(Ta," component"),Ta.forEach(a),Qa=u(q),dt=l(q,"LI",{});var $a=p(dt);Za=n($a,"Create a "),ee=l($a,"CODE",{});var Po=p(ee);ts=n(Po,"<Circle />"),Po.forEach(a),es=n($a," component"),$a.forEach(a),as=u(q),X=l(q,"LI",{});var Bt=p(X);ss=n(Bt,"Create an "),ae=l(Bt,"CODE",{});var So=p(ae);ns=n(So,"<XAxis />"),So.forEach(a),os=n(Bt," and "),se=l(Bt,"CODE",{});var To=p(se);ls=n(To,"<YAxis />"),To.forEach(a),ps=n(Bt," component"),Bt.forEach(a),cs=u(q),ne=l(q,"LI",{});var $o=p(ne);rs=n($o,"Add interactivity via voronoi hovering"),$o.forEach(a),q.forEach(a),Ye=u(t),ft=l(t,"H2",{id:!0});var Mo=p(ft);Mt=l(Mo,"A",{href:!0});var Lo=p(Mt);is=n(Lo,"Chart dimensions"),Lo.forEach(a),Mo.forEach(a),Ue=u(t),y=l(t,"P",{});var G=p(y);us=n(G,"Our first step is to decide upon and record our chart dimensions. For the sake of our example, lets make our chart\u2019s width "),oe=l(G,"CODE",{});var jo=p(oe);ds=n(jo,"100%"),jo.forEach(a),fs=n(G," of its container\u2019s width, and its height "),le=l(G,"CODE",{});var Ho=p(le);hs=n(Ho,"600px"),Ho.forEach(a),ks=n(G,". In Svelte, we can bind a variable (in our case, "),pe=l(G,"CODE",{});var Ao=p(pe);ms=n(Ao,"containerWidth"),Ao.forEach(a),vs=n(G,") to the "),ce=l(G,"CODE",{});var Ro=p(ce);ws=n(Ro,"offsetWidth"),Ro.forEach(a),Es=n(G," of a container."),G.forEach(a),Je=u(t),ht=l(t,"PRE",{class:!0});var Bl=p(ht);Bl.forEach(a),Ke=u(t),E=l(t,"P",{});var x=p(E);_s=n(x,"Above, we\u2019re binding "),re=l(x,"CODE",{});var zo=p(re);bs=n(zo,"containerWidth"),zo.forEach(a),ys=n(x," to constantly equal the "),kt=l(x,"A",{href:!0,rel:!0});var Fo=p(kt);ie=l(Fo,"CODE",{});var No=p(ie);gs=n(No,"offsetWidth"),No.forEach(a),Fo.forEach(a),Os=n(x," of our "),ue=l(x,"CODE",{});var qo=p(ue);Cs=n(qo,"chart-container"),qo.forEach(a),Is=n(x," div. This is generally a good decision because it binds the chart width to its "),de=l(x,"EM",{});var Go=p(de);xs=n(Go,"container"),Go.forEach(a),Ws=n(x,", rather than the "),fe=l(x,"EM",{});var Vo=p(fe);Ds=n(Vo,"window"),Vo.forEach(a),Ps=n(x,". This allows for the chart to be embedded in any sort of complex layout, and still remain properly sized."),x.forEach(a),Qe=u(t),H=l(t,"P",{});var Xt=p(H);Ss=n(Xt,"More realistically, we want our "),he=l(Xt,"EM",{});var Bo=p(he);Ts=n(Bo,"chart width"),Bo.forEach(a),$s=n(Xt," to be slightly smaller than our "),ke=l(Xt,"EM",{});var Xo=p(ke);Ms=n(Xo,"container width"),Xo.forEach(a),Ls=n(Xt,", so that we have room for things like axis ticks and labels."),Xt.forEach(a),Ze=u(t),A=l(t,"P",{});var Yt=p(A);js=n(Yt,"We can record the exact number of pixels we want \u201Con the sides\u201D in an object called "),me=l(Yt,"CODE",{});var Yo=p(me);Hs=n(Yo,"margin"),Yo.forEach(a),As=n(Yt,". Then, we can set a new variable, "),ve=l(Yt,"CODE",{});var Uo=p(ve);Rs=n(Uo,"chartWidth"),Uo.forEach(a),zs=n(Yt," to equal the container width, minus our horizontal margins."),Yt.forEach(a),ta=u(t),mt=l(t,"PRE",{class:!0});var Xl=p(mt);Xl.forEach(a),ea=u(t),Tl(J.$$.fragment,t),aa=u(t),Lt=l(t,"P",{});var Jo=p(Lt);Fs=n(Jo,"To see our reactive chart dimensions in action, play around with the width of the playground below:"),Jo.forEach(a),sa=u(t),S=l(t,"IFRAME",{loading:!0,src:!0,width:!0,height:!0,title:!0}),p(S).forEach(a),na=u(t),vt=l(t,"H2",{id:!0});var Ko=p(vt);K=l(Ko,"A",{href:!0});var Ma=p(K);Ns=n(Ma,"Create a "),we=l(Ma,"CODE",{});var Qo=p(we);qs=n(Qo,"<Scatterplot />"),Qo.forEach(a),Gs=n(Ma," component"),Ma.forEach(a),Ko.forEach(a),oa=u(t),Q=l(t,"P",{});var La=p(Q);Vs=n(La,"Now that we have our chart dimensions, we can pass those dimensions into a component"),jt=l(La,"MORE-INFO",{content:!0,href:!0}),p(jt).forEach(a),Bs=n(La," that will handle the visualization itself."),La.forEach(a),la=u(t),wt=l(t,"P",{});var vo=p(wt);Xs=n(vo,"We\u2019ll want our scatterplot component to receive four properties."),Ht=l(vo,"MORE-INFO",{content:!0,href:!0}),p(Ht).forEach(a),vo.forEach(a),pa=u(t),I=l(t,"OL",{});var ot=p(I);Et=l(ot,"LI",{});var ja=p(Et);Ys=n(ja,"The data ("),Ee=l(ja,"CODE",{});var Zo=p(Ee);Us=n(Zo,"data"),Zo.forEach(a),Js=n(ja,")"),ja.forEach(a),Ks=u(ot),_t=l(ot,"LI",{});var Ha=p(_t);Qs=n(Ha,"Our chart width ("),_e=l(Ha,"CODE",{});var tl=p(_e);Zs=n(tl,"chartWidth"),tl.forEach(a),tn=n(Ha,")"),Ha.forEach(a),en=u(ot),bt=l(ot,"LI",{});var Aa=p(bt);an=n(Aa,"Our chart height ("),be=l(Aa,"CODE",{});var el=p(be);sn=n(el,"chartHeight"),el.forEach(a),nn=n(Aa,")"),Aa.forEach(a),on=u(ot),yt=l(ot,"LI",{});var Ra=p(yt);ln=n(Ra,"The margins surrounding our chart ("),ye=l(Ra,"CODE",{});var al=p(ye);pn=n(al,"margin"),al.forEach(a),cn=n(Ra,")"),Ra.forEach(a),ot.forEach(a),ca=u(t),At=l(t,"P",{});var sl=p(At);rn=n(sl,"In code, that looks like this:"),sl.forEach(a),ra=u(t),gt=l(t,"PRE",{class:!0});var Yl=p(gt);Yl.forEach(a),ia=u(t),Z=l(t,"P",{});var za=p(Z);un=n(za,"And in "),ge=l(za,"CODE",{});var nl=p(ge);dn=n(nl,"Scatterplot.svelte"),nl.forEach(a),fn=n(za,", we receive our props like this:"),za.forEach(a),ua=u(t),Ot=l(t,"PRE",{class:!0});var Ul=p(Ot);Ul.forEach(a),da=u(t),Y=l(t,"P",{});var Ge=p(Y);hn=n(Ge,"Now that we have our dimensions, we\u2019ll want to create "),Oe=l(Ge,"EM",{});var ol=p(Oe);kn=n(ol,"scales"),ol.forEach(a),mn=n(Ge," with them."),Rt=l(Ge,"MORE-INFO",{content:!0,href:!0}),p(Rt).forEach(a),Ge.forEach(a),fa=u(t),tt=l(t,"P",{});var Fa=p(tt);vn=n(Fa,"Here, we will leverage the power of D3\u2014in particular, "),Ct=l(Fa,"A",{href:!0,rel:!0});var ll=p(Ct);Ce=l(ll,"CODE",{});var pl=p(Ce);wn=n(pl,"d3-scale"),pl.forEach(a),ll.forEach(a),En=n(Fa,"\u2014to map our data\u2019s values to points on our canvas."),Fa.forEach(a),ha=u(t),R=l(t,"P",{});var Ut=p(R);_n=n(Ut,"We\u2019ll want to make our scales reactive according to our dynamic size variables we referenced earlier. Here, notice how we use "),Ie=l(Ut,"CODE",{});var cl=p(Ie);bn=n(cl,"$"),cl.forEach(a),yn=n(Ut," to denote reactivity, and notice how we reference "),xe=l(Ut,"CODE",{});var rl=p(xe);gn=n(rl,"width"),rl.forEach(a),On=n(Ut,"."),Ut.forEach(a),ka=u(t),It=l(t,"PRE",{class:!0});var Jl=p(It);Jl.forEach(a),ma=u(t),g=l(t,"P",{});var V=p(g);Cn=n(V,"In the above code, we\u2019re defining the domain "),zt=l(V,"MORE-INFO",{content:!0,href:!0}),p(zt).forEach(a),In=n(V," according to each cars\u2019 miles per gallon ("),We=l(V,"CODE",{});var il=p(We);xn=n(il,"mpg"),il.forEach(a),Wn=n(V,") and horsepower ("),De=l(V,"CODE",{});var ul=p(De);Dn=n(ul,"hp"),ul.forEach(a),Pn=n(V,"). We set the parameters for our range "),Ft=l(V,"MORE-INFO",{content:!0,href:!0}),p(Ft).forEach(a),Sn=n(V," to span the starting position (the left/bottom margin) to our chart width/height (minus our right/top margin value)."),V.forEach(a),va=u(t),z=l(t,"P",{});var Jt=p(z);Tn=n(Jt,"Now, when we pass a number into a scale, it will result in a point on the canvas. For example, the code "),Pe=l(Jt,"CODE",{});var dl=p(Pe);$n=n(dl,"xScale(25)"),dl.forEach(a),Mn=n(Jt," would result in a value of "),Se=l(Jt,"CODE",{});var fl=p(Se);Ln=n(fl,"__"),fl.forEach(a),jn=n(Jt,"."),Jt.forEach(a),wa=u(t),F=l(t,"P",{});var Kt=p(F);Hn=n(Kt,"We\u2019ll use these scales to define the "),Te=l(Kt,"CODE",{});var hl=p(Te);An=n(hl,"cx"),hl.forEach(a),Rn=n(Kt," and "),$e=l(Kt,"CODE",{});var kl=p($e);zn=n(kl,"cy"),kl.forEach(a),Fn=n(Kt," values for each of our circles. To do so, we\u2019ll need to iterate on each datapoint and render something."),Kt.forEach(a),Ea=u(t),xt=l(t,"H2",{id:!0});var ml=p(xt);et=l(ml,"A",{href:!0});var Na=p(et);Nn=n(Na,"Iterate with an "),Me=l(Na,"CODE",{});var vl=p(Me);qn=n(vl,"{#each}"),vl.forEach(a),Gn=n(Na," block"),Na.forEach(a),ml.forEach(a),_a=u(t),N=l(t,"P",{});var Qt=p(N);Vn=n(Qt,"In Svelte, an "),Le=l(Qt,"CODE",{});var wl=p(Le);Bn=n(wl,"{#each}"),wl.forEach(a),Xn=n(Qt," block"),Nt=l(Qt,"MORE-INFO",{content:!0,href:!0}),p(Nt).forEach(a),Yn=n(Qt," enables us to render listed content programatically, and include multiple attributes in the resulting markup."),Qt.forEach(a),ba=u(t),O=l(t,"P",{});var B=p(O);Un=n(B,"For our data, we\u2019ll want to iterate over each "),je=l(B,"EM",{});var El=p(je);Jn=n(El,"row"),El.forEach(a),Kn=n(B," of our data, and pass each "),He=l(B,"EM",{});var _l=p(He);Qn=n(_l,"row\u2019"),_l.forEach(a),Zn=n(B,"s "),Ae=l(B,"CODE",{});var bl=p(Ae);to=n(bl,"mpg"),bl.forEach(a),eo=n(B," and "),Re=l(B,"CODE",{});var yl=p(Re);ao=n(yl,"hp"),yl.forEach(a),so=n(B," (or whatever value you want to pass to the scatterplot) into a component that will eventually render some SVG."),B.forEach(a),ya=u(t),qt=l(t,"P",{});var gl=p(qt);no=n(gl,"Lets learn by doing. If we simply iterated on each row and wrote out our MPG and HP values, it would look like this:"),gl.forEach(a),ga=u(t),T=l(t,"IFRAME",{loading:!0,src:!0,width:!0,height:!0,title:!0}),p(T).forEach(a),Oa=u(t),Gt=l(t,"P",{});var Ol=p(Gt);oo=n(Ol,"But we don\u2019t want to write out our values, we want to:"),Ol.forEach(a),Ca=u(t),at=l(t,"OL",{});var qa=p(at);ze=l(qa,"LI",{});var Cl=p(ze);lo=n(Cl,"Transform those values into points on the canvas"),Cl.forEach(a),po=u(qa),Fe=l(qa,"LI",{});var Il=p(Fe);co=n(Il,"Pass them to a component that will render SVG elements"),Il.forEach(a),qa.forEach(a),Ia=u(t),Vt=l(t,"P",{});var xl=p(Vt);ro=n(xl,"To transform \u2026"),xl.forEach(a),xa=u(t),Wt=l(t,"H2",{id:!0});var Wl=p(Wt);st=l(Wl,"A",{href:!0});var Ga=p(st);io=n(Ga,"Create a "),Ne=l(Ga,"CODE",{});var Dl=p(Ne);uo=n(Dl,"<Circle />"),Dl.forEach(a),fo=n(Ga," component"),Ga.forEach(a),Wl.forEach(a),Wa=u(t),nt=l(t,"P",{});var Va=p(nt);ho=n(Va,"Next, we want to create a "),qe=l(Va,"CODE",{});var Pl=p(qe);ko=n(Pl,"<Circle />"),Pl.forEach(a),mo=n(Va," component that will take in our mapped data, and display an SVG with the appropriate attributes. We first import our props, like so:"),Va.forEach(a),Da=u(t),Dt=l(t,"PRE",{class:!0});var Kl=p(Dt);Kl.forEach(a),this.h()},h(){f(j,"href","https://observablehq.com/@d3/scatterplot"),f(j,"rel","nofollow"),f(C,"loading","lazy"),f(C,"title","An Observable chart of cars data"),f(C,"width","100%"),f(C,"height","684"),f(C,"frameborder","0"),ap(C,"background","white"),Eo(C.src,_o="https://observablehq.com/embed/@d3/scatterplot?cells=chart")||f(C,"src",_o),f(Mt,"href","#chart-dimensions"),f(ft,"id","chart-dimensions"),f(ht,"class","language-svelte"),f(kt,"href","https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/offsetWidth"),f(kt,"rel","nofollow"),f(mt,"class","language-svelte"),f(S,"loading","lazy"),Eo(S.src,bo="https://svelte.dev/repl/060a2a7847bc479eb4e456c966f096e9?version=3.38.3")||f(S,"src",bo),f(S,"width","100%"),f(S,"height","600"),f(S,"title","Responsive chart container"),f(K,"href","#create-a-ltscatterplot-gt-component"),f(vt,"id","create-a-ltscatterplot-gt-component"),W(jt,"content","A component is a reusable file that includes integrated markup, styles and functionality."),W(jt,"href","https://v2.svelte.dev/guide"),W(Ht,"content","Props are values passed from one component to another."),W(Ht,"href","https://svelte.dev/tutorial/declaring-props"),f(gt,"class","language-svelte"),f(Ot,"class","language-svelte"),W(Rt,"content","Scales map datapoints to positions on the canvas."),W(Rt,"href","https://www.d3indepth.com/scales/"),f(Ct,"href","https://github.com/d3/d3-scale"),f(Ct,"rel","nofollow"),f(It,"class","language-svelte"),W(zt,"content","A domain accepts the range of values to map data from."),W(zt,"href","https://observablehq.com/@d3/introduction-to-d3s-scales#cell-104"),W(Ft,"content","A range converts the values from our domain into a specified 'range' of positions."),W(Ft,"href","https://observablehq.com/@d3/introduction-to-d3s-scales#cell-104"),f(et,"href","#iterate-with-an-123each125-block"),f(xt,"id","iterate-with-an-123each125-block"),W(Nt,"content","These blocks of code function similarly to a for loop, but in our markup."),W(Nt,"href","https://svelte.dev/tutorial/each-blocks"),f(T,"loading","lazy"),Eo(T.src,yo=`https://svelte.dev/repl/7e3ec27da41440e880a49f83068fd97a?version=3.42.1
`)||f(T,"src",yo),f(T,"width","100%"),f(T,"height","600"),f(T,"title","Simple each block"),f(st,"href","#create-a-ltcircle-gt-component"),f(Wt,"id","create-a-ltcircle-gt-component"),f(Dt,"class","language-svelte")},m(t,c){r(t,d,c),e(d,_),r(t,w,c),r(t,m,c),e(m,h),e(m,v),e(v,M),e(m,lt),e(m,D),e(D,pt),e(m,ct),e(m,P),e(P,rt),e(m,it),r(t,L,c),r(t,k,c),e(k,Pt),e(k,j),e(j,St),e(k,Tt),r(t,Ve,c),r(t,C,c),r(t,Be,c),r(t,$t,c),e($t,Ba),r(t,Xe,c),r(t,b,c),e(b,Zt),e(Zt,Xa),e(b,Ya),e(b,ut),e(ut,Ua),e(ut,te),e(te,Ja),e(ut,Ka),e(b,Qa),e(b,dt),e(dt,Za),e(dt,ee),e(ee,ts),e(dt,es),e(b,as),e(b,X),e(X,ss),e(X,ae),e(ae,ns),e(X,os),e(X,se),e(se,ls),e(X,ps),e(b,cs),e(b,ne),e(ne,rs),r(t,Ye,c),r(t,ft,c),e(ft,Mt),e(Mt,is),r(t,Ue,c),r(t,y,c),e(y,us),e(y,oe),e(oe,ds),e(y,fs),e(y,le),e(le,hs),e(y,ks),e(y,pe),e(pe,ms),e(y,vs),e(y,ce),e(ce,ws),e(y,Es),r(t,Je,c),r(t,ht,c),ht.innerHTML=zl,r(t,Ke,c),r(t,E,c),e(E,_s),e(E,re),e(re,bs),e(E,ys),e(E,kt),e(kt,ie),e(ie,gs),e(E,Os),e(E,ue),e(ue,Cs),e(E,Is),e(E,de),e(de,xs),e(E,Ws),e(E,fe),e(fe,Ds),e(E,Ps),r(t,Qe,c),r(t,H,c),e(H,Ss),e(H,he),e(he,Ts),e(H,$s),e(H,ke),e(ke,Ms),e(H,Ls),r(t,Ze,c),r(t,A,c),e(A,js),e(A,me),e(me,Hs),e(A,As),e(A,ve),e(ve,Rs),e(A,zs),r(t,ta,c),r(t,mt,c),mt.innerHTML=Fl,r(t,ea,c),$l(J,t,c),r(t,aa,c),r(t,Lt,c),e(Lt,Fs),r(t,sa,c),r(t,S,c),r(t,na,c),r(t,vt,c),e(vt,K),e(K,Ns),e(K,we),e(we,qs),e(K,Gs),r(t,oa,c),r(t,Q,c),e(Q,Vs),e(Q,jt),e(Q,Bs),r(t,la,c),r(t,wt,c),e(wt,Xs),e(wt,Ht),r(t,pa,c),r(t,I,c),e(I,Et),e(Et,Ys),e(Et,Ee),e(Ee,Us),e(Et,Js),e(I,Ks),e(I,_t),e(_t,Qs),e(_t,_e),e(_e,Zs),e(_t,tn),e(I,en),e(I,bt),e(bt,an),e(bt,be),e(be,sn),e(bt,nn),e(I,on),e(I,yt),e(yt,ln),e(yt,ye),e(ye,pn),e(yt,cn),r(t,ca,c),r(t,At,c),e(At,rn),r(t,ra,c),r(t,gt,c),gt.innerHTML=Nl,r(t,ia,c),r(t,Z,c),e(Z,un),e(Z,ge),e(ge,dn),e(Z,fn),r(t,ua,c),r(t,Ot,c),Ot.innerHTML=ql,r(t,da,c),r(t,Y,c),e(Y,hn),e(Y,Oe),e(Oe,kn),e(Y,mn),e(Y,Rt),r(t,fa,c),r(t,tt,c),e(tt,vn),e(tt,Ct),e(Ct,Ce),e(Ce,wn),e(tt,En),r(t,ha,c),r(t,R,c),e(R,_n),e(R,Ie),e(Ie,bn),e(R,yn),e(R,xe),e(xe,gn),e(R,On),r(t,ka,c),r(t,It,c),It.innerHTML=Gl,r(t,ma,c),r(t,g,c),e(g,Cn),e(g,zt),e(g,In),e(g,We),e(We,xn),e(g,Wn),e(g,De),e(De,Dn),e(g,Pn),e(g,Ft),e(g,Sn),r(t,va,c),r(t,z,c),e(z,Tn),e(z,Pe),e(Pe,$n),e(z,Mn),e(z,Se),e(Se,Ln),e(z,jn),r(t,wa,c),r(t,F,c),e(F,Hn),e(F,Te),e(Te,An),e(F,Rn),e(F,$e),e($e,zn),e(F,Fn),r(t,Ea,c),r(t,xt,c),e(xt,et),e(et,Nn),e(et,Me),e(Me,qn),e(et,Gn),r(t,_a,c),r(t,N,c),e(N,Vn),e(N,Le),e(Le,Bn),e(N,Xn),e(N,Nt),e(N,Yn),r(t,ba,c),r(t,O,c),e(O,Un),e(O,je),e(je,Jn),e(O,Kn),e(O,He),e(He,Qn),e(O,Zn),e(O,Ae),e(Ae,to),e(O,eo),e(O,Re),e(Re,ao),e(O,so),r(t,ya,c),r(t,qt,c),e(qt,no),r(t,ga,c),r(t,T,c),r(t,Oa,c),r(t,Gt,c),e(Gt,oo),r(t,Ca,c),r(t,at,c),e(at,ze),e(ze,lo),e(at,po),e(at,Fe),e(Fe,co),r(t,Ia,c),r(t,Vt,c),e(Vt,ro),r(t,xa,c),r(t,Wt,c),e(Wt,st),e(st,io),e(st,Ne),e(Ne,uo),e(st,fo),r(t,Wa,c),r(t,nt,c),e(nt,ho),e(nt,qe),e(qe,ko),e(nt,mo),r(t,Da,c),r(t,Dt,c),Dt.innerHTML=Vl,Pa=!0},p(t,c){const $={};c&2&&($.$$scope={dirty:c,ctx:t}),J.$set($)},i(t){Pa||(Ll(J.$$.fragment,t),Pa=!0)},o(t){jl(J.$$.fragment,t),Pa=!1},d(t){t&&a(d),t&&a(w),t&&a(m),t&&a(L),t&&a(k),t&&a(Ve),t&&a(C),t&&a(Be),t&&a($t),t&&a(Xe),t&&a(b),t&&a(Ye),t&&a(ft),t&&a(Ue),t&&a(y),t&&a(Je),t&&a(ht),t&&a(Ke),t&&a(E),t&&a(Qe),t&&a(H),t&&a(Ze),t&&a(A),t&&a(ta),t&&a(mt),t&&a(ea),Hl(J,t),t&&a(aa),t&&a(Lt),t&&a(sa),t&&a(S),t&&a(na),t&&a(vt),t&&a(oa),t&&a(Q),t&&a(la),t&&a(wt),t&&a(pa),t&&a(I),t&&a(ca),t&&a(At),t&&a(ra),t&&a(gt),t&&a(ia),t&&a(Z),t&&a(ua),t&&a(Ot),t&&a(da),t&&a(Y),t&&a(fa),t&&a(tt),t&&a(ha),t&&a(R),t&&a(ka),t&&a(It),t&&a(ma),t&&a(g),t&&a(va),t&&a(z),t&&a(wa),t&&a(F),t&&a(Ea),t&&a(xt),t&&a(_a),t&&a(N),t&&a(ba),t&&a(O),t&&a(ya),t&&a(qt),t&&a(ga),t&&a(T),t&&a(Oa),t&&a(Gt),t&&a(Ca),t&&a(at),t&&a(Ia),t&&a(Vt),t&&a(xa),t&&a(Wt),t&&a(Wa),t&&a(nt),t&&a(Da),t&&a(Dt)}}}function pp(U){let d,_;const w=[U[0],Rl];let m={$$slots:{default:[lp]},$$scope:{ctx:U}};for(let h=0;h<w.length;h+=1)m=wo(m,w[h]);return d=new sp({props:m}),{c(){Sl(d.$$.fragment)},l(h){Tl(d.$$.fragment,h)},m(h,v){$l(d,h,v),_=!0},p(h,[v]){const M=v&1?ep(w,[v&1&&Ml(h[0]),v&0&&Ml(Rl)]):{};v&2&&(M.$$scope={dirty:v,ctx:h}),d.$set(M)},i(h){_||(Ll(d.$$.fragment,h),_=!0)},o(h){jl(d.$$.fragment,h),_=!1},d(h){Hl(d,h)}}}const Rl={layout:"blog",title:"Creating the ultimate scatterplot in Svelte",description:"Svelte + D3, in action",date:"2021-07-09",image:"svelte-and-d3/header.png",draft:!0,tags:["svelte","d3","tutorial"]};function cp(U,d,_){return U.$$set=w=>{_(0,d=wo(wo({},d),Al(w)))},d=Al(d),[d]}class Ep extends Ql{constructor(d){super();Zl(this,d,cp,pp,tp,{})}}export{Ep as default,Rl as metadata};
